// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this._target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this._target.call(this._self);
  }
}];

$$.BoundClosure$i1 = [W, {"": "BoundClosure;_self,_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this._target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "CanvasGradient|CanvasPattern|DOMError|DOMImplementation|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  clamp$2: function(receiver, lowerLimit, upperLimit) {
    if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
      throw H.wrapException(new P.ArgumentError(lowerLimit));
    if (this.compareTo$1(receiver, lowerLimit) < 0)
      return lowerLimit;
    if (this.compareTo$1(receiver, upperLimit) > 0)
      return upperLimit;
    return receiver;
  },
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw H.wrapException(P.RangeError$(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    if (receiver === 0 && this.get$isNegative(receiver))
      return "-" + result;
    return result;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1._controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this._controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this._controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this._controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
},

TimerImpl$periodic_closure: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  handleError = H.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = C.JSString_methods.trim$0(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return result;
    return handleError.call$1(source);
  }
  return result;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives_numMicroseconds: function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
  }
  return 1000 * Date.now();
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._dev$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._dev$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
  },
  $isBoundClosure: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["creeper", "main.dart", , U, {
onMouseMove: function(evt) {
  var t1, t2, t3, t4, t5;
  $.engine.updateMouse$1(evt);
  t1 = $.game;
  if (t1 != null) {
    t2 = $.engine;
    t3 = t2.mouse;
    t1.scrollingLeft = t3.x === 0;
    t4 = t3.x;
    t5 = t2.width;
    if (typeof t5 !== "number")
      throw t5.$sub();
    t1.scrollingRight = t4 === t5 - 1;
    t1.scrollingUp = t3.y === 0;
    t3 = t3.y;
    t2 = t2.height;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1.scrollingDown = t3 === t2 - 1;
  }
},

onMouseMoveGUI: function(evt) {
  var i, t1;
  $.engine.updateMouseGUI$1(evt);
  for (i = 0; t1 = $.game.symbols, i < t1.length; ++i)
    t1[i].checkHovered$0();
},

onKeyDown: function(evt) {
  var t1, i, t2, t3, t4, t5, position, tilesToRedraw;
  for (t1 = J.getInterceptor$x(evt), i = 0; t2 = $.game.symbols, i < t2.length; ++i) {
    t2[i].active = false;
    t2 = t1.get$keyCode(evt);
    t3 = $.game;
    t4 = t3.symbols;
    if (i >= t4.length)
      throw H.ioore(t4, i);
    t5 = t4[i];
    if (t2 === t5.keyCode) {
      t3.activeSymbol = i;
      if (i >= t4.length)
        throw H.ioore(t4, i);
      t5.active = true;
      t2 = $.engine.canvas;
      J.set$cursor$x(t2.$index(t2, "main").get$element().style, "none");
    }
  }
  if (t1.get$keyCode(evt) === 112)
    $.game.faster$0();
  if (t1.get$keyCode(evt) === 113)
    $.game.slower$0();
  if (t1.get$keyCode(evt) === 46)
    for (i = 0; t2 = $.game, t3 = t2.buildings, i < t3.length; ++i) {
      t3 = t3[i];
      if (J.get$selected$x(t3) === true)
        if (t3.get$imageID() !== "base")
          t2.removeBuilding$1(t3);
    }
  if (t1.get$keyCode(evt) === 19) {
    t2 = $.game;
    if (t2.paused)
      t2.resume$0();
    else
      t2.pause$0(t2);
  }
  if (t1.get$keyCode(evt) === 27) {
    t2 = $.game;
    t2.activeSymbol = -1;
    for (t2 = t2.symbols, i = 0; i < t2.length; ++i)
      t2[i].active = false;
    for (i = 0; t2 = $.game, t3 = t2.buildings, i < t3.length; ++i)
      J.set$selected$x(t3[i], false);
    for (t2 = t2.ships, i = 0; i < t2.length; ++i)
      t2[i].selected = false;
    t2 = $.engine.canvas;
    J.set$cursor$x(t2.$index(t2, "main").get$element().style, "url('images/Normal.cur') 2 2, pointer");
  }
  if (t1.get$keyCode(evt) === 37)
    $.game.scrollingLeft = true;
  if (t1.get$keyCode(evt) === 38)
    $.game.scrollingUp = true;
  if (t1.get$keyCode(evt) === 39)
    $.game.scrollingRight = true;
  if (t1.get$keyCode(evt) === 40)
    $.game.scrollingDown = true;
  position = $.game.getHoveredTilePosition$0();
  if (t1.get$keyCode(evt) === 78) {
    t2 = $.game.world.tiles;
    t3 = position.x;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t3 = J.get$height$x(J.$index$asx(t2[t3], position.y));
    if (typeof t3 !== "number")
      throw t3.$gt();
    if (t3 > -1) {
      t2 = $.game.world.tiles;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw H.ioore(t2, t3);
      t3 = J.$index$asx(t2[t3], position.y);
      t2 = J.getInterceptor$x(t3);
      t4 = t2.get$height(t3);
      if (typeof t4 !== "number")
        throw t4.$sub();
      t2.set$height(t3, t4 - 1);
      tilesToRedraw = P.List_List(null, null);
      tilesToRedraw.push(new U.Vector(position.x, position.y));
      t4 = position.x;
      if (typeof t4 !== "number")
        throw t4.$sub();
      tilesToRedraw.push(new U.Vector(t4 - 1, position.y));
      t4 = position.x;
      t3 = position.y;
      if (typeof t3 !== "number")
        throw t3.$sub();
      tilesToRedraw.push(new U.Vector(t4, t3 - 1));
      t3 = position.x;
      if (typeof t3 !== "number")
        throw t3.$add();
      tilesToRedraw.push(new U.Vector(t3 + 1, position.y));
      t3 = position.x;
      t4 = position.y;
      if (typeof t4 !== "number")
        throw t4.$add();
      tilesToRedraw.push(new U.Vector(t3, t4 + 1));
      $.game.redrawTiles$1(tilesToRedraw);
    }
  }
  if (t1.get$keyCode(evt) === 77) {
    t2 = $.game.world.tiles;
    t3 = position.x;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t3 = J.get$height$x(J.$index$asx(t2[t3], position.y));
    if (typeof t3 !== "number")
      throw t3.$lt();
    if (t3 < 9) {
      t2 = $.game.world.tiles;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw H.ioore(t2, t3);
      t3 = J.$index$asx(t2[t3], position.y);
      t2 = J.getInterceptor$x(t3);
      t2.set$height(t3, J.$add$ns(t2.get$height(t3), 1));
      tilesToRedraw = P.List_List(null, null);
      tilesToRedraw.push(new U.Vector(position.x, position.y));
      t3 = position.x;
      if (typeof t3 !== "number")
        throw t3.$sub();
      tilesToRedraw.push(new U.Vector(t3 - 1, position.y));
      t3 = position.x;
      t2 = position.y;
      if (typeof t2 !== "number")
        throw t2.$sub();
      tilesToRedraw.push(new U.Vector(t3, t2 - 1));
      t2 = position.x;
      if (typeof t2 !== "number")
        throw t2.$add();
      tilesToRedraw.push(new U.Vector(t2 + 1, position.y));
      t2 = position.x;
      t3 = position.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      tilesToRedraw.push(new U.Vector(t2, t3 + 1));
      $.game.redrawTiles$1(tilesToRedraw);
    }
  }
  if (t1.get$keyCode(evt) === 66) {
    t2 = $.game.world.tiles;
    t3 = position.x;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    J.set$height$x(J.$index$asx(t2[t3], position.y), -1);
    tilesToRedraw = P.List_List(null, null);
    tilesToRedraw.push(new U.Vector(position.x, position.y));
    t3 = position.x;
    if (typeof t3 !== "number")
      throw t3.$sub();
    tilesToRedraw.push(new U.Vector(t3 - 1, position.y));
    t3 = position.x;
    t2 = position.y;
    if (typeof t2 !== "number")
      throw t2.$sub();
    tilesToRedraw.push(new U.Vector(t3, t2 - 1));
    t2 = position.x;
    if (typeof t2 !== "number")
      throw t2.$add();
    tilesToRedraw.push(new U.Vector(t2 + 1, position.y));
    t2 = position.x;
    t3 = position.y;
    if (typeof t3 !== "number")
      throw t3.$add();
    tilesToRedraw.push(new U.Vector(t2, t3 + 1));
    $.game.redrawTiles$1(tilesToRedraw);
  }
  if ($.game.mode === "TERRAFORM") {
    if (t1.get$keyCode(evt) === 46) {
      t2 = $.game.world.tiles;
      t3 = position.x;
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw H.ioore(t2, t3);
      J.$index$asx(t2[t3], position.y).set$terraformTarget(-1);
      t3 = $.game.world.tiles;
      t2 = position.x;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t3, t2);
      J.$index$asx(t3[t2], position.y).set$terraformProgress(0);
    }
    t2 = t1.get$keyCode(evt);
    if (typeof t2 !== "number")
      throw t2.$ge();
    if (t2 >= 48) {
      t2 = t1.get$keyCode(evt);
      if (typeof t2 !== "number")
        throw t2.$le();
      t2 = t2 <= 57;
    } else
      t2 = false;
    if (t2) {
      t2 = $.game;
      t1 = t1.get$keyCode(evt);
      if (typeof t1 !== "number")
        throw t1.$sub();
      t2.terraformingHeight = t1 - 49;
      t1 = $.game;
      if (t1.terraformingHeight === -1)
        t1.terraformingHeight = 9;
    }
  }
},

onKeyUp: function(evt) {
  var t1 = J.getInterceptor$x(evt);
  if (t1.get$keyCode(evt) === 37)
    $.game.scrollingLeft = false;
  if (t1.get$keyCode(evt) === 38)
    $.game.scrollingUp = false;
  if (t1.get$keyCode(evt) === 39)
    $.game.scrollingRight = false;
  if (t1.get$keyCode(evt) === 40)
    $.game.scrollingDown = false;
},

onClickGUI: function(evt) {
  var i, t1, t2;
  for (i = 0; t1 = $.game, t2 = t1.buildings, i < t2.length; ++i)
    J.set$selected$x(t2[i], false);
  for (t1 = t1.ships, i = 0; i < t1.length; ++i)
    t1[i].selected = false;
  $.engine.playSound$1("click");
  for (i = 0; t1 = $.game, t2 = t1.symbols, i < t2.length; ++i)
    t2[i].setActive$0();
  if (t1.activeSymbol !== -1) {
    t1 = $.engine.canvas;
    J.set$cursor$x(t1.$index(t1, "main").get$element().style, "none");
  }
},

onDoubleClick: function(evt) {
  var t1, t2, i, selectShips;
  for (t1 = $.game.ships, t2 = t1.length, i = 0; selectShips = false, i < t2; ++i)
    if (t1[i].hovered) {
      selectShips = true;
      break;
    }
  if (selectShips)
    for (i = 0; i < t1.length; ++i)
      t1[i].selected = true;
},

onMouseDown: function(evt) {
  var position, t1;
  if (J.get$which$x(evt) === 1) {
    position = $.game.getHoveredTilePosition$0();
    t1 = $.engine.mouse;
    if (t1.dragStart == null)
      t1.dragStart = new U.Vector(position.x, position.y);
  }
},

onMouseUp: function(evt) {
  var position, t1, t2, i, t3, buildingSelected, buildingSelected0, soundSuccess, t4;
  if (J.get$which$x(evt) === 1) {
    position = $.game.getHoveredTilePosition$0();
    t1 = $.game;
    if (t1.mode === "TERRAFORM") {
      t1 = t1.world.tiles;
      t2 = position.x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      J.$index$asx(t1[t2], position.y).set$terraformTarget($.game.terraformingHeight);
      t2 = $.game.world.tiles;
      t1 = position.x;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      J.$index$asx(t2[t1], position.y).set$terraformProgress(0);
    }
    for (i = 0; t1 = $.game.ships, i < t1.length; ++i) {
      t1 = t1[i];
      t1.control$1(t1, position);
    }
    for (i = 0; t1 = $.game, t2 = t1.buildings, i < t2.length; ++i) {
      t2 = t2[i];
      if (t2.get$built() && t2.selected && t2.canMove) {
        t2 = t2.size;
        t3 = $.game.buildings;
        if (i >= t3.length)
          throw H.ioore(t3, i);
        if (t1.canBePlaced$3(position, t2, t3[i])) {
          t1 = $.engine.canvas;
          J.set$cursor$x(t1.$index(t1, "main").get$element().style, "url('images/Normal.cur') 2 2, pointer");
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          t1[i].set$operating(false);
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          t1[i].set$weaponTargetPosition(null);
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          J.set$status$x(t1[i], "RISING");
          t1 = $.game.buildings;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          t1[i].set$moveTargetPosition(position);
        }
      }
    }
    if (t1.mode === "DEFAULT") {
      for (buildingSelected = null, i = 0; t1 = $.game.buildings, i < t1.length; ++i) {
        t1 = t1[i];
        t1.set$selected(t1, t1.get$hovered());
        t1 = $.game.buildings;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        buildingSelected0 = t1[i];
        if (J.get$selected$x(buildingSelected0) === true)
          buildingSelected = buildingSelected0;
      }
      if (buildingSelected != null)
        if (buildingSelected.get$active()) {
          J.set$display$x(document.querySelector("#deactivate").style, "block");
          J.set$display$x(document.querySelector("#activate").style, "none");
        } else {
          J.set$display$x(document.querySelector("#deactivate").style, "none");
          J.set$display$x(document.querySelector("#activate").style, "block");
        }
      else {
        J.set$display$x(document.querySelector("#deactivate").style, "none");
        J.set$display$x(document.querySelector("#activate").style, "none");
      }
    }
    $.engine.mouse.dragStart = null;
    t1 = $.game;
    t2 = t1.activeSymbol;
    if (t2 !== -1) {
      t1 = t1.symbols;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t2 = C.JSString_methods.substring$2(t1[t2].imageID, 0, 1).toUpperCase();
      t1 = $.game;
      t3 = t1.symbols;
      t1 = t1.activeSymbol;
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw H.ioore(t3, t1);
      t2 + C.JSString_methods.substring$1(t3[t1].imageID, 1);
      for (soundSuccess = false, i = 0; t1 = $.game, t2 = t1.ghosts, i < t2.length; ++i) {
        t2 = t2[i];
        t3 = t1.symbols;
        t4 = t1.activeSymbol;
        if (t4 >>> 0 !== t4 || t4 >= t3.length)
          throw H.ioore(t3, t4);
        if (t1.canBePlaced$3(t2, t3[t4].size, null)) {
          t1 = $.game;
          t2 = t1.ghosts;
          if (i >= t2.length)
            throw H.ioore(t2, i);
          t2 = t2[i];
          t3 = t1.symbols;
          t4 = t1.activeSymbol;
          if (t4 >>> 0 !== t4 || t4 >= t3.length)
            throw H.ioore(t3, t4);
          t1.addBuilding$2(t2, t3[t4].imageID);
          soundSuccess = true;
        }
      }
      t1 = $.engine;
      if (soundSuccess)
        t1.playSound$1("click");
      else
        t1.playSound$1("failure");
    }
  } else if (evt.which === 3) {
    $.game.mode = "DEFAULT";
    for (i = 0; t1 = $.game, t2 = t1.buildings, i < t2.length; ++i) {
      J.set$selected$x(t2[i], false);
      J.set$display$x(document.querySelector("#deactivate").style, "none");
      J.set$display$x(document.querySelector("#activate").style, "none");
    }
    for (t1 = t1.ships, i = 0; i < t1.length; ++i)
      t1[i].selected = false;
    t1 = document.querySelector("#terraform");
    t1.toString;
    new W._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform Off");
    $.game.clearSymbols$0();
  }
},

onMouseScroll: function(evt) {
  var t1, t2;
  t1 = J.get$deltaY$x(evt);
  if (typeof t1 !== "number")
    throw t1.$gt();
  t2 = $.game;
  if (t1 > 0)
    t2.zoomOut$0();
  else
    t2.zoomIn$0();
  evt.preventDefault();
},

onResize: function(evt) {
  var t1 = $.engine.resizeTimer;
  if (t1 != null)
    t1.cancel$0();
  $.engine.resizeTimer = P.Timer_Timer(P.Duration$(0, 0, 0, 250, 0, 0), U.doneResizing$closure);
},

doneResizing: function() {
  var width, height, t1, t2;
  width = window.innerWidth;
  height = window.innerHeight;
  t1 = $.engine;
  t1.width = width;
  t1.height = height;
  if (typeof width !== "number")
    throw width.$tdiv();
  t1.halfWidth = C.JSInt_methods.$tdiv(width, 2);
  if (typeof height !== "number")
    throw height.$tdiv();
  t1.halfHeight = C.JSInt_methods.$tdiv(height, 2);
  t1 = t1.canvas;
  t1.$index(t1, "main").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "levelfinal").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "buffer").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "collection").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "creeperbuffer").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1.$index(t1, "creeper").updateRect$2(width, height);
  t1 = $.engine.canvas;
  t1 = t1.$index(t1, "gui");
  t2 = $.engine.canvas;
  J.set$top$x(t1, t2.$index(t2, "gui").get$element().offsetTop);
  t2 = $.engine.canvas;
  t2 = t2.$index(t2, "gui");
  t1 = $.engine.canvas;
  J.set$left$x(t2, t1.$index(t1, "gui").get$element().offsetLeft);
  t1 = $.game;
  if (t1 != null) {
    t1.copyTerrain$0();
    $.game.drawCollection$0();
    $.game.drawCreeper$0();
  }
},

main: function() {
  $.engine = U.Engine$();
  $.engine.loadImages$0().then$1(new U.main_closure());
},

Building: {"": "Object;position>,moveTargetPosition?,weaponTargetPosition?,speed,imageID<,status*,operating?,selected*,hovered<,built<,active@,canMove,needsEnergy,rotating,health,maxHealth,energy,maxEnergy,healthRequests,energyRequests,scale,angle,targetAngle,weaponRadius,size>,collectedEnergy,flightCounter,requestCounter,energyCounter,ship",
  updateHoverState$0: function() {
    var realPosition, t1, t2, t3, t4, t5, t6;
    realPosition = this.position.tiled2screen$0();
    t1 = $.engine.mouse;
    t2 = t1.x;
    t3 = realPosition.x;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t2 > t3) {
      t4 = $.game;
      t5 = t4.tileSize;
      t6 = this.size;
      t4 = t4.zoom;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      t4 = t5 * t6 * t4;
      if (t2 < t3 + t4 - 1) {
        t1 = t1.y;
        t2 = realPosition.y;
        if (typeof t2 !== "number")
          throw H.iae(t2);
        t1 = t1 > t2 && t1 < t2 + t4 - 1;
      } else
        t1 = false;
    } else
      t1 = false;
    this.hovered = t1;
    return this.hovered;
  },
  move$0: function() {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.status;
    if (t1 === "RISING") {
      t1 = this.flightCounter;
      if (t1 < 25) {
        this.flightCounter = t1 + 1;
        this.scale = this.scale * 1.01;
      }
      if (this.flightCounter === 25)
        this.status = "MOVING";
    } else if (t1 === "FALLING") {
      t1 = this.flightCounter;
      if (t1 > 0) {
        this.flightCounter = t1 - 1;
        this.scale = this.scale / 1.01;
      }
      if (this.flightCounter === 0) {
        this.status = "IDLE";
        this.scale = 1;
      }
    }
    if (this.status === "MOVING") {
      this.calculateVector$0();
      t1 = this.position;
      this.position = t1.$add(t1, this.speed);
      t1 = this.position;
      t2 = t1.x;
      t3 = $.game.tileSize;
      if (typeof t2 !== "number")
        throw t2.$mul();
      t2 *= t3;
      t4 = this.moveTargetPosition;
      t5 = t4.x;
      if (typeof t5 !== "number")
        throw t5.$mul();
      t6 = t5 * t3;
      if (t2 > t6 - 1)
        if (t2 < t6 + 1) {
          t2 = t1.y;
          if (typeof t2 !== "number")
            throw t2.$mul();
          t2 *= t3;
          t4 = t4.y;
          if (typeof t4 !== "number")
            throw t4.$mul();
          t3 = t4 * t3;
          t2 = t2 > t3 - 1 && t2 < t3 + 1;
        } else
          t2 = false;
      else
        t2 = false;
      if (t2) {
        t1.x = t5;
        this.position.y = this.moveTargetPosition.y;
        this.status = "FALLING";
      }
    }
  },
  calculateVector$0: function() {
    var t1, t2, t3, t4, t5, t6, targetPosition, ownPosition, delta, distance;
    t1 = this.moveTargetPosition;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (t2 == null ? t4 == null : t2 === t4) {
      t5 = t1.y;
      t6 = t3.y;
      t6 = t5 == null ? t6 != null : t5 !== t6;
      t5 = t6;
    } else
      t5 = true;
    if (t5) {
      t5 = $.game.tileSize;
      if (typeof t2 !== "number")
        throw t2.$mul();
      t1 = t1.y;
      if (typeof t1 !== "number")
        throw t1.$mul();
      targetPosition = new U.Vector(t2 * t5, t1 * t5);
      if (typeof t4 !== "number")
        throw t4.$mul();
      t3 = t3.y;
      if (typeof t3 !== "number")
        throw t3.$mul();
      ownPosition = new U.Vector(t4 * t5, t3 * t5);
      t5 = targetPosition.x;
      t3 = ownPosition.x;
      if (typeof t5 !== "number")
        throw t5.$sub();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t4 = targetPosition.y;
      t1 = ownPosition.y;
      if (typeof t4 !== "number")
        throw t4.$sub();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      delta = new U.Vector(t5 - t3, t4 - t1);
      distance = ownPosition.distanceTo$1(targetPosition);
      t1 = this.speed;
      t4 = delta.x;
      if (typeof t4 !== "number")
        throw t4.$div();
      t3 = $.game;
      t5 = t3.speed;
      t2 = t3.tileSize;
      t1.x = t4 / distance * 0.5 * t5 / t2;
      t5 = this.speed;
      t4 = delta.y;
      if (typeof t4 !== "number")
        throw t4.$div();
      t5.y = t4 / distance * 0.5 * t3.speed / t2;
      if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
        this.speed.x = delta.x;
      if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
        this.speed.y = delta.y;
    }
  },
  getCenter$0: function() {
    var t1, t2, t3, t4;
    t1 = this.position;
    t2 = t1.x;
    t3 = $.game.tileSize;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t4 = t3 / 2 * this.size;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    return new U.Vector(t2 * t3 + t4, t1 * t3 + t4);
  },
  takeDamage$0: function() {
    var i, j, t1, t2, t3, t4;
    if (this.status === "IDLE") {
      for (i = 0; i < this.size; ++i)
        for (j = 0; j < this.size; ++j) {
          t1 = $.game.world.tiles;
          t2 = this.position;
          t3 = t2.x;
          if (typeof t3 !== "number")
            throw t3.$add();
          t3 += i;
          if (t3 >>> 0 !== t3 || t3 >= t1.length)
            throw H.ioore(t1, t3);
          t3 = t1[t3];
          t2 = t2.y;
          if (typeof t2 !== "number")
            throw t2.$add();
          if (J.$index$asx(t3, t2 + j).get$creep() > 0) {
            t1 = this.health;
            t2 = $.game.world.tiles;
            t3 = this.position;
            t4 = t3.x;
            if (typeof t4 !== "number")
              throw t4.$add();
            t4 += i;
            if (t4 >>> 0 !== t4 || t4 >= t2.length)
              throw H.ioore(t2, t4);
            t4 = t2[t4];
            t3 = t3.y;
            if (typeof t3 !== "number")
              throw t3.$add();
            this.health = t1 - J.$index$asx(t4, t3 + j).get$creep() / 10;
          }
        }
      if (this.health < 0)
        $.game.removeBuilding$1(this);
    }
  },
  shield$0: function() {
    var center, t1, t2, i, t3, j, distance;
    if (this.built && this.imageID === "shield" && this.status === "IDLE") {
      center = this.getCenter$0();
      t1 = this.position.x;
      t2 = this.weaponRadius;
      if (typeof t1 !== "number")
        throw t1.$sub();
      i = t1 - t2;
      while (true) {
        t1 = this.position;
        t2 = t1.x;
        t3 = this.weaponRadius;
        if (typeof t2 !== "number")
          throw t2.$add();
        if (!(i <= t2 + t3))
          break;
        t1 = t1.y;
        if (typeof t1 !== "number")
          throw t1.$sub();
        j = t1 - t3;
        while (true) {
          t1 = this.position.y;
          t2 = this.weaponRadius;
          if (typeof t1 !== "number")
            throw t1.$add();
          if (!(j <= t1 + t2))
            break;
          if ($.game.withinWorld$2(i, j)) {
            t1 = $.game.tileSize;
            t2 = center.x;
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
            t2 = $.game.tileSize;
            t3 = center.y;
            if (typeof t3 !== "number")
              throw H.iae(t3);
            distance = t1 + Math.pow(j * t2 + t2 / 2 - t3, 2);
            t1 = $.game.tileSize;
            if (distance < Math.pow(t1 * 10, 2)) {
              t1 = $.game.world.tiles;
              if (i >>> 0 !== i || i >= t1.length)
                throw H.ioore(t1, i);
              if (J.$index$asx(t1[i], j).get$creep() > 0) {
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  throw H.ioore(t1, i);
                t1 = J.$index$asx(t1[i], j);
                t2 = t1.get$creep();
                t3 = $.game;
                t1.creep = t2 - distance / t3.tileSize * 0.1;
                t1 = t3.world.tiles;
                if (i >= t1.length)
                  throw H.ioore(t1, i);
                if (J.$index$asx(t1[i], j).get$creep() < 0) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    throw H.ioore(t1, i);
                  J.$index$asx(t1[i], j).set$creep(0);
                }
              }
            }
          }
          ++j;
        }
        ++i;
      }
    }
  },
  requestPacket$0: function() {
    if (this.active && this.status === "IDLE") {
      this.requestCounter = this.requestCounter + 1;
      if (this.requestCounter > 50) {
        if (this.imageID !== "base")
          if (this.maxHealth - this.health - this.healthRequests > 0) {
            this.requestCounter = 0;
            $.game.queuePacket$2(this, "health");
          }
        if (this.needsEnergy && this.built)
          if (this.maxEnergy - this.energy - this.energyRequests > 0) {
            this.requestCounter = 0;
            $.game.queuePacket$2(this, "energy");
          }
      }
    }
  },
  collectEnergy$0: function() {
    var t1, t2, t3, height, centerBuilding, i, j, positionCurrent, t4, t5, positionCurrentCenter, tileHeight, packet;
    if (this.imageID === "collector" && this.built) {
      t1 = $.game.world.tiles;
      t2 = this.position;
      t3 = t2.x;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw H.ioore(t1, t3);
      height = J.get$height$x(J.$index$asx(t1[t3], t2.y));
      centerBuilding = this.getCenter$0();
      for (i = -5; i < 7; ++i)
        for (j = -5; j < 7; ++j) {
          t1 = this.position;
          t2 = t1.x;
          if (typeof t2 !== "number")
            throw t2.$add();
          t1 = t1.y;
          if (typeof t1 !== "number")
            throw t1.$add();
          positionCurrent = new U.Vector(t2 + i, t1 + j);
          if ($.game.withinWorld$2(positionCurrent.x, positionCurrent.y)) {
            t1 = positionCurrent.x;
            t2 = $.game;
            t3 = t2.tileSize;
            if (typeof t1 !== "number")
              throw t1.$mul();
            t4 = t3 / 2;
            t5 = positionCurrent.y;
            if (typeof t5 !== "number")
              throw t5.$mul();
            positionCurrentCenter = new U.Vector(t1 * t3 + t4, t5 * t3 + t4);
            t2 = t2.world.tiles;
            if (t1 >>> 0 !== t1 || t1 >= t2.length)
              throw H.ioore(t2, t1);
            tileHeight = J.get$height$x(J.$index$asx(t2[t1], t5));
            t1 = positionCurrentCenter.x;
            t2 = centerBuilding.x;
            if (typeof t1 !== "number")
              throw t1.$sub();
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t1 = Math.pow(t1 - t2, 2);
            t2 = positionCurrentCenter.y;
            t3 = centerBuilding.y;
            if (typeof t2 !== "number")
              throw t2.$sub();
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t2 = Math.pow(t2 - t3, 2);
            t3 = $.game.tileSize;
            if (t1 + t2 < Math.pow(t3 * 6, 2))
              if (J.$eq(tileHeight, height)) {
                t1 = $.game.world.tiles;
                t2 = positionCurrent.x;
                if (t2 >>> 0 !== t2 || t2 >= t1.length)
                  throw H.ioore(t1, t2);
                if (J.$eq(J.$index$asx(t1[t2], positionCurrent.y).get$collector(), this))
                  this.collectedEnergy = this.collectedEnergy + 1;
              }
          }
        }
    }
    if (this.imageID === "reactor" && this.built)
      this.collectedEnergy = this.collectedEnergy + 50;
    t1 = this.collectedEnergy;
    if (t1 >= 100) {
      this.collectedEnergy = t1 - 100;
      if (this.imageID === "collector") {
        packet = new U.Packet(this.getCenter$0(), new U.Vector(0, 0), "packet_collection", "collection", false, 1, null, null);
        t1 = $.game;
        packet.target = t1.base;
        packet.currentTarget = this;
        t1.findRoute$1(packet);
        if (packet.currentTarget != null)
          $.game.packets.push(packet);
      }
      if (this.imageID === "reactor") {
        t1 = $.game;
        t1.currentEnergy = t1.currentEnergy + 1;
        t2 = t1.currentEnergy;
        t3 = t1.maxEnergy;
        if (t2 > t3)
          t1.currentEnergy = t3;
        t1.updateEnergyElement$0();
      }
    }
  },
  checkOperating$0: function() {
    var center, i, t1, t2, t3, emitterCenter, t4, target, lowestTile, j, tileHeight, terraformElement, height, tilesToRedraw, targets, r, radius, t5, t6, t7, absoluteDelta, turnRate, projectile, highestCreep, shell, sporeCenter;
    this.operating = false;
    if (this.needsEnergy && this.active && this.status === "IDLE") {
      this.energyCounter = this.energyCounter + 1;
      center = this.getCenter$0();
      if (this.imageID === "analyzer" && this.energy > 0)
        if (this.weaponTargetPosition == null)
          for (i = 0; t1 = $.game, t2 = t1.emitters, i < t2.length; ++i) {
            t2 = t2[i].position;
            t3 = t2.x;
            t1 = t1.tileSize;
            if (typeof t3 !== "number")
              throw t3.$mul();
            t2 = t2.y;
            if (typeof t2 !== "number")
              throw t2.$mul();
            emitterCenter = new U.Vector(t3 * t1 + 24, t2 * t1 + 24);
            t1 = emitterCenter.x;
            t2 = center.x;
            if (typeof t1 !== "number")
              throw t1.$sub();
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t1 = Math.pow(t1 - t2, 2);
            t2 = emitterCenter.y;
            t3 = center.y;
            if (typeof t2 !== "number")
              throw t2.$sub();
            if (typeof t3 !== "number")
              throw H.iae(t3);
            t2 = Math.pow(t2 - t3, 2);
            t3 = this.weaponRadius;
            t4 = $.game.tileSize;
            if (t1 + t2 <= Math.pow(t3 * t4, 2)) {
              t1 = $.game.emitters;
              if (i >= t1.length)
                throw H.ioore(t1, i);
              t2 = t1[i];
              if (t2.building == null) {
                t2.building = this;
                if (i >= t1.length)
                  throw H.ioore(t1, i);
                this.weaponTargetPosition = t2.position;
                break;
              }
            }
          }
        else {
          if (this.energyCounter > 20) {
            this.energyCounter = 0;
            this.energy = this.energy - 1;
          }
          this.operating = true;
        }
      t1 = this.imageID;
      if (t1 === "terp" && this.energy > 0)
        if (this.weaponTargetPosition == null) {
          t1 = this.position.x;
          t2 = this.weaponRadius;
          if (typeof t1 !== "number")
            throw t1.$sub();
          i = t1 - t2;
          target = null;
          lowestTile = 10;
          while (true) {
            t1 = this.position;
            t2 = t1.x;
            t3 = this.weaponRadius;
            if (typeof t2 !== "number")
              throw t2.$add();
            if (!(i <= t2 + t3))
              break;
            t1 = t1.y;
            if (typeof t1 !== "number")
              throw t1.$sub();
            j = t1 - t3;
            while (true) {
              t1 = this.position.y;
              t2 = this.weaponRadius;
              if (typeof t1 !== "number")
                throw t1.$add();
              if (!(j <= t1 + t2))
                break;
              if ($.game.withinWorld$2(i, j)) {
                t1 = $.game.tileSize;
                t2 = center.x;
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
                t2 = $.game.tileSize;
                t3 = center.y;
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                t2 = Math.pow(j * t2 + t2 / 2 - t3, 2);
                t3 = $.game.world.tiles;
                if (i >>> 0 !== i || i >= t3.length)
                  throw H.ioore(t3, i);
                tileHeight = J.get$height$x(J.$index$asx(t3[i], j));
                t3 = this.weaponRadius;
                t4 = $.game.tileSize;
                if (t1 + t2 <= Math.pow(t3 * t4, 2)) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    throw H.ioore(t1, i);
                  if (J.$index$asx(t1[i], j).get$terraformTarget() > -1) {
                    if (typeof tileHeight !== "number")
                      throw tileHeight.$le();
                    if (typeof lowestTile !== "number")
                      throw H.iae(lowestTile);
                    t1 = tileHeight <= lowestTile;
                  } else
                    t1 = false;
                } else
                  t1 = false;
                if (t1) {
                  target = new U.Vector(i, j);
                  lowestTile = tileHeight;
                }
              }
              ++j;
            }
            ++i;
          }
          if (target != null)
            this.weaponTargetPosition = target;
        } else {
          if (this.energyCounter > 20) {
            this.energyCounter = 0;
            this.energy = this.energy - 1;
          }
          this.operating = true;
          t1 = $.game.world.tiles;
          t2 = this.weaponTargetPosition;
          t3 = t2.x;
          if (t3 >>> 0 !== t3 || t3 >= t1.length)
            throw H.ioore(t1, t3);
          terraformElement = J.$index$asx(t1[t3], t2.y);
          terraformElement.terraformProgress = terraformElement.get$terraformProgress() + 1;
          if (terraformElement.terraformProgress === 100) {
            terraformElement.terraformProgress = 0;
            t1 = $.game.world.tiles;
            t2 = this.weaponTargetPosition;
            t3 = t2.x;
            if (t3 >>> 0 !== t3 || t3 >= t1.length)
              throw H.ioore(t1, t3);
            height = J.get$height$x(J.$index$asx(t1[t3], t2.y));
            tilesToRedraw = P.List_List(null, null);
            t1 = terraformElement.terraformTarget;
            if (typeof height !== "number")
              throw height.$lt();
            t2 = this.weaponTargetPosition;
            t3 = $.game;
            if (height < t1) {
              t1 = t3.world.tiles;
              t3 = t2.x;
              if (t3 >>> 0 !== t3 || t3 >= t1.length)
                throw H.ioore(t1, t3);
              t2 = J.$index$asx(t1[t3], t2.y);
              t3 = J.getInterceptor$x(t2);
              t3.set$height(t2, J.$add$ns(t3.get$height(t2), 1));
              t2 = this.weaponTargetPosition;
              t3 = height + 1;
              tilesToRedraw.push(new U.Vector3(t2.x, t2.y, t3));
              t2 = this.weaponTargetPosition;
              t1 = t2.x;
              if (typeof t1 !== "number")
                throw t1.$sub();
              tilesToRedraw.push(new U.Vector3(t1 - 1, t2.y, t3));
              t2 = this.weaponTargetPosition;
              t1 = t2.x;
              t2 = t2.y;
              if (typeof t2 !== "number")
                throw t2.$sub();
              tilesToRedraw.push(new U.Vector3(t1, t2 - 1, t3));
              t2 = this.weaponTargetPosition;
              t1 = t2.x;
              if (typeof t1 !== "number")
                throw t1.$add();
              tilesToRedraw.push(new U.Vector3(t1 + 1, t2.y, t3));
              t2 = this.weaponTargetPosition;
              t1 = t2.x;
              t2 = t2.y;
              if (typeof t2 !== "number")
                throw t2.$add();
              tilesToRedraw.push(new U.Vector3(t1, t2 + 1, t3));
            } else {
              t1 = t3.world.tiles;
              t3 = t2.x;
              if (t3 >>> 0 !== t3 || t3 >= t1.length)
                throw H.ioore(t1, t3);
              t2 = J.$index$asx(t1[t3], t2.y);
              t3 = J.getInterceptor$x(t2);
              t1 = t3.get$height(t2);
              if (typeof t1 !== "number")
                throw t1.$sub();
              t3.set$height(t2, t1 - 1);
              t1 = this.weaponTargetPosition;
              tilesToRedraw.push(new U.Vector3(t1.x, t1.y, height));
              t1 = this.weaponTargetPosition;
              t2 = t1.x;
              if (typeof t2 !== "number")
                throw t2.$sub();
              tilesToRedraw.push(new U.Vector3(t2 - 1, t1.y, height));
              t1 = this.weaponTargetPosition;
              t2 = t1.x;
              t1 = t1.y;
              if (typeof t1 !== "number")
                throw t1.$sub();
              tilesToRedraw.push(new U.Vector3(t2, t1 - 1, height));
              t1 = this.weaponTargetPosition;
              t2 = t1.x;
              if (typeof t2 !== "number")
                throw t2.$add();
              tilesToRedraw.push(new U.Vector3(t2 + 1, t1.y, height));
              t1 = this.weaponTargetPosition;
              t2 = t1.x;
              t1 = t1.y;
              if (typeof t1 !== "number")
                throw t1.$add();
              tilesToRedraw.push(new U.Vector3(t2, t1 + 1, height));
            }
            $.game.redrawTiles$1(tilesToRedraw);
            t1 = $.game.world.tiles;
            t2 = this.weaponTargetPosition;
            t3 = t2.x;
            if (t3 >>> 0 !== t3 || t3 >= t1.length)
              throw H.ioore(t1, t3);
            if (J.$eq(J.get$height$x(J.$index$asx(t1[t3], t2.y)), terraformElement.terraformTarget)) {
              t1 = $.game.world.tiles;
              t2 = this.weaponTargetPosition;
              t3 = t2.x;
              if (t3 >>> 0 !== t3 || t3 >= t1.length)
                throw H.ioore(t1, t3);
              J.$index$asx(t1[t3], t2.y).set$terraformProgress(0);
              t2 = $.game.world.tiles;
              t3 = this.weaponTargetPosition;
              t1 = t3.x;
              if (t1 >>> 0 !== t1 || t1 >= t2.length)
                throw H.ioore(t2, t1);
              J.$index$asx(t2[t1], t3.y).set$terraformTarget(-1);
            }
            this.weaponTargetPosition = null;
            this.operating = false;
          }
        }
      else if (t1 === "shield" && this.energy > 0) {
        if (this.energyCounter > 20) {
          this.energyCounter = 0;
          this.energy = this.energy - 1;
        }
        this.operating = true;
      } else if (t1 === "cannon" && this.energy > 0 && this.energyCounter > 10)
        if (!this.rotating) {
          this.energyCounter = 0;
          t1 = $.game.world.tiles;
          t2 = this.position;
          t3 = t2.x;
          if (t3 >>> 0 !== t3 || t3 >= t1.length)
            throw H.ioore(t1, t3);
          height = J.get$height$x(J.$index$asx(t1[t3], t2.y));
          targets = P.List_List(null, null);
          for (r = 0; t1 = this.weaponRadius, r < t1 + 1; ++r) {
            radius = r * $.game.tileSize;
            t2 = this.position.x;
            if (typeof t2 !== "number")
              throw t2.$sub();
            i = t2 - t1;
            while (true) {
              t1 = this.position;
              t2 = t1.x;
              t3 = this.weaponRadius;
              if (typeof t2 !== "number")
                throw t2.$add();
              if (!(i <= t2 + t3))
                break;
              t1 = t1.y;
              if (typeof t1 !== "number")
                throw t1.$sub();
              j = t1 - t3;
              while (true) {
                t1 = this.position.y;
                t2 = this.weaponRadius;
                if (typeof t1 !== "number")
                  throw t1.$add();
                if (!(j <= t1 + t2))
                  break;
                if ($.game.withinWorld$2(i, j)) {
                  t1 = $.game.world.tiles;
                  if (i >>> 0 !== i || i >= t1.length)
                    throw H.ioore(t1, i);
                  tileHeight = J.get$height$x(J.$index$asx(t1[i], j));
                  if (typeof tileHeight !== "number")
                    throw tileHeight.$le();
                  if (typeof height !== "number")
                    throw H.iae(height);
                  if (tileHeight <= height) {
                    t1 = $.game.tileSize;
                    t2 = center.x;
                    if (typeof t2 !== "number")
                      throw H.iae(t2);
                    t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
                    t2 = $.game.tileSize;
                    t3 = center.y;
                    if (typeof t3 !== "number")
                      throw H.iae(t3);
                    t2 = Math.pow(j * t2 + t2 / 2 - t3, 2);
                    if (t1 + t2 <= Math.pow(radius, 2)) {
                      t1 = $.game.world.tiles;
                      if (i >= t1.length)
                        throw H.ioore(t1, i);
                      t1 = J.$index$asx(t1[i], j).get$creep() > 0;
                    } else
                      t1 = false;
                    if (t1)
                      targets.push(new U.Vector(i, j));
                  }
                }
                ++j;
              }
              ++i;
            }
            if (targets.length > 0)
              break;
          }
          if (targets.length > 0) {
            H.IterableMixinWorkaround_shuffleList(targets, null);
            if (0 >= targets.length)
              throw H.ioore(targets, 0);
            t1 = targets[0];
            t2 = J.getInterceptor$x(t1);
            t3 = t2.get$x(t1);
            t4 = $.game.tileSize;
            if (typeof t3 !== "number")
              throw t3.$mul();
            t5 = t4 / 2;
            t6 = center.x;
            if (typeof t6 !== "number")
              throw H.iae(t6);
            t1 = t2.get$y(t1);
            if (typeof t1 !== "number")
              throw t1.$mul();
            t2 = center.y;
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t7 = $.engine;
            t1 = Math.atan2(t1 * t4 + t5 - t2, t3 * t4 + t5 - t6);
            t7.toString;
            this.targetAngle = C.JSNumber_methods.toInt$0(Math.floor(t1 * 57.29577951308232));
            if (0 >= targets.length)
              throw H.ioore(targets, 0);
            t1 = targets[0];
            t7 = J.getInterceptor$x(t1);
            this.weaponTargetPosition = new U.Vector(t7.get$x(t1), t7.get$y(t1));
            this.rotating = true;
          }
        } else {
          t1 = this.angle;
          t2 = this.targetAngle;
          if (t1 !== t2) {
            if (typeof t2 !== "number")
              throw t2.$sub();
            absoluteDelta = Math.abs(t2 - t1);
            turnRate = absoluteDelta < 5 ? absoluteDelta : 5;
            if (absoluteDelta <= 180) {
              t1 = this.targetAngle;
              t2 = this.angle;
              if (typeof t1 !== "number")
                throw t1.$lt();
              if (t1 < t2)
                this.angle = t2 - turnRate;
              else
                this.angle = t2 + turnRate;
            } else {
              t1 = this.targetAngle;
              t2 = this.angle;
              if (typeof t1 !== "number")
                throw t1.$lt();
              if (t1 < t2)
                this.angle = t2 + turnRate;
              else
                this.angle = t2 - turnRate;
            }
            t1 = this.angle;
            if (t1 > 180)
              this.angle = t1 - 360;
            t1 = this.angle;
            if (t1 < -180)
              this.angle = t1 + 360;
          } else {
            this.rotating = false;
            this.energy = this.energy - 1;
            this.operating = true;
            t1 = this.weaponTargetPosition;
            t2 = t1.x;
            t3 = $.game;
            t4 = t3.tileSize;
            if (typeof t2 !== "number")
              throw t2.$mul();
            t5 = t4 / 2;
            t1 = t1.y;
            if (typeof t1 !== "number")
              throw t1.$mul();
            projectile = new U.Projectile(center, new U.Vector(t2 * t4 + t5, t1 * t4 + t5), new U.Vector(0, 0), null, false, this.targetAngle);
            projectile.imageID = "projectile";
            t3.projectiles.push(projectile);
            $.engine.playSound$2("laser", this.position);
          }
        }
      else if (t1 === "mortar" && this.energy > 0 && this.energyCounter > 200) {
        this.energyCounter = 0;
        t1 = this.position.x;
        t2 = this.weaponRadius;
        if (typeof t1 !== "number")
          throw t1.$sub();
        i = t1 - t2;
        target = null;
        highestCreep = 0;
        while (true) {
          t1 = this.position;
          t2 = t1.x;
          t3 = this.weaponRadius;
          if (typeof t2 !== "number")
            throw t2.$add();
          if (!(i <= t2 + t3))
            break;
          t1 = t1.y;
          if (typeof t1 !== "number")
            throw t1.$sub();
          j = t1 - t3;
          while (true) {
            t1 = this.position.y;
            t2 = this.weaponRadius;
            if (typeof t1 !== "number")
              throw t1.$add();
            if (!(j <= t1 + t2))
              break;
            if ($.game.withinWorld$2(i, j)) {
              t1 = $.game.tileSize;
              t2 = center.x;
              if (typeof t2 !== "number")
                throw H.iae(t2);
              t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
              t2 = $.game.tileSize;
              t3 = center.y;
              if (typeof t3 !== "number")
                throw H.iae(t3);
              t2 = Math.pow(j * t2 + t2 / 2 - t3, 2);
              t3 = this.weaponRadius;
              t4 = $.game.tileSize;
              if (t1 + t2 <= Math.pow(t3 * t4, 2)) {
                t1 = $.game.world.tiles;
                if (i >>> 0 !== i || i >= t1.length)
                  throw H.ioore(t1, i);
                if (J.$index$asx(t1[i], j).get$creep() > 0) {
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    throw H.ioore(t1, i);
                  t1 = J.$index$asx(t1[i], j).get$creep() >= highestCreep;
                } else
                  t1 = false;
              } else
                t1 = false;
              if (t1) {
                t1 = $.game.world.tiles;
                if (i >>> 0 !== i || i >= t1.length)
                  throw H.ioore(t1, i);
                highestCreep = J.$index$asx(t1[i], j).get$creep();
                target = new U.Vector(i, j);
              }
            }
            ++j;
          }
          ++i;
        }
        if (target != null) {
          $.engine.playSound$2("shot", t1);
          t1 = target.x;
          t2 = $.game.tileSize;
          if (typeof t1 !== "number")
            throw t1.$mul();
          t3 = t2 / 2;
          t4 = target.y;
          if (typeof t4 !== "number")
            throw t4.$mul();
          shell = new U.Shell(center, new U.Vector(t1 * t2 + t3, t4 * t2 + t3), new U.Vector(0, 0), null, false, 0, 0);
          shell.imageID = "shell";
          shell.init$0();
          $.game.shells.push(shell);
          this.energy = this.energy - 1;
        }
      } else if (t1 === "beam" && this.energy > 0 && this.energyCounter > 0) {
        this.energyCounter = 0;
        for (i = 0; t1 = $.game.spores, i < t1.length; ++i) {
          t1 = t1[i].position;
          t2 = t1.x;
          if (typeof t2 !== "number")
            throw t2.$sub();
          t1 = t1.y;
          if (typeof t1 !== "number")
            throw t1.$sub();
          sporeCenter = new U.Vector(t2 - 16, t1 - 16);
          t1 = sporeCenter.x;
          t2 = center.x;
          if (typeof t1 !== "number")
            throw t1.$sub();
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t1 = Math.pow(t1 - t2, 2);
          t2 = sporeCenter.y;
          t3 = center.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t2 = Math.pow(t2 - t3, 2);
          t3 = this.weaponRadius;
          t4 = $.game.tileSize;
          if (t1 + t2 <= Math.pow(t3 * t4, 2)) {
            this.weaponTargetPosition = sporeCenter;
            this.energy = this.energy - 0.1;
            this.operating = true;
            t1 = $.game;
            t2 = t1.spores;
            if (i >= t2.length)
              throw H.ioore(t2, i);
            t3 = t2[i];
            t3.health = t3.health - 2;
            if (i >= t2.length)
              throw H.ioore(t2, i);
            if (t3.health <= 0) {
              t3.remove = true;
              t4 = $.engine;
              if (i >= t2.length)
                throw H.ioore(t2, i);
              t3 = t3.position;
              t2 = t3.x;
              t1 = t1.tileSize;
              if (typeof t2 !== "number")
                throw t2.$tdiv();
              t2 = C.JSNumber_methods.$tdiv(t2, t1);
              t3 = t3.y;
              if (typeof t3 !== "number")
                throw t3.$tdiv();
              t4.playSound$2("explosion", new U.Vector(t2, C.JSNumber_methods.$tdiv(t3, t1)));
              t1 = $.game.explosions;
              t3 = new U.Explosion(null, null, null);
              t3.position = new U.Vector(sporeCenter.x, sporeCenter.y);
              t3.frame = 0;
              t3.imageID = "explosion";
              $.Explosion_counter = 0;
              t1.push(t3);
            }
          }
        }
      }
    }
  },
  drawBox$0: function() {
    var t1, context, realPosition, t2, t3, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.hovered || this.selected) {
      realPosition = this.position.tiled2screen$0();
      t1 = $.game.zoom;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      J.set$lineWidth$x(context, 2 * t1);
      context.strokeStyle = "#000";
      t1 = realPosition.x;
      t2 = realPosition.y;
      t3 = $.game;
      t4 = t3.tileSize;
      t5 = this.size;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t3 = t4 * t5 * t3;
      context.strokeRect(t1, t2, t3, t3);
    }
  },
  drawMovementIndicators$0: function() {
    var t1, context, center, target, t2, t3, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.status !== "IDLE") {
      center = this.getCenter$0().real2screen$0();
      target = this.moveTargetPosition.tiled2screen$0();
      J.set$strokeStyle$x(context, "rgba(0,255,0,0.5)");
      t1 = target.x;
      t2 = target.y;
      t3 = this.size;
      t4 = $.game;
      t5 = t4.tileSize;
      t4 = t4.zoom;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      t4 = t3 * t5 * t4;
      context.strokeRect(t1, t2, t4, t4);
      context.strokeStyle = "rgba(255,255,255,0.5)";
      context.beginPath();
      context.moveTo(center.x, center.y);
      t4 = target.x;
      t2 = $.game;
      t1 = t2.tileSize;
      t5 = this.size;
      t2 = t2.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = t1 / 2 * t5 * t2;
      if (typeof t4 !== "number")
        throw t4.$add();
      t5 = target.y;
      if (typeof t5 !== "number")
        throw t5.$add();
      context.lineTo(t4 + t2, t5 + t2);
      context.stroke();
    }
  },
  drawRepositionInfo$0: function() {
    var t1, context, positionScrolled, drawPosition, t2, t3, t4, drawPositionCenter, center, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    if (this.built && this.selected && this.canMove) {
      t1 = $.engine.canvas;
      J.set$cursor$x(t1.$index(t1, "main").get$element().style, "none");
      positionScrolled = $.game.getHoveredTilePosition$0();
      drawPosition = positionScrolled.tiled2screen$0();
      t1 = positionScrolled.x;
      t2 = $.game.tileSize;
      if (typeof t1 !== "number")
        throw t1.$mul();
      t3 = t2 / 2 * this.size;
      t4 = positionScrolled.y;
      if (typeof t4 !== "number")
        throw t4.$mul();
      drawPositionCenter = new U.Vector(t1 * t2 + t3, t4 * t2 + t3).real2screen$0();
      center = this.getCenter$0().real2screen$0();
      $.game.drawRangeBoxes$4(positionScrolled, this.imageID, this.weaponRadius, this.size);
      t1 = J.getInterceptor$x(context);
      if ($.game.canBePlaced$3(positionScrolled, this.size, this))
        t1.set$strokeStyle(context, "rgba(0,255,0,0.5)");
      else
        t1.set$strokeStyle(context, "rgba(255,0,0,0.5)");
      t1 = drawPosition.x;
      t2 = drawPosition.y;
      t3 = $.game;
      t4 = t3.tileSize;
      t5 = this.size;
      t3 = t3.zoom;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t3 = t4 * t5 * t3;
      J.strokeRect$4$x(context, t1, t2, t3, t3);
      context.strokeStyle = "rgba(255,255,255,0.5)";
      context.beginPath();
      context.moveTo(center.x, center.y);
      context.lineTo(drawPositionCenter.x, drawPositionCenter.y);
      context.stroke();
    }
  },
  draw$0: function() {
    var t1, context, realPosition, center, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, targetPosition;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.tiled2screen$0();
    center = this.getCenter$0().real2screen$0();
    t1 = $.engine;
    t2 = t1.images;
    t2 = J.get$width$x(t2.$index(t2, this.imageID));
    t3 = $.game.zoom;
    if (typeof t2 !== "number")
      throw t2.$mul();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = $.engine.images;
    t4 = J.get$height$x(t4.$index(t4, this.imageID));
    t5 = $.game.zoom;
    if (typeof t4 !== "number")
      throw t4.$mul();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    if (t1.isVisible$2(realPosition, new U.Vector(t2 * t3, t4 * t5))) {
      t1 = J.getInterceptor$x(context);
      if (!this.built) {
        t1.save$0(context);
        context.globalAlpha = 0.5;
        t1 = $.engine.images;
        t1 = t1.$index(t1, this.imageID);
        t2 = realPosition.x;
        t3 = realPosition.y;
        t4 = $.engine.images;
        t4 = J.get$width$x(t4.$index(t4, this.imageID));
        t5 = $.game.zoom;
        if (typeof t4 !== "number")
          throw t4.$mul();
        if (typeof t5 !== "number")
          throw H.iae(t5);
        t6 = $.engine.images;
        t6 = J.get$height$x(t6.$index(t6, this.imageID));
        t7 = $.game.zoom;
        if (typeof t6 !== "number")
          throw t6.$mul();
        if (typeof t7 !== "number")
          throw H.iae(t7);
        context.drawImage(t1, t2, t3, t4 * t5, t6 * t7);
        if (this.imageID === "cannon") {
          t1 = $.engine.images;
          t1 = t1.$index(t1, "cannongun");
          t2 = realPosition.x;
          t3 = realPosition.y;
          t4 = $.engine.images;
          t4 = J.get$width$x(t4.$index(t4, this.imageID));
          t5 = $.game.zoom;
          if (typeof t4 !== "number")
            throw t4.$mul();
          if (typeof t5 !== "number")
            throw H.iae(t5);
          t6 = $.engine.images;
          t6 = J.get$height$x(t6.$index(t6, this.imageID));
          t7 = $.game.zoom;
          if (typeof t6 !== "number")
            throw t6.$mul();
          if (typeof t7 !== "number")
            throw H.iae(t7);
          context.drawImage(t1, t2, t3, t4 * t5, t6 * t7);
        }
        context.restore();
      } else {
        t2 = $.engine.images;
        t2 = t2.$index(t2, this.imageID);
        t3 = realPosition.x;
        t4 = this.size * 8;
        if (typeof t3 !== "number")
          throw t3.$add();
        t5 = t4 * this.scale;
        t6 = realPosition.y;
        if (typeof t6 !== "number")
          throw t6.$add();
        t7 = $.engine.images;
        t7 = J.get$width$x(t7.$index(t7, this.imageID));
        t8 = $.game.zoom;
        if (typeof t7 !== "number")
          throw t7.$mul();
        if (typeof t8 !== "number")
          throw H.iae(t8);
        t9 = this.scale;
        t10 = $.engine.images;
        t10 = J.get$height$x(t10.$index(t10, this.imageID));
        t11 = $.game.zoom;
        if (typeof t10 !== "number")
          throw t10.$mul();
        if (typeof t11 !== "number")
          throw H.iae(t11);
        t1.drawImageScaled$5(context, t2, t3 + t4 - t5, t6 + t4 - t5, t7 * t8 * t9, t10 * t11 * this.scale);
        if (this.imageID === "cannon") {
          context.save();
          t1 = realPosition.x;
          t2 = $.game.zoom;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t2 = 24 * t2;
          if (typeof t1 !== "number")
            throw t1.$add();
          t3 = realPosition.y;
          if (typeof t3 !== "number")
            throw t3.$add();
          context.translate(t1 + t2, t3 + t2);
          t2 = $.engine;
          t3 = this.angle;
          t2.toString;
          context.rotate(t3 * 0.017453292519943295);
          t3 = $.engine.images;
          t3 = t3.$index(t3, "cannongun");
          t2 = $.game.zoom;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t1 = this.scale;
          t4 = -24 * t2 * t1;
          t1 = 48 * t2 * t1;
          context.drawImage(t3, t4, t4, t1, t1);
          context.restore();
        }
      }
      if (this.needsEnergy) {
        J.set$fillStyle$x(context, "#f00");
        t1 = realPosition.x;
        if (typeof t1 !== "number")
          throw t1.$add();
        t2 = realPosition.y;
        if (typeof t2 !== "number")
          throw t2.$add();
        t3 = $.game.zoom;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        context.fillRect(t1 + 2, t2 + 1, 44 * t3 / this.maxEnergy * this.energy, 3);
      }
      if (this.health < this.maxHealth) {
        J.set$fillStyle$x(context, "#0f0");
        t1 = realPosition.x;
        if (typeof t1 !== "number")
          throw t1.$add();
        t2 = realPosition.y;
        t3 = $.game;
        t4 = t3.tileSize;
        t3 = t3.zoom;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t3 = t4 * t3 * this.size;
        if (typeof t2 !== "number")
          throw t2.$add();
        context.fillRect(t1 + 2, t2 + t3 - 3, (t3 - 8) / this.maxHealth * this.health, 3);
      }
      if (!this.active) {
        J.set$strokeStyle$x(context, "#F00");
        context.lineWidth = 2;
        context.beginPath();
        context.arc(center.x, center.y, $.game.tileSize / 2 * this.size, 0, 6.283185307179586, true);
        context.closePath();
        context.stroke();
        context.beginPath();
        t1 = realPosition.x;
        t2 = realPosition.y;
        t3 = $.game.tileSize;
        t4 = this.size;
        if (typeof t2 !== "number")
          throw t2.$add();
        context.moveTo(t1, t2 + t3 * t4);
        t4 = realPosition.x;
        t3 = $.game.tileSize;
        t2 = this.size;
        if (typeof t4 !== "number")
          throw t4.$add();
        context.lineTo(t4 + t3 * t2, realPosition.y);
        context.stroke();
      }
    }
    if (this.operating) {
      t1 = this.imageID;
      if (t1 === "analyzer") {
        targetPosition = this.weaponTargetPosition.tiled2screen$0();
        J.set$strokeStyle$x(context, "#00f");
        context.lineWidth = 4;
        context.beginPath();
        context.moveTo(center.x, center.y);
        context.lineTo(targetPosition.x, targetPosition.y);
        context.stroke();
        context.strokeStyle = "#fff";
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(center.x, center.y);
        context.lineTo(targetPosition.x, targetPosition.y);
        context.stroke();
      } else if (t1 === "beam") {
        targetPosition = this.weaponTargetPosition.real2screen$0();
        J.set$strokeStyle$x(context, "#f00");
        context.lineWidth = 4;
        context.beginPath();
        context.moveTo(center.x, center.y);
        context.lineTo(targetPosition.x, targetPosition.y);
        context.stroke();
        context.strokeStyle = "#fff";
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(center.x, center.y);
        context.lineTo(targetPosition.x, targetPosition.y);
        context.stroke();
      } else if (t1 === "shield") {
        t1 = $.engine.images;
        t1 = t1.$index(t1, "forcefield");
        t2 = center.x;
        t3 = $.game.zoom;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = 168 * t3;
        if (typeof t2 !== "number")
          throw t2.$sub();
        t5 = center.y;
        if (typeof t5 !== "number")
          throw t5.$sub();
        t3 = 336 * t3;
        J.drawImageScaled$5$x(context, t1, t2 - t4, t5 - t4, t3, t3);
      } else if (t1 === "terp") {
        targetPosition = this.weaponTargetPosition.tiled2screen$0();
        J.set$strokeStyle$x(context, "#f00");
        context.lineWidth = 4;
        context.beginPath();
        context.moveTo(center.x, center.y);
        t1 = targetPosition.x;
        if (typeof t1 !== "number")
          throw t1.$add();
        t2 = targetPosition.y;
        if (typeof t2 !== "number")
          throw t2.$add();
        context.lineTo(t1 + 8, t2 + 8);
        context.stroke();
        context.strokeStyle = "#fff";
        context.lineWidth = 2;
        context.beginPath();
        context.moveTo(center.x, center.y);
        t2 = targetPosition.x;
        if (typeof t2 !== "number")
          throw t2.$add();
        t1 = targetPosition.y;
        if (typeof t1 !== "number")
          throw t1.$add();
        context.lineTo(t2 + 8, t1 + 8);
        context.stroke();
      }
    }
  },
  static: {
"": "Building_baseSpeed,Building_damageCounter",
}

},

World: {"": "Object;tiles,size>",
  World$1: function(seed) {
    this.size = new U.Vector($.engine.randomInt$3(64, 127, seed), $.engine.randomInt$3(64, 127, seed));
  },
  static: {
World$: function(seed) {
  var t1 = new U.World(null, null);
  t1.World$1(seed);
  return t1;
}}

},

Emitter: {"": "Object;position>,imageID<,strength,building",
  getCenter$0: function() {
    var t1, t2, t3;
    t1 = this.position;
    t2 = t1.x;
    t3 = $.game.tileSize;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    return new U.Vector(t2 * t3 + 24, t1 * t3 + 24);
  },
  spawn$0: function() {
    var t1, t2, t3;
    if (this.building == null) {
      t1 = $.game.world.tiles;
      t2 = this.position;
      t3 = t2.x;
      if (typeof t3 !== "number")
        throw t3.$add();
      ++t3;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw H.ioore(t1, t3);
      t3 = t1[t3];
      t2 = t2.y;
      if (typeof t2 !== "number")
        throw t2.$add();
      t2 = J.$index$asx(t3, t2 + 1);
      t2.creep = t2.get$creep() + this.strength;
    }
  },
  draw$0: function() {
    var realPosition, t1, t2, t3, t4, t5;
    realPosition = this.position.tiled2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 48 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = realPosition.x;
      t4 = realPosition.y;
      t5 = $.game.zoom;
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t5 = 48 * t5;
      J.drawImageScaled$5$x(t1, t2, t3, t4, t5, t5);
    }
  },
  static: {
"": "Emitter_counter",
}

},

Sporetower: {"": "Object;position>,imageID<,sporeCounter",
  getCenter$0: function() {
    var t1, t2, t3;
    t1 = this.position;
    t2 = t1.x;
    t3 = $.game.tileSize;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    return new U.Vector(t2 * t3 + 24, t1 * t3 + 24);
  },
  spawn$0: function() {
    var t1, t2, t3, max, target, spore;
    do {
      t1 = $.game.buildings;
      t2 = $.engine;
      t3 = t1.length;
      t2.toString;
      max = t3 - 1 - 0 + 1;
      if (max > 4294967295)
        max = 4294967295;
      t2 = (Math.random() * max >>> 0) + 0;
      if (t2 < 0 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      target = t1[t2];
    } while (!target.get$built());
    spore = new U.Spore(this.getCenter$0(), target.getCenter$0(), new U.Vector(0, 0), null, false, 100, 0, 0);
    spore.imageID = "spore";
    spore.init$0();
    $.game.spores.push(spore);
  },
  draw$0: function() {
    var realPosition, t1, t2, t3, t4, t5;
    realPosition = this.position.tiled2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 48 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = realPosition.x;
      t4 = realPosition.y;
      t5 = $.game.zoom;
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t5 = 48 * t5;
      J.drawImageScaled$5$x(t1, t2, t3, t4, t5, t5);
    }
  }
},

Smoke: {"": "Object;position>,frame,imageID<",
  draw$0: function() {
    var realPosition, t1, t2, t3, t4, t5, t6, t7, t8;
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 48 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = this.frame;
      t4 = C.JSInt_methods.$mod(t3, 8);
      t3 = C.JSNumber_methods.toInt$0(Math.floor(t3 / 8));
      t5 = realPosition.x;
      t6 = $.game.zoom;
      if (typeof t6 !== "number")
        throw H.iae(t6);
      t7 = 24 * t6;
      if (typeof t5 !== "number")
        throw t5.$sub();
      t8 = realPosition.y;
      if (typeof t8 !== "number")
        throw t8.$sub();
      t6 = 48 * t6;
      J.drawImageScaledFromSource$9$x(t1, t2, t4 * 128, t3 * 128, 128, 128, t5 - t7, t8 - t7, t6, t6);
    }
  },
  Smoke$1: function(position) {
    this.position = new U.Vector(position.x, position.y);
    this.frame = 0;
    this.imageID = "smoke";
  },
  static: {
"": "Smoke_counter",
Smoke$: function(position) {
  var t1 = new U.Smoke(null, null, null);
  t1.Smoke$1(position);
  return t1;
}}

},

Explosion: {"": "Object;position>,frame,imageID<",
  draw$0: function() {
    var realPosition, t1, t2, t3, t4, t5, t6, t7, t8;
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 64 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "buffer").get$context();
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t3 = this.frame;
      t4 = C.JSInt_methods.$mod(t3, 8);
      t3 = C.JSNumber_methods.toInt$0(Math.floor(t3 / 8));
      t5 = realPosition.x;
      t6 = $.game.zoom;
      if (typeof t6 !== "number")
        throw H.iae(t6);
      t7 = 32 * t6;
      if (typeof t5 !== "number")
        throw t5.$sub();
      t8 = realPosition.y;
      if (typeof t8 !== "number")
        throw t8.$sub();
      t6 = 64 * t6;
      J.drawImageScaledFromSource$9$x(t1, t2, t4 * 64, t3 * 64, 64, 64, t5 - t7, t8 - t7, t6, t6);
    }
  },
  Explosion$1: function(position) {
    this.position = new U.Vector(position.x, position.y);
    this.frame = 0;
    this.imageID = "explosion";
    $.Explosion_counter = 0;
  },
  static: {
"": "Explosion_counter",
Explosion$: function(position) {
  var t1 = new U.Explosion(null, null, null);
  t1.Explosion$1(position);
  return t1;
}}

},

Tile: {"": "Object;creep@,newcreep@,collector@,height*,index*,terraformTarget@,terraformProgress@",
  Tile$0: function() {
    this.index = -1;
    this.creep = 0;
    this.newcreep = 0;
    this.collector = null;
    this.terraformTarget = -1;
    this.terraformProgress = 0;
  },
  static: {
Tile$: function() {
  var t1 = new U.Tile(null, null, null, null, null, null, null);
  t1.Tile$0();
  return t1;
}}

},

Vector: {"": "Object;x>,y>",
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return new U.Vector(t1 + t3, t4 + t2);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.y;
      t2 = t2.get$y(other);
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  distanceTo$1: function(other) {
    var t1, t2, t3;
    t1 = this.x;
    t2 = other.x;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1 = Math.pow(t1 - t2, 2);
    t2 = this.y;
    t3 = other.y;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t2 = Math.pow(t2 - t3, 2);
    return Math.sqrt(t1 + t2);
  },
  tiled2screen$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = $.engine;
    t2 = t1.halfWidth;
    t3 = this.x;
    t4 = $.game;
    t5 = t4.scroll;
    t6 = t5.x;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t6 !== "number")
      throw H.iae(t6);
    t7 = t4.tileSize;
    t4 = t4.zoom;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (typeof t2 !== "number")
      throw t2.$add();
    t1 = t1.halfHeight;
    t8 = this.y;
    t5 = t5.y;
    if (typeof t8 !== "number")
      throw t8.$sub();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    if (typeof t1 !== "number")
      throw t1.$add();
    return new U.Vector(t2 + (t3 - t6) * t7 * t4, t1 + (t8 - t5) * t7 * t4);
  },
  real2screen$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = $.engine;
    t2 = t1.halfWidth;
    t3 = this.x;
    t4 = $.game;
    t5 = t4.scroll;
    t6 = t5.x;
    t7 = t4.tileSize;
    if (typeof t6 !== "number")
      throw t6.$mul();
    if (typeof t3 !== "number")
      throw t3.$sub();
    t4 = t4.zoom;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (typeof t2 !== "number")
      throw t2.$add();
    t1 = t1.halfHeight;
    t8 = this.y;
    t5 = t5.y;
    if (typeof t5 !== "number")
      throw t5.$mul();
    if (typeof t8 !== "number")
      throw t8.$sub();
    if (typeof t1 !== "number")
      throw t1.$add();
    return new U.Vector(t2 + (t3 - t6 * t7) * t4, t1 + (t8 - t5 * t7) * t4);
  },
  real2tiled$0: function() {
    var t1, t2, t3;
    t1 = this.x;
    t2 = $.game.tileSize;
    if (typeof t1 !== "number")
      throw t1.$tdiv();
    t1 = C.JSNumber_methods.$tdiv(t1, t2);
    t3 = this.y;
    if (typeof t3 !== "number")
      throw t3.$tdiv();
    return new U.Vector(t1, C.JSNumber_methods.$tdiv(t3, t2));
  }
},

Vector3: {"": "Object;x>,y>,z>",
  $add: function(_, other) {
    var t1, t2, t3, t4, t5;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t5 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    t2 = t2.get$z(other);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    return new U.Vector3(t1 + t3, t4 + t5, this.z + t2);
  }
},

Route: {"": "Object;distanceTravelled<,distanceRemaining,nodes>,remove",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  clone$0: function(_) {
    var t1, route, t2, i;
    t1 = P.List_List(null, U.Building);
    H.setRuntimeTypeInfo(t1, [U.Building]);
    route = new U.Route(0, 0, t1, false);
    route.distanceTravelled = this.distanceTravelled;
    route.distanceRemaining = this.distanceRemaining;
    for (t1 = this.nodes, t2 = route.nodes, i = 0; i < t1.length; ++i)
      t2.push(t1[i]);
    return route;
  },
  contains$1: function(_, node) {
    var t1, t2, i, t3;
    for (t1 = this.nodes, t2 = J.getInterceptor$x(node), i = 0; i < t1.length; ++i) {
      t3 = t2.get$position(node);
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t3, J.get$position$x(t1[i])))
        return true;
    }
    return false;
  }
},

Canvas: {"": "Object;element<,context<,top',left',bottom',right'",
  clear$0: function(_) {
    var t1, t2;
    t1 = this.element;
    t2 = J.getInterceptor$x(t1);
    J.clearRect$4$x(this.context, 0, 0, t2.get$width(t1), t2.get$height(t1));
  },
  updateRect$2: function(width, height) {
    var t1, t2, t3;
    t1 = this.element;
    t2 = J.getInterceptor$x(t1);
    t2.set$width(t1, width);
    t2.set$height(t1, height);
    t2 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t2, [null]);
    this.top = t2.top;
    t2 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t2, [null]);
    this.left = t2.left;
    t2 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t2, [null]);
    t2 = t2.top;
    t3 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t3, [null]);
    t3 = t3.height;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    this.bottom = t2 + t3;
    t3 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t3, [null]);
    t3 = t3.left;
    t1 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    t1 = t1.width;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this.right = t3 + t1;
  },
  Canvas$3: function(element, width, height) {
    var t1;
    this.updateRect$2(width, height);
    t1 = this.element;
    J.set$position$x(t1.style, "absolute");
    this.context = J.getContext$1$x(t1, "2d");
  },
  static: {
Canvas$: function(element, width, height) {
  var t1 = new U.Canvas(element, null, null, null, null, null);
  t1.Canvas$3(element, width, height);
  return t1;
}}

},

Mouse: {"": "Object;x>,y>,active,dragStart,dragEnd"},

Engine: {"": "Object;FPS,delta,fps_delta,fps_frames,fps_totalTime,fps_updateTime,fps_updateFrames,animationRequest,width>,height*,halfWidth,halfHeight,fps_lastTime,mouse,mouseGUI,canvas,sounds,images,resizeTimer",
  init$0: function() {
    var t1, t2, t3, i, e, t4;
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    t1 = this.width;
    if (typeof t1 !== "number")
      throw t1.$div();
    this.halfWidth = C.JSNumber_methods.toInt$0(Math.floor(t1 / 2));
    t1 = this.height;
    if (typeof t1 !== "number")
      throw t1.$div();
    this.halfHeight = C.JSNumber_methods.toInt$0(Math.floor(t1 / 2));
    t1 = this.canvas;
    t1.$indexSet(t1, "main", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t1 = J.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "main").get$element());
    t2 = this.canvas;
    t2 = t2.$index(t2, "main");
    t1 = this.canvas;
    J.set$top$x(t2, t1.$index(t1, "main").get$element().offsetTop);
    t1 = this.canvas;
    t1 = t1.$index(t1, "main");
    t2 = this.canvas;
    J.set$left$x(t1, t2.$index(t2, "main").get$element().offsetLeft);
    t2 = this.canvas;
    t2 = t2.$index(t2, "main");
    t1 = this.canvas;
    t1 = t1.$index(t1, "main").get$element();
    t1 = new P.Rectangle(t1.offsetLeft, t1.offsetTop, t1.offsetWidth, t1.offsetHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    t3 = t1.left;
    t1 = t1.width;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    J.set$right$x(t2, t3 + t1);
    t1 = this.canvas;
    t1 = t1.$index(t1, "main");
    t3 = this.canvas;
    t3 = t3.$index(t3, "main").get$element();
    t3 = new P.Rectangle(t3.offsetLeft, t3.offsetTop, t3.offsetWidth, t3.offsetHeight);
    H.setRuntimeTypeInfo(t3, [null]);
    t2 = t3.top;
    t3 = t3.height;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    J.set$bottom$x(t1, t2 + t3);
    t3 = this.canvas;
    J.set$zIndex$x(t3.$index(t3, "main").get$element().style, "1");
    t3 = this.canvas;
    t3.$indexSet(t3, "buffer", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t3 = this.canvas;
    t3.$indexSet(t3, "gui", U.Canvas$(W.CanvasElement_CanvasElement(null, null), 780, 110));
    t3 = J.get$children$x(document.querySelector("#gui"));
    t2 = this.canvas;
    t3.add$1(t3, t2.$index(t2, "gui").get$element());
    t2 = this.canvas;
    t2 = t2.$index(t2, "gui");
    t3 = this.canvas;
    J.set$top$x(t2, t3.$index(t3, "gui").get$element().offsetTop);
    t3 = this.canvas;
    t3 = t3.$index(t3, "gui");
    t2 = this.canvas;
    J.set$left$x(t3, t2.$index(t2, "gui").get$element().offsetLeft);
    for (i = 0; t1 = this.canvas, i < 10; ++i) {
      t2 = "level" + i;
      e = document.createElement("canvas", null);
      t3 = new U.Canvas(e, null, null, null, null, null);
      t3.updateRect$2(2048, 2048);
      t4 = t3.element;
      J.set$position$x(t4.style, "absolute");
      t3.context = J.getContext$1$x(t4, "2d");
      t1.$indexSet(t1, t2, t3);
    }
    t1.$indexSet(t1, "levelbuffer", U.Canvas$(W.CanvasElement_CanvasElement(null, null), 2048, 2048));
    t1 = this.canvas;
    t1.$indexSet(t1, "levelfinal", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t1 = J.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "levelfinal").get$element());
    t2 = this.canvas;
    t2.$indexSet(t2, "collection", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t2 = J.get$children$x(document.querySelector("#canvasContainer"));
    t1 = this.canvas;
    t2.add$1(t2, t1.$index(t1, "collection").get$element());
    t1 = this.canvas;
    t1.$indexSet(t1, "creeperbuffer", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t1 = this.canvas;
    t1.$indexSet(t1, "creeper", U.Canvas$(W.CanvasElement_CanvasElement(null, null), this.width, this.height));
    t1 = J.get$children$x(document.querySelector("#canvasContainer"));
    t2 = this.canvas;
    t1.add$1(t1, t2.$index(t2, "creeper").get$element());
    this.loadSounds$0();
  },
  setupEventHandler$0: function() {
    var t1, t2, mainCanvas, guiCanvas, t3;
    t1 = document.querySelector("#terraform");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#restart");
    t2.toString;
    t2 = C.EventStreamProvider_click.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure0()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = document.querySelector("#deactivate");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure1()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#activate");
    t2.toString;
    t2 = C.EventStreamProvider_click.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure2()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = this.canvas;
    mainCanvas = t1.$index(t1, "main").get$element();
    t1 = this.canvas;
    guiCanvas = t1.$index(t1, "gui").get$element();
    mainCanvas.toString;
    t1 = C.EventStreamProvider_mousemove.forElement$1(mainCanvas);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure3()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_dblclick.forElement$1(mainCanvas);
    t1 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure4()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C.EventStreamProvider_mousedown.forElement$1(mainCanvas);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure5()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_mouseup.forElement$1(mainCanvas);
    t1 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure6()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(mainCanvas);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure7()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    guiCanvas.toString;
    t2 = C.EventStreamProvider_mousemove.forElement$1(guiCanvas);
    t1 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure8()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = C.EventStreamProvider_click.forElement$1(guiCanvas);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure9()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document;
    t1 = C.EventStreamProvider_keydown.forTarget$1(t2);
    t3 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure10()), t1._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t3._tryResume$0();
    t2 = C.EventStreamProvider_keyup.forTarget$1(t2);
    t3 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure11()), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = C.EventStreamProvider_contextmenu.forTarget$1(document);
    t2 = new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure12()), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_resize.forTarget$1(window);
    t3 = new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new U.Engine_setupEventHandler_closure13()), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
  },
  loadImages$0: function() {
    var t1, t2, completer, filenames;
    t1 = {};
    t2 = null;
    completer = new P._AsyncCompleter(P._Future$(t2));
    H.setRuntimeTypeInfo(completer, [t2]);
    filenames = ["analyzer", "numbers", "level0", "level1", "level2", "level3", "level4", "level5", "level6", "level7", "level8", "level9", "borders", "mask", "cannon", "cannongun", "base", "collector", "reactor", "storage", "terp", "packet_collection", "packet_energy", "packet_health", "relay", "emitter", "creeper", "mortar", "shell", "beam", "spore", "bomber", "bombership", "smoke", "explosion", "targetcursor", "sporetower", "forcefield", "shield", "projectile"];
    t1.loadedImages_0 = 0;
    H.IterableMixinWorkaround_forEach(filenames, new U.Engine_loadImages_closure(t1, this, completer, filenames));
    return completer.future;
  },
  loadSounds$0: function() {
    H.IterableMixinWorkaround_forEach(["shot.wav", "click.wav", "explosion.wav", "failure.wav", "energy.wav", "laser.wav"], new U.Engine_loadSounds_closure(this));
  },
  playSound$2: function($name, position) {
    var t1, distance, t2, volume, i;
    if (position != null) {
      t1 = $.game.scroll;
      distance = position.distanceTo$1(new U.Vector(t1.x, t1.y));
      t1 = $.game.zoom;
      t2 = Math.pow(distance / 20, 2);
      if (typeof t1 !== "number")
        throw t1.$div();
      volume = C.JSNumber_methods.clamp$2(t1 / t2, 0, 1);
    } else
      volume = 1;
    for (i = 0; i < 5; ++i) {
      t1 = this.sounds;
      if (J.get$ended$x(J.$index$asx(t1.$index(t1, $name), i)) !== true) {
        t1 = this.sounds;
        t1 = J.get$currentTime$x(J.$index$asx(t1.$index(t1, $name), i)) === 0;
      } else
        t1 = true;
      if (t1) {
        t1 = this.sounds;
        J.set$volume$x(J.$index$asx(t1.$index(t1, $name), i), volume);
        t1 = this.sounds;
        J.play$0$x(J.$index$asx(t1.$index(t1, $name), i));
        return;
      }
    }
  },
  playSound$1: function(name) {
    return this.playSound$2(name, null);
  },
  updateMouse$1: function(evt) {
    var t1, t2, t3, t4, position;
    t1 = this.mouse;
    t2 = J.getInterceptor$x(evt);
    t3 = t2.get$client(evt);
    t3 = t3.get$x(t3);
    t4 = this.canvas;
    t4 = J.get$left$x(t4.$index(t4, "main").get$element().getBoundingClientRect());
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.x = C.JSNumber_methods.toInt$0(t3 - t4);
    t2 = t2.get$client(evt);
    t2 = t2.get$y(t2);
    t4 = this.canvas;
    t4 = J.get$left$x(t4.$index(t4, "main").get$element().getBoundingClientRect());
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.y = C.JSNumber_methods.toInt$0(t2 - t4);
    t2 = $.game;
    if (t2 != null) {
      position = t2.getHoveredTilePosition$0();
      t1.dragEnd = new U.Vector(position.x, position.y);
    }
  },
  updateMouseGUI$1: function(evt) {
    var t1, t2, t3, t4;
    t1 = this.mouseGUI;
    t2 = J.getInterceptor$x(evt);
    t3 = t2.get$client(evt);
    t3 = t3.get$x(t3);
    t4 = this.canvas;
    t4 = J.get$left$x(t4.$index(t4, "gui").get$element().getBoundingClientRect());
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.x = C.JSNumber_methods.toInt$0(t3 - t4);
    t2 = t2.get$client(evt);
    t2 = t2.get$y(t2);
    t4 = this.canvas;
    t4 = J.get$top$x(t4.$index(t4, "gui").get$element().getBoundingClientRect());
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1.y = C.JSNumber_methods.toInt$0(t2 - t4);
  },
  isVisible$2: function(position, size) {
    var object, t1, view;
    object = new P.Rectangle(position.x, position.y, size.x, size.y);
    H.setRuntimeTypeInfo(object, [null]);
    t1 = $.engine;
    view = new P.Rectangle(0, 0, t1.width, t1.height);
    H.setRuntimeTypeInfo(view, [null]);
    return view.intersects$1(view, object);
  },
  randomInt$3: function(from, to, seed) {
    return C.C__Random.nextInt$1(to - from + 1) + from;
  },
  randomInt$2: function(from, to) {
    return this.randomInt$3(from, to, null);
  },
  Engine$0: function() {
    this.canvas = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    this.sounds = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    this.images = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    this.init$0();
  },
  static: {
Engine$: function() {
  var t1 = new U.Engine(60, 16.666666666666668, null, null, null, null, null, null, null, null, null, null, null, new U.Mouse(0, 0, true, null, null), new U.Mouse(0, 0, true, null, null), null, null, null, null);
  t1.Engine$0();
  return t1;
}}

},

Engine_setupEventHandler_closure: {"": "Closure;",
  call$1: function($event) {
    return $.game.toggleTerraform$0();
  },
  $is_args1: true
},

Engine_setupEventHandler_closure0: {"": "Closure;",
  call$1: function($event) {
    return $.game.restart$0();
  },
  $is_args1: true
},

Engine_setupEventHandler_closure1: {"": "Closure;",
  call$1: function($event) {
    return $.game.deactivateBuilding$0();
  },
  $is_args1: true
},

Engine_setupEventHandler_closure2: {"": "Closure;",
  call$1: function($event) {
    return $.game.activateBuilding$0();
  },
  $is_args1: true
},

Engine_setupEventHandler_closure3: {"": "Closure;",
  call$1: function($event) {
    return U.onMouseMove($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure4: {"": "Closure;",
  call$1: function($event) {
    return U.onDoubleClick($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure5: {"": "Closure;",
  call$1: function($event) {
    return U.onMouseDown($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure6: {"": "Closure;",
  call$1: function($event) {
    return U.onMouseUp($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure7: {"": "Closure;",
  call$1: function($event) {
    return U.onMouseScroll($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure8: {"": "Closure;",
  call$1: function($event) {
    return U.onMouseMoveGUI($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure9: {"": "Closure;",
  call$1: function($event) {
    return U.onClickGUI($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure10: {"": "Closure;",
  call$1: function($event) {
    return U.onKeyDown($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure11: {"": "Closure;",
  call$1: function($event) {
    return U.onKeyUp($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure12: {"": "Closure;",
  call$1: function($event) {
    return J.preventDefault$0$x($event);
  },
  $is_args1: true
},

Engine_setupEventHandler_closure13: {"": "Closure;",
  call$1: function($event) {
    return U.onResize($event);
  },
  $is_args1: true
},

Engine_loadImages_closure: {"": "Closure;box_0,this_1,completer_2,filenames_3",
  call$1: function(filename) {
    var t1, t2;
    t1 = this.this_1;
    t2 = t1.images;
    t2.$indexSet(t2, filename, W.ImageElement_ImageElement(null, C.JSString_methods.$add("images/", filename) + ".png", null));
    t1 = t1.images;
    t1 = J.get$onLoad$x(t1.$index(t1, filename));
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Engine_loadImages__closure(this.box_0, this.completer_2, this.filenames_3)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  $is_args1: true
},

Engine_loadImages__closure: {"": "Closure;box_0,completer_4,filenames_5",
  call$1: function($event) {
    var t1, loadedImages;
    t1 = this.box_0;
    loadedImages = t1.loadedImages_0 + 1;
    t1.loadedImages_0 = loadedImages;
    if (loadedImages === 40) {
      t1 = this.completer_4.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  $is_args1: true
},

Engine_loadSounds_closure: {"": "Closure;this_0",
  call$1: function(filename) {
    var t1, $name, t2, j;
    t1 = J.split$1$s(filename, ".");
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    $name = t1[0];
    t1 = this.this_0;
    t2 = t1.sounds;
    t2.$indexSet(t2, $name, P.List_List(null, null));
    for (j = 0; j < 5; ++j) {
      t2 = t1.sounds;
      J.add$1$ax(t2.$index(t2, $name), W.AudioElement_AudioElement("sounds/" + filename));
    }
  },
  $is_args1: true
},

Game: {"": "Object;tileSize,seed,currentEnergy,maxEnergy,activeSymbol,terraformingHeight,creeperCounter,collectCounter,speed,zoom,running,mode,paused,scrollingUp,scrollingDown,scrollingLeft,scrollingRight,ghosts,packetQueue,sporetowers,emitters,symbols,explosions,smokes,spores,buildings,packets,shells,ships,projectiles,world,scroll,base,stopwatch",
  init$0: function() {
    var music, t1, t2;
    this.reset$0(this);
    this.setupUI$0();
    music = W.AudioElement_AudioElement("sounds/music.ogg");
    music.loop = true;
    music.volume = 0.25;
    t1 = C.EventStreamProvider_canplay.forElement$1(music);
    t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.Game_init_closure(music)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  reset$0: function(_) {
    var t1 = this.stopwatch;
    t1.reset$0(t1);
    t1.start$0(t1);
    P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 1), this.get$updateTime());
    J.set$display$x(document.querySelector("#lose").style, "none");
    J.set$display$x(document.querySelector("#win").style, "none");
    this.mode = "DEFAULT";
    C.JSArray_methods.set$length(this.buildings, 0);
    C.JSArray_methods.set$length(this.packets, 0);
    C.JSArray_methods.set$length(this.shells, 0);
    C.JSArray_methods.set$length(this.spores, 0);
    C.JSArray_methods.set$length(this.ships, 0);
    C.JSArray_methods.set$length(this.smokes, 0);
    C.JSArray_methods.set$length(this.explosions, 0);
    C.JSArray_methods.set$length(this.emitters, 0);
    C.JSArray_methods.set$length(this.sporetowers, 0);
    C.JSArray_methods.set$length(this.packetQueue, 0);
    C.JSArray_methods.set$length(this.projectiles, 0);
    this.maxEnergy = 20;
    this.currentEnergy = 20;
    this.creeperCounter = 0;
    this.collectCounter = 0;
    $.Emitter_counter = 0;
    $.Building_damageCounter = 0;
    $.Smoke_counter = 0;
    $.Explosion_counter = 0;
    this.speed = 1;
    this.activeSymbol = -1;
    this.updateEnergyElement$0();
    this.updateSpeedElement$0();
    this.updateZoomElement$0();
    this.clearSymbols$0();
    this.createWorld$0();
  },
  updateTime$1: function(_) {
    var s, m, minute, second;
    s = C.JSNumber_methods.$tdiv(C.JSNumber_methods.$tdiv($.game.stopwatch.get$elapsedTicks() * 1000, 1000000), 1000);
    if (s >= 60) {
      m = C.JSNumber_methods.$tdiv(s, 60);
      s = C.JSNumber_methods.$mod(s, 60);
    } else
      m = 0;
    minute = m <= 9 ? "0" + H.S(m) : H.S(m);
    second = s <= 9 ? "0" + H.S(s) : H.S(s);
    J.set$innerHtml$x(document.querySelector("#time"), "Time: " + minute + ":" + second);
  },
  get$updateTime: function() {
    return new H.BoundClosure$1(this, U.Game.prototype.updateTime$1, null, "updateTime$1");
  },
  withinWorld$2: function(x, y) {
    var t1, t2;
    if (typeof x !== "number")
      throw x.$gt();
    if (x > -1) {
      t1 = this.world.size;
      t2 = t1.x;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (x < t2) {
        if (typeof y !== "number")
          throw y.$gt();
        if (y > -1) {
          t1 = t1.y;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = y < t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  getHoveredTilePosition$0: function() {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = $.engine;
    t2 = t1.mouse.x;
    t1 = t1.halfWidth;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t3 = this.tileSize;
    t4 = this.zoom;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t4 = C.JSNumber_methods.toInt$0(Math.floor((t2 - t1) / (t3 * t4)));
    t1 = this.scroll;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t5 = $.engine;
    t6 = t5.mouse.y;
    t5 = t5.halfHeight;
    if (typeof t5 !== "number")
      throw H.iae(t5);
    t7 = this.zoom;
    if (typeof t7 !== "number")
      throw H.iae(t7);
    t7 = C.JSNumber_methods.toInt$0(Math.floor((t6 - t5) / (t3 * t7)));
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return new U.Vector(t4 + t2, t7 + t1);
  },
  pause$0: function(_) {
    var t1;
    J.set$display$x(document.querySelector("#paused").style, "block");
    this.paused = true;
    t1 = this.stopwatch;
    t1.stop$0(t1);
  },
  resume$0: function() {
    J.set$display$x(document.querySelector("#paused").style, "none");
    this.paused = false;
    var t1 = this.stopwatch;
    t1.start$0(t1);
  },
  run$0: function() {
    var t1, t2, t3;
    this.running = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, C.JSNumber_methods.toInt$0(Math.floor(1000 / this.speed / $.engine.FPS)), 0, 0), new U.Game_run_closure(this));
    t1 = $.engine;
    t2 = window;
    t3 = this.get$draw();
    C.Window_methods._ensureRequestAnimationFrame$0(t2);
    t1.animationRequest = C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t3));
  },
  restart$0: function() {
    this.running.cancel$0();
    this.reset$0(this);
    this.drawTerrain$0();
    this.copyTerrain$0();
    this.run$0();
  },
  toggleTerraform$0: function() {
    if (this.mode === "TERRAFORM") {
      this.mode = "DEFAULT";
      var t1 = document.querySelector("#terraform");
      t1.toString;
      new W._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform Off");
    } else {
      this.mode = "TERRAFORM";
      t1 = document.querySelector("#terraform");
      t1.toString;
      new W._ElementAttributeMap(t1)._element.setAttribute("value", "Terraform On");
    }
  },
  faster$0: function() {
    var t1 = this.speed;
    if (t1 < 2) {
      this.speed = t1 * 2;
      this.running.cancel$0();
      this.run$0();
      this.updateSpeedElement$0();
    }
  },
  slower$0: function() {
    var t1 = this.speed;
    if (t1 > 1) {
      this.speed = t1 / 2;
      this.running.cancel$0();
      this.run$0();
      this.updateSpeedElement$0();
    }
  },
  zoomIn$0: function() {
    if (J.$lt$n(this.zoom, 1.6)) {
      this.zoom = J.$add$ns(this.zoom, 0.2);
      this.zoom = H.Primitives_parseDouble(J.toStringAsFixed$1$n(this.zoom, 2), null);
      this.copyTerrain$0();
      this.drawCollection$0();
      this.updateZoomElement$0();
    }
  },
  zoomOut$0: function() {
    if (J.$gt$n(this.zoom, 0.4)) {
      this.zoom = J.$sub$n(this.zoom, 0.2);
      this.zoom = H.Primitives_parseDouble(J.toStringAsFixed$1$n(this.zoom, 2), null);
      this.copyTerrain$0();
      this.drawCollection$0();
      this.updateZoomElement$0();
    }
  },
  createWorld$0: function() {
    var t1, i, t2, t3, j, heightmap, height, randomPosition, building, number, l, max, t4, emitter, sporetower;
    t1 = this.world;
    t1.tiles = P.List_List(t1.size.x, null);
    i = 0;
    while (true) {
      t1 = this.world;
      t2 = t1.size;
      t3 = t2.x;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (!(i < t3))
        break;
      t1 = t1.tiles;
      t2 = P.List_List(t2.y, null);
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i] = t2;
      j = 0;
      while (true) {
        t1 = this.world;
        t2 = t1.size.y;
        if (typeof t2 !== "number")
          throw H.iae(t2);
        if (!(j < t2))
          break;
        t1 = t1.tiles;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        J.$indexSet$ax(t1[i], j, U.Tile$());
        ++j;
      }
      ++i;
    }
    heightmap = U.HeightMap$(this.seed, 129, 0, 90);
    heightmap.run$0();
    i = 0;
    while (true) {
      t1 = this.world.size.x;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      j = 0;
      while (true) {
        t1 = this.world.size.y;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(j < t1))
          break;
        t1 = heightmap.map;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1 = t1[i];
        if (j >= t1.length)
          throw H.ioore(t1, j);
        t1 = t1[j];
        if (typeof t1 !== "number")
          throw t1.$div();
        height = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1 / 10));
        if (height > 10)
          height = 10;
        t1 = this.world.tiles;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        J.set$height$x(J.$index$asx(t1[i], j), height);
        ++j;
      }
      ++i;
    }
    t1 = $.engine.randomInt$3(0, t1 - 9, this.seed + 1);
    t2 = $.engine;
    t3 = this.world.size.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    randomPosition = new U.Vector(t1, t2.randomInt$3(0, t3 - 9, this.seed + 1));
    t3 = this.scroll;
    t2 = randomPosition.x;
    if (typeof t2 !== "number")
      throw t2.$add();
    t3.x = t2 + 4;
    t2 = randomPosition.y;
    if (typeof t2 !== "number")
      throw t2.$add();
    t3.y = t2 + 4;
    building = new U.Building(randomPosition, null, null, new U.Vector(0, 0), "base", "IDLE", false, false, false, false, true, false, false, false, null, 0, null, 0, 0, 0, 1, 0, null, 0, null, 0, 0, 0, 0, null);
    building.health = 0;
    building.size = 3;
    building.energy = 0;
    building.health = 40;
    building.maxHealth = 40;
    building.built = true;
    building.size = 9;
    building.canMove = true;
    this.buildings.push(building);
    this.base = building;
    t2 = this.world.tiles;
    t3 = building.position;
    t1 = t3.x;
    if (typeof t1 !== "number")
      throw t1.$add();
    t1 += 4;
    if (t1 >>> 0 !== t1 || t1 >= t2.length)
      throw H.ioore(t2, t1);
    t1 = t2[t1];
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw t3.$add();
    height = J.get$height$x(J.$index$asx(t1, t3 + 4));
    if (typeof height !== "number")
      throw height.$lt();
    if (height < 0)
      height = 0;
    for (i = 0; i < 9; ++i)
      for (j = 0; j < 9; ++j) {
        t1 = this.world.tiles;
        t2 = building.position;
        t3 = t2.x;
        if (typeof t3 !== "number")
          throw t3.$add();
        t3 += i;
        if (t3 >>> 0 !== t3 || t3 >= t1.length)
          throw H.ioore(t1, t3);
        t3 = t1[t3];
        t2 = t2.y;
        if (typeof t2 !== "number")
          throw t2.$add();
        J.set$height$x(J.$index$asx(t3, t2 + j), height);
      }
    number = $.engine.randomInt$3(2, 3, this.seed);
    for (t1 = this.emitters, l = 0; t2 = $.engine, l < number; ++l) {
      t3 = this.world.size.x;
      if (typeof t3 !== "number")
        throw t3.$sub();
      t2.toString;
      Math.random() * 1000 >>> 0;
      max = t3 - 3 - 0 + 1;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      t2 = Math.random() * max >>> 0;
      t3 = $.engine;
      t4 = this.world.size.y;
      if (typeof t4 !== "number")
        throw t4.$sub();
      t3.toString;
      Math.random() * 1000 >>> 0;
      max = t4 - 3 - 0 + 1;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      emitter = new U.Emitter(new U.Vector(t2 + 0, (Math.random() * max >>> 0) + 0), null, 25, null);
      emitter.imageID = "emitter";
      t1.push(emitter);
      t2 = this.world.tiles;
      t3 = emitter.position;
      t4 = t3.x;
      if (typeof t4 !== "number")
        throw t4.$add();
      ++t4;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      t4 = t2[t4];
      t3 = t3.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      height = J.get$height$x(J.$index$asx(t4, t3 + 1));
      if (typeof height !== "number")
        throw height.$lt();
      if (height < 0)
        height = 0;
      for (i = 0; i < 3; ++i)
        for (j = 0; j < 3; ++j) {
          t2 = this.world.tiles;
          t3 = emitter.position;
          t4 = t3.x;
          if (typeof t4 !== "number")
            throw t4.$add();
          t4 += i;
          if (t4 >>> 0 !== t4 || t4 >= t2.length)
            throw H.ioore(t2, t4);
          t4 = t2[t4];
          t3 = t3.y;
          if (typeof t3 !== "number")
            throw t3.$add();
          J.set$height$x(J.$index$asx(t4, t3 + j), height);
        }
    }
    number = t2.randomInt$3(1, 2, this.seed + 1);
    for (t1 = this.sporetowers, l = 0; l < number; ++l) {
      t2 = $.engine;
      t3 = this.world.size.x;
      if (typeof t3 !== "number")
        throw t3.$sub();
      t2.toString;
      Math.random() * 1000 >>> 0;
      max = t3 - 3 - 0 + 1;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      t2 = Math.random() * max >>> 0;
      t3 = $.engine;
      t4 = this.world.size.y;
      if (typeof t4 !== "number")
        throw t4.$sub();
      t3.toString;
      Math.random() * 1000 >>> 0;
      max = t4 - 3 - 0 + 1;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      sporetower = new U.Sporetower(new U.Vector(t2 + 0, (Math.random() * max >>> 0) + 0), null, 0);
      sporetower.imageID = "sporetower";
      $.engine.toString;
      sporetower.sporeCounter = (Math.random() * 5001 >>> 0) + 7500;
      t1.push(sporetower);
      t2 = this.world.tiles;
      t3 = sporetower.position;
      t4 = t3.x;
      if (typeof t4 !== "number")
        throw t4.$add();
      ++t4;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw H.ioore(t2, t4);
      t4 = t2[t4];
      t3 = t3.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      height = J.get$height$x(J.$index$asx(t4, t3 + 1));
      if (typeof height !== "number")
        throw height.$lt();
      if (height < 0)
        height = 0;
      for (i = 0; i < 3; ++i)
        for (j = 0; j < 3; ++j) {
          t2 = this.world.tiles;
          t3 = sporetower.position;
          t4 = t3.x;
          if (typeof t4 !== "number")
            throw t4.$add();
          t4 += i;
          if (t4 >>> 0 !== t4 || t4 >= t2.length)
            throw H.ioore(t2, t4);
          t4 = t2[t4];
          t3 = t3.y;
          if (typeof t3 !== "number")
            throw t3.$add();
          J.set$height$x(J.$index$asx(t4, t3 + j), height);
        }
    }
  },
  addBuilding$2: function(position, type) {
    var building, t1;
    building = new U.Building(position, null, null, new U.Vector(0, 0), type, "IDLE", false, false, false, false, true, false, false, false, null, 0, null, 0, 0, 0, 1, 0, null, 0, null, 0, 0, 0, 0, null);
    building.health = 0;
    building.size = 3;
    building.energy = 0;
    t1 = building.imageID;
    if (t1 === "analyzer") {
      building.maxHealth = 80;
      building.maxEnergy = 20;
      building.canMove = true;
      building.needsEnergy = true;
      building.weaponRadius = 10;
    } else if (t1 === "terp") {
      building.maxHealth = 60;
      building.maxEnergy = 20;
      building.canMove = true;
      building.needsEnergy = true;
      building.weaponRadius = 12;
    } else if (t1 === "shield") {
      building.maxHealth = 75;
      building.maxEnergy = 20;
      building.canMove = true;
      building.needsEnergy = true;
      building.weaponRadius = 9;
    } else if (t1 === "bomber") {
      building.maxHealth = 75;
      building.maxEnergy = 15;
      building.needsEnergy = true;
    } else if (t1 === "storage")
      building.maxHealth = 8;
    else if (t1 === "reactor")
      building.maxHealth = 50;
    else if (t1 === "collector")
      building.maxHealth = 5;
    else if (t1 === "relay")
      building.maxHealth = 10;
    else if (t1 === "cannon") {
      building.maxHealth = 25;
      building.maxEnergy = 40;
      building.weaponRadius = 8;
      building.canMove = true;
      building.needsEnergy = true;
    } else if (t1 === "mortar") {
      building.maxHealth = 40;
      building.maxEnergy = 20;
      building.weaponRadius = 12;
      building.canMove = true;
      building.needsEnergy = true;
    } else if (t1 === "beam") {
      building.maxHealth = 20;
      building.maxEnergy = 10;
      building.weaponRadius = 12;
      building.canMove = true;
      building.needsEnergy = true;
    }
    this.buildings.push(building);
  },
  removeBuilding$1: function(building) {
    var t1, i, t2;
    if (building.get$built()) {
      this.explosions.push(U.Explosion$(building.getCenter$0()));
      $.engine.playSound$2("explosion", building.position);
    }
    if (building.imageID === "base") {
      J.set$display$x(document.querySelector("#lose").style, "block");
      t1 = this.stopwatch;
      t1.stop$0(t1);
      this.running.cancel$0();
    }
    if (building.imageID === "collector")
      if (building.built)
        this.updateCollection$2(building, "remove");
    if (building.imageID === "storage") {
      this.maxEnergy = this.maxEnergy - 10;
      this.updateEnergyElement$0();
    }
    if (building.imageID === "speed")
      $.Packet_baseSpeed = $.Packet_baseSpeed / 1.01;
    for (t1 = this.packets, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (!J.$eq(t1[i].currentTarget, building)) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2 = t1[i].target;
        t2 = t2 == null ? building == null : t2 === building;
      } else
        t2 = true;
      if (t2)
        C.JSArray_methods.removeAt$1(t1, i);
    }
    for (t1 = this.packetQueue, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      if (!J.$eq(t1[i].currentTarget, building)) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2 = t1[i].target;
        t2 = t2 == null ? building == null : t2 === building;
      } else
        t2 = true;
      if (t2)
        C.JSArray_methods.removeAt$1(t1, i);
    }
    t1 = this.buildings;
    C.JSArray_methods.removeAt$1(t1, H.Arrays_indexOf(t1, building, 0, t1.length));
  },
  activateBuilding$0: function() {
    var t1, i, t2;
    for (t1 = this.buildings, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      if (J.get$selected$x(t2) === true)
        t2.set$active(true);
    }
  },
  deactivateBuilding$0: function() {
    var t1, i, t2;
    for (t1 = this.buildings, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      if (J.get$selected$x(t2) === true)
        t2.set$active(false);
    }
  },
  clearSymbols$0: function() {
    var t1, i;
    this.activeSymbol = -1;
    for (t1 = this.symbols, i = 0; i < t1.length; ++i)
      t1[i].active = false;
    t1 = $.engine.canvas;
    J.set$cursor$x(t1.$index(t1, "main").get$element().style, "url('images/Normal.cur') 2 2, pointer");
  },
  setupUI$0: function() {
    var t1 = this.symbols;
    t1.push(new U.UISymbol(new U.Vector(0, 0), "cannon", 80, 55, 3, 25, 8, 81, false, false));
    t1.push(new U.UISymbol(new U.Vector(81, 0), "collector", 80, 55, 3, 5, 6, 87, false, false));
    t1.push(new U.UISymbol(new U.Vector(162, 0), "reactor", 80, 55, 3, 50, 0, 69, false, false));
    t1.push(new U.UISymbol(new U.Vector(243, 0), "storage", 80, 55, 3, 8, 0, 82, false, false));
    t1.push(new U.UISymbol(new U.Vector(324, 0), "shield", 80, 55, 3, 75, 10, 84, false, false));
    t1.push(new U.UISymbol(new U.Vector(405, 0), "analyzer", 80, 55, 3, 80, 10, 90, false, false));
    t1.push(new U.UISymbol(new U.Vector(0, 56), "relay", 80, 55, 3, 10, 8, 65, false, false));
    t1.push(new U.UISymbol(new U.Vector(81, 56), "mortar", 80, 55, 3, 40, 12, 83, false, false));
    t1.push(new U.UISymbol(new U.Vector(162, 56), "beam", 80, 55, 3, 20, 12, 68, false, false));
    t1.push(new U.UISymbol(new U.Vector(243, 56), "bomber", 80, 55, 3, 75, 0, 70, false, false));
    t1.push(new U.UISymbol(new U.Vector(324, 56), "terp", 80, 55, 3, 60, 12, 71, false, false));
  },
  drawTerrain$0: function() {
    var i, t1, t2, t3, t4, i0, t5, t6, j, t7, j0, t8, t9, indexAbove, k, t10, up, t11, down, left, right, index, pattern;
    for (i = 0; i < 10; ++i) {
      t1 = $.engine.canvas;
      J.clear$0$ax(t1.$index(t1, "level" + i));
    }
    t1 = this.tileSize;
    t2 = t1 + 6;
    t3 = t2 + 3;
    i = 0;
    while (true) {
      t4 = this.world.size.x;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(i < t4))
        break;
      t4 = i * t1;
      i0 = i + 1;
      t5 = i - 1;
      t6 = t5 < 0;
      j = 0;
      while (true) {
        t7 = this.world.size.y;
        if (typeof t7 !== "number")
          throw H.iae(t7);
        if (!(j < t7))
          break;
        for (t7 = j * t1, j0 = j + 1, t8 = j - 1, t9 = t8 < 0, indexAbove = -1, k = 9; k > -1; --k) {
          t10 = this.world.tiles;
          if (i >= t10.length)
            throw H.ioore(t10, i);
          t10 = J.get$height$x(J.$index$asx(t10[i], j));
          if (typeof t10 !== "number")
            throw H.iae(t10);
          if (k <= t10) {
            if (t9)
              up = 0;
            else {
              t10 = this.world.tiles;
              if (i >= t10.length)
                throw H.ioore(t10, i);
              t10 = J.get$height$x(J.$index$asx(t10[i], t8));
              if (typeof t10 !== "number")
                throw t10.$ge();
              up = t10 >= k ? 1 : 0;
            }
            t10 = this.world;
            t11 = t10.size.y;
            if (typeof t11 !== "number")
              throw t11.$sub();
            if (j0 > t11 - 1)
              down = 0;
            else {
              t10 = t10.tiles;
              if (i >= t10.length)
                throw H.ioore(t10, i);
              t10 = J.get$height$x(J.$index$asx(t10[i], j0));
              if (typeof t10 !== "number")
                throw t10.$ge();
              down = t10 >= k ? 1 : 0;
            }
            if (t6)
              left = 0;
            else {
              t10 = this.world.tiles;
              if (t5 >= t10.length)
                throw H.ioore(t10, t5);
              t10 = J.get$height$x(J.$index$asx(t10[t5], j));
              if (typeof t10 !== "number")
                throw t10.$ge();
              left = t10 >= k ? 1 : 0;
            }
            t10 = this.world;
            t11 = t10.size.x;
            if (typeof t11 !== "number")
              throw t11.$sub();
            if (i0 > t11 - 1)
              right = 0;
            else {
              t10 = t10.tiles;
              if (i0 >= t10.length)
                throw H.ioore(t10, i0);
              t10 = J.get$height$x(J.$index$asx(t10[i0], j));
              if (typeof t10 !== "number")
                throw t10.$ge();
              right = t10 >= k ? 1 : 0;
            }
            index = 8 * down + 4 * left + 2 * up + right;
            t10 = this.world.tiles;
            if (i >= t10.length)
              throw H.ioore(t10, i);
            if (k === J.get$height$x(J.$index$asx(t10[i], j))) {
              t10 = this.world.tiles;
              if (i >= t10.length)
                throw H.ioore(t10, i);
              J.set$index$x(J.$index$asx(t10[i], j), index);
            }
            if (k < 9) {
              if (index === indexAbove)
                continue;
              if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                continue;
            }
            t10 = $.engine.canvas;
            t10 = t10.$index(t10, "level" + k).get$context();
            t11 = $.engine.images;
            J.drawImageScaledFromSource$9$x(t10, t11.$index(t11, "mask"), index * t2 + 3, t3, t1, t1, t4, t7, t1, t1);
            indexAbove = index;
          }
        }
        j = j0;
      }
      i = i0;
    }
    for (i = 0; i < 10; ++i) {
      t3 = $.engine.canvas;
      t3 = t3.$index(t3, "level" + i).get$context();
      t4 = $.engine.images;
      pattern = J.createPatternFromImage$2$x(t3, t4.$index(t4, "level" + i), "repeat");
      t4 = $.engine.canvas;
      J.set$globalCompositeOperation$x(t4.$index(t4, "level" + i).get$context(), "source-in");
      t4 = $.engine.canvas;
      J.set$fillStyle$x(t4.$index(t4, "level" + i).get$context(), pattern);
      t4 = $.engine.canvas;
      t4 = t4.$index(t4, "level" + i).get$context();
      t3 = $.engine.canvas;
      t3 = J.get$width$x(t3.$index(t3, "level" + i).get$element());
      t5 = $.engine.canvas;
      J.fillRect$4$x(t4, 0, 0, t3, J.get$height$x(t5.$index(t5, "level" + i).get$element()));
      t5 = $.engine.canvas;
      J.set$globalCompositeOperation$x(t5.$index(t5, "level" + i).get$context(), "source-over");
    }
    t3 = t1 + 2;
    i = 0;
    while (true) {
      t4 = this.world.size.x;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(i < t4))
        break;
      t4 = i * t1;
      i0 = i + 1;
      t5 = i - 1;
      t6 = t5 < 0;
      j = 0;
      while (true) {
        t7 = this.world.size.y;
        if (typeof t7 !== "number")
          throw H.iae(t7);
        if (!(j < t7))
          break;
        for (t7 = j * t1, j0 = j + 1, t8 = j - 1, t9 = t8 < 0, indexAbove = -1, k = 9; k > -1; --k) {
          t10 = this.world.tiles;
          if (i >= t10.length)
            throw H.ioore(t10, i);
          t10 = J.get$height$x(J.$index$asx(t10[i], j));
          if (typeof t10 !== "number")
            throw H.iae(t10);
          if (k <= t10) {
            if (t9)
              up = 0;
            else {
              t10 = this.world.tiles;
              if (i >= t10.length)
                throw H.ioore(t10, i);
              t10 = J.get$height$x(J.$index$asx(t10[i], t8));
              if (typeof t10 !== "number")
                throw t10.$ge();
              up = t10 >= k ? 1 : 0;
            }
            t10 = this.world;
            t11 = t10.size.y;
            if (typeof t11 !== "number")
              throw t11.$sub();
            if (j0 > t11 - 1)
              down = 0;
            else {
              t10 = t10.tiles;
              if (i >= t10.length)
                throw H.ioore(t10, i);
              t10 = J.get$height$x(J.$index$asx(t10[i], j0));
              if (typeof t10 !== "number")
                throw t10.$ge();
              down = t10 >= k ? 1 : 0;
            }
            if (t6)
              left = 0;
            else {
              t10 = this.world.tiles;
              if (t5 >= t10.length)
                throw H.ioore(t10, t5);
              t10 = J.get$height$x(J.$index$asx(t10[t5], j));
              if (typeof t10 !== "number")
                throw t10.$ge();
              left = t10 >= k ? 1 : 0;
            }
            t10 = this.world;
            t11 = t10.size.x;
            if (typeof t11 !== "number")
              throw t11.$sub();
            if (i0 > t11 - 1)
              right = 0;
            else {
              t10 = t10.tiles;
              if (i0 >= t10.length)
                throw H.ioore(t10, i0);
              t10 = J.get$height$x(J.$index$asx(t10[i0], j));
              if (typeof t10 !== "number")
                throw t10.$ge();
              right = t10 >= k ? 1 : 0;
            }
            index = 8 * down + 4 * left + 2 * up + right;
            if (k < 9) {
              if (index === indexAbove)
                continue;
              if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
                continue;
            }
            t10 = $.engine.canvas;
            t10 = t10.$index(t10, "level" + k).get$context();
            t11 = $.engine.images;
            J.drawImageScaledFromSource$9$x(t10, t11.$index(t11, "borders"), index * t2 + 2, 2, t3, t3, t4, t7, t3, t3);
            indexAbove = index;
          }
        }
        j = j0;
      }
      i = i0;
    }
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "levelbuffer"));
    for (k = 0; k < 10; ++k) {
      t1 = $.engine.canvas;
      t1 = t1.$index(t1, "levelbuffer").get$context();
      t2 = $.engine.canvas;
      J.drawImage$3$x(t1, t2.$index(t2, "level" + k).get$element(), 0, 0);
    }
    J.set$display$x(document.querySelector("#loading").style, "none");
  },
  copyTerrain$0: function() {
    var t1, delta, t2, t3, t4, t5, t6, t7, left, $top, delta2, width, height, t8;
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "levelfinal"));
    delta = new U.Vector(0, 0);
    t1 = this.scroll;
    t2 = t1.x;
    t3 = this.tileSize;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t4 = $.engine;
    t5 = t4.width;
    if (typeof t5 !== "number")
      throw t5.$div();
    t6 = this.zoom;
    if (typeof t6 !== "number")
      throw H.iae(t6);
    t7 = 1 / t6;
    left = t2 * t3 - t5 / 2 * t7;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t5 = t4.height;
    if (typeof t5 !== "number")
      throw t5.$div();
    $top = t1 * t3 - t5 / 2 * t7;
    if (left < 0) {
      delta.x = -left * t6;
      left = 0;
    }
    if ($top < 0) {
      t1 = this.zoom;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      delta.y = -$top * t1;
      $top = 0;
    }
    delta2 = new U.Vector(0, 0);
    t1 = t4.width;
    t2 = this.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t5 = 1 / t2;
    if (typeof t1 !== "number")
      throw t1.$mul();
    width = t1 * t5;
    t1 = t4.height;
    if (typeof t1 !== "number")
      throw t1.$mul();
    height = t1 * t5;
    t1 = left + width;
    t5 = this.world.size.x;
    if (typeof t5 !== "number")
      throw t5.$mul();
    t5 *= t3;
    if (t1 > t5) {
      delta2.x = (t1 - t5) * t2;
      t1 = this.world.size.x;
      if (typeof t1 !== "number")
        throw t1.$mul();
      width = t1 * t3 - left;
    }
    t1 = $top + height;
    t2 = this.world.size.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 *= t3;
    if (t1 > t2) {
      t5 = this.zoom;
      if (typeof t5 !== "number")
        throw H.iae(t5);
      delta2.y = (t1 - t2) * t5;
      t5 = this.world.size.y;
      if (typeof t5 !== "number")
        throw t5.$mul();
      height = t5 * t3 - $top;
    }
    t1 = t4.canvas;
    t1 = t1.$index(t1, "levelfinal").get$context();
    t2 = $.engine.canvas;
    t2 = t2.$index(t2, "levelbuffer").get$element();
    t3 = delta.x;
    t4 = delta.y;
    t5 = $.engine;
    t6 = t5.width;
    t7 = delta2.x;
    if (typeof t6 !== "number")
      throw t6.$sub();
    if (typeof t7 !== "number")
      throw H.iae(t7);
    t5 = t5.height;
    t8 = delta2.y;
    if (typeof t5 !== "number")
      throw t5.$sub();
    if (typeof t8 !== "number")
      throw H.iae(t8);
    J.drawImageScaledFromSource$9$x(t1, t2, left, $top, width, height, t3, t4, t6 - t7, t5 - t8);
  },
  redrawTiles$1: function(tiles) {
    var tempCanvas, tempContext, t1, t, e, t2, t3, t4, i, t5, iS, jS, index, indexAbove, up, t6, t7, down, left, right, t8, pattern, translation, t9;
    tempCanvas = [];
    tempContext = [];
    for (t1 = this.tileSize, t = 0; t < 10; ++t) {
      e = document.createElement("canvas", null);
      tempCanvas.push(e);
      if (t >= tempCanvas.length)
        throw H.ioore(tempCanvas, t);
      J.set$width$x(tempCanvas[t], t1);
      if (t >= tempCanvas.length)
        throw H.ioore(tempCanvas, t);
      J.set$height$x(tempCanvas[t], t1);
      if (t >= tempCanvas.length)
        throw H.ioore(tempCanvas, t);
      tempContext.push(J.getContext$1$x(tempCanvas[t], "2d"));
    }
    for (t2 = t1 + 6, t3 = t1 + 2, t4 = t2 + 3, i = 0; i < tiles.length; ++i) {
      t5 = tiles[i];
      iS = t5.get$x(t5);
      jS = t5.get$y(t5);
      if (this.withinWorld$2(iS, jS)) {
        for (index = -1, indexAbove = -1, t = 9; t > -1; --t) {
          t5 = this.world.tiles;
          if (iS >>> 0 !== iS || iS >= t5.length)
            throw H.ioore(t5, iS);
          t5 = J.get$height$x(J.$index$asx(t5[iS], jS));
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (t <= t5) {
            if (typeof jS !== "number")
              throw jS.$sub();
            t5 = jS - 1;
            if (t5 < 0)
              up = 0;
            else {
              t6 = this.world.tiles;
              if (iS >= t6.length)
                throw H.ioore(t6, iS);
              t5 = J.get$height$x(J.$index$asx(t6[iS], t5));
              if (typeof t5 !== "number")
                throw t5.$ge();
              up = t5 >= t ? 1 : 0;
            }
            t5 = jS + 1;
            t6 = this.world;
            t7 = t6.size.y;
            if (typeof t7 !== "number")
              throw t7.$sub();
            if (t5 > t7 - 1)
              down = 0;
            else {
              t6 = t6.tiles;
              if (iS >= t6.length)
                throw H.ioore(t6, iS);
              t5 = J.get$height$x(J.$index$asx(t6[iS], t5));
              if (typeof t5 !== "number")
                throw t5.$ge();
              down = t5 >= t ? 1 : 0;
            }
            t5 = iS - 1;
            if (t5 < 0)
              left = 0;
            else {
              t6 = this.world.tiles;
              if (t5 >= t6.length)
                throw H.ioore(t6, t5);
              t5 = J.get$height$x(J.$index$asx(t6[t5], jS));
              if (typeof t5 !== "number")
                throw t5.$ge();
              left = t5 >= t ? 1 : 0;
            }
            t5 = iS + 1;
            t6 = this.world;
            t7 = t6.size.x;
            if (typeof t7 !== "number")
              throw t7.$sub();
            if (t5 > t7 - 1)
              right = 0;
            else {
              t6 = t6.tiles;
              if (t5 >= t6.length)
                throw H.ioore(t6, t5);
              t5 = J.get$height$x(J.$index$asx(t6[t5], jS));
              if (typeof t5 !== "number")
                throw t5.$ge();
              right = t5 >= t ? 1 : 0;
            }
            index = 8 * down + 4 * left + 2 * up + right;
          }
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.clearRect$4$x(tempContext[t], 0, 0, t1, t1);
          t5 = t < 9;
          if (t5) {
            if (index === indexAbove)
              continue;
            if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
              continue;
          }
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          t6 = tempContext[t];
          t7 = $.engine.images;
          t8 = index * t2;
          J.drawImageScaledFromSource$9$x(t6, t7.$index(t7, "mask"), t8 + 3, t4, t1, t1, 0, 0, t1, t1);
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          t7 = tempContext[t];
          t6 = $.engine.images;
          pattern = J.createPatternFromImage$2$x(t7, t6.$index(t6, "level" + t), "repeat");
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.set$globalCompositeOperation$x(tempContext[t], "source-in");
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.set$fillStyle$x(tempContext[t], pattern);
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.save$0$x(tempContext[t]);
          t6 = C.JSNumber_methods.toInt$0(Math.floor(iS * t1));
          if (typeof jS !== "number")
            throw jS.$mul();
          translation = new U.Vector(t6, C.JSNumber_methods.toInt$0(Math.floor(jS * t1)));
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          t6 = tempContext[t];
          t7 = translation.x;
          if (typeof t7 !== "number")
            throw t7.$negate();
          t9 = translation.y;
          if (typeof t9 !== "number")
            throw t9.$negate();
          J.translate$2$x(t6, -t7, -t9);
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.fillRect$4$x(tempContext[t], translation.x, translation.y, t1, t1);
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.restore$0$x(tempContext[t]);
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          J.set$globalCompositeOperation$x(tempContext[t], "source-over");
          if (t5) {
            if (index === indexAbove)
              continue;
            if (indexAbove === 5 || indexAbove === 7 || indexAbove === 10 || indexAbove === 11 || indexAbove === 13 || indexAbove === 14 || indexAbove === 15)
              continue;
          }
          if (t >= tempContext.length)
            throw H.ioore(tempContext, t);
          t5 = tempContext[t];
          t6 = $.engine.images;
          J.drawImageScaledFromSource$9$x(t5, t6.$index(t6, "borders"), t8 + 2, 2, t3, t3, 0, 0, t3, t3);
          indexAbove = index;
        }
        t5 = $.engine.canvas;
        t5 = t5.$index(t5, "levelbuffer").get$context();
        if (typeof iS !== "number")
          throw iS.$mul();
        t6 = iS * t1;
        if (typeof jS !== "number")
          throw jS.$mul();
        t7 = jS * t1;
        J.clearRect$4$x(t5, t6, t7, t1, t1);
        for (t = 0; t < 10; ++t) {
          t5 = $.engine.canvas;
          t5 = t5.$index(t5, "levelbuffer").get$context();
          if (t >= tempCanvas.length)
            throw H.ioore(tempCanvas, t);
          J.drawImageScaledFromSource$9$x(t5, tempCanvas[t], 0, 0, t1, t1, t6, t7, t1, t1);
        }
      }
    }
    this.copyTerrain$0();
  },
  getNeighbours$2: function(node, target) {
    var neighbours, t1, t2, t3, allowedDistance, allowedDistance0, centerI, centerNode, i, t4, t5, distance;
    neighbours = P.List_List(null, null);
    for (t1 = this.buildings, t2 = J.getInterceptor$x(node), t3 = this.tileSize, allowedDistance = 10 * t3, allowedDistance0 = 20 * t3, centerI = null, centerNode = null, i = 0; i < t1.length; ++i)
      if (!J.$eq(J.get$position$x(t1[i]), t2.get$position(node))) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t3 = t1[i];
        if (J.get$status$x(t3) === "IDLE") {
          if (t3 == null ? target != null : t3 !== target) {
            if (i >= t1.length)
              throw H.ioore(t1, i);
            t3 = t1[i].get$built();
          } else
            t3 = true;
          if (t3) {
            if (i >= t1.length)
              throw H.ioore(t1, i);
            centerI = t1[i].getCenter$0();
            centerNode = node.getCenter$0();
            t3 = centerNode.x;
            t4 = centerI.x;
            if (typeof t3 !== "number")
              throw t3.$sub();
            if (typeof t4 !== "number")
              throw H.iae(t4);
            t3 = Math.pow(t3 - t4, 2);
            t4 = centerNode.y;
            t5 = centerI.y;
            if (typeof t4 !== "number")
              throw t4.$sub();
            if (typeof t5 !== "number")
              throw H.iae(t5);
            t4 = Math.pow(t4 - t5, 2);
            distance = Math.sqrt(t3 + t4);
            if (node.get$imageID() === "relay") {
              if (i >= t1.length)
                throw H.ioore(t1, i);
              t3 = t1[i].get$imageID() === "relay";
            } else
              t3 = false;
            if (distance <= (t3 ? allowedDistance0 : allowedDistance)) {
              if (i >= t1.length)
                throw H.ioore(t1, i);
              neighbours.push(t1[i]);
            }
          }
        }
      }
    return neighbours;
  },
  findRoute$1: function(packet) {
    var routes, t1, route, t2, t3, oldRoute, neighbours, newRoutes, i, newRoute, centerA, centerB, t4, centerC, j;
    routes = P.List_List(null, U.Route);
    H.setRuntimeTypeInfo(routes, [U.Route]);
    t1 = P.List_List(null, U.Building);
    H.setRuntimeTypeInfo(t1, [U.Building]);
    route = new U.Route(0, 0, t1, false);
    route.nodes.push(packet.currentTarget);
    routes.push(route);
    for (; routes.length > 0;) {
      t1 = routes[0].nodes;
      t2 = t1.length;
      t3 = t2 - 1;
      if (t3 < 0)
        throw H.ioore(t1, t3);
      if (J.$eq(t1[t3], packet.target))
        break;
      oldRoute = C.JSArray_methods.removeAt$1(routes, 0);
      t1 = oldRoute.nodes;
      t2 = t1.length;
      t3 = t2 - 1;
      if (t3 < 0)
        throw H.ioore(t1, t3);
      neighbours = this.getNeighbours$2(t1[t3], packet.target);
      for (newRoutes = 0, i = 0; i < neighbours.length; ++i)
        if (!oldRoute.contains$1(oldRoute, neighbours[i])) {
          ++newRoutes;
          newRoute = oldRoute.clone$0(oldRoute);
          t1 = newRoute.nodes;
          if (i >= neighbours.length)
            throw H.ioore(neighbours, i);
          t1.push(neighbours[i]);
          t2 = t1.length;
          t3 = t2 - 1;
          if (t3 < 0)
            throw H.ioore(t1, t3);
          centerA = t1[t3].getCenter$0();
          t3 = t1.length;
          t2 = t3 - 2;
          if (t2 < 0)
            throw H.ioore(t1, t2);
          centerB = t1[t2].getCenter$0();
          t2 = newRoute.distanceTravelled;
          t1 = centerA.x;
          t3 = centerB.x;
          if (typeof t1 !== "number")
            throw t1.$sub();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t1 = Math.pow(t1 - t3, 2);
          t3 = centerA.y;
          t4 = centerB.y;
          if (typeof t3 !== "number")
            throw t3.$sub();
          if (typeof t4 !== "number")
            throw H.iae(t4);
          t3 = Math.pow(t3 - t4, 2);
          newRoute.distanceTravelled = t2 + Math.sqrt(t1 + t3);
          centerC = packet.target.getCenter$0();
          t1 = centerA.x;
          t2 = centerC.x;
          if (typeof t1 !== "number")
            throw t1.$sub();
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t1 = Math.pow(t1 - t2, 2);
          t2 = centerA.y;
          t3 = centerC.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t2 = Math.pow(t2 - t3, 2);
          newRoute.distanceRemaining = Math.sqrt(t1 + t2);
          routes.push(newRoute);
        }
      for (i = 0; t1 = routes.length, i < t1; ++i)
        for (j = 0; t1 = routes.length, j < t1; ++j)
          if (i !== j) {
            if (i >= t1)
              throw H.ioore(routes, i);
            t1 = routes[i].nodes;
            t2 = t1.length;
            t3 = t2 - 1;
            if (t3 < 0)
              throw H.ioore(t1, t3);
            t3 = t1[t3];
            t1 = routes[j].nodes;
            t2 = t1.length;
            t4 = t2 - 1;
            if (t4 < 0)
              throw H.ioore(t1, t4);
            if (J.$eq(t3, t1[t4])) {
              t1 = routes.length;
              if (i >= t1)
                throw H.ioore(routes, i);
              t2 = routes[i];
              t3 = t2.distanceTravelled;
              if (j >= t1)
                throw H.ioore(routes, j);
              t1 = routes[j];
              t4 = t1.distanceTravelled;
              if (t3 < t4)
                t1.remove = true;
              else if (t3 > t4)
                t2.remove = true;
            }
          }
      for (i = t1 - 1; i >= 0; --i) {
        if (i >= routes.length)
          throw H.ioore(routes, i);
        if (routes[i].remove)
          C.JSArray_methods.removeAt$1(routes, i);
      }
      t1 = new U.Game_findRoute_closure();
      t2 = routes.length - 1;
      if (t2 - 0 <= 32)
        H.Sort__insertionSort(routes, 0, t2, t1);
      else
        H.Sort__dualPivotQuicksort(routes, 0, t2, t1);
    }
    if (routes.length > 0) {
      t1 = routes[0].nodes;
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      t2 = t1[1];
      if (t2.get$imageID() === "relay")
        packet.speedMultiplier = 2;
      else
        packet.speedMultiplier = 1;
      if (packet.type === "collection")
        packet.speedMultiplier = packet.speedMultiplier / 4;
      if (0 >= routes.length)
        throw H.ioore(routes, 0);
      if (1 >= t1.length)
        throw H.ioore(t1, 1);
      packet.currentTarget = t2;
    } else {
      packet.currentTarget = null;
      t1 = packet.type;
      if (t1 === "energy") {
        t1 = packet.target;
        t1.energyRequests = t1.energyRequests - 4;
        t1 = packet.target;
        if (t1.energyRequests < 0)
          t1.energyRequests = 0;
      } else if (t1 === "health") {
        t1 = packet.target;
        t1.healthRequests = t1.healthRequests - 1;
        t1 = packet.target;
        if (t1.healthRequests < 0)
          t1.healthRequests = 0;
      }
      packet.remove = true;
    }
  },
  queuePacket$2: function(target, type) {
    var img, packet, t1, t2;
    img = "packet_" + type;
    packet = new U.Packet(this.base.getCenter$0(), new U.Vector(0, 0), img, type, false, 1, null, null);
    packet.target = target;
    packet.currentTarget = this.base;
    this.findRoute$1(packet);
    if (packet.currentTarget != null) {
      t1 = packet.type;
      if (t1 === "health") {
        t2 = packet.target;
        t2.healthRequests = t2.healthRequests + 1;
      }
      if (t1 === "energy") {
        t1 = packet.target;
        t1.energyRequests = t1.energyRequests + 4;
      }
      this.packetQueue.push(packet);
    }
  },
  canBePlaced$3: function(position, size, building) {
    var t1, t2, t3, height, t4, i, collision, t5, t6, t7, t8, buildingRect, currentRect, j, tileHeight;
    t1 = position.x;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > -1) {
      t2 = this.world.size;
      t3 = t2.x;
      if (typeof t3 !== "number")
        throw t3.$sub();
      if (typeof size !== "number")
        throw H.iae(size);
      if (t1 < t3 - size + 1) {
        t3 = position.y;
        if (typeof t3 !== "number")
          throw t3.$gt();
        if (t3 > -1) {
          t2 = t2.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          t2 = t3 < t2 - size + 1;
        } else
          t2 = false;
      } else
        t2 = false;
    } else
      t2 = false;
    if (t2) {
      t2 = $.game.world.tiles;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      height = J.get$height$x(J.$index$asx(t2[t1], position.y));
      for (t1 = this.buildings, t2 = this.tileSize, t3 = building != null, t4 = J.getInterceptor(building), i = 0; collision = false, i < t1.length; ++i) {
        t5 = t1[i];
        if (J.get$status$x(t5) !== "IDLE")
          continue;
        if (t3 && t4.$eq(building, t5))
          continue;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t5 = J.get$x$x(J.get$position$x(t1[i]));
        if (typeof t5 !== "number")
          throw t5.$mul();
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t6 = J.get$y$x(J.get$position$x(t1[i]));
        if (typeof t6 !== "number")
          throw t6.$mul();
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t7 = J.get$size$x(t1[i]);
        if (typeof t7 !== "number")
          throw t7.$mul();
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t8 = J.get$size$x(t1[i]);
        if (typeof t8 !== "number")
          throw t8.$mul();
        buildingRect = new P.Rectangle(t5 * t2, t6 * t2, t7 * t2 - 1, t8 * t2 - 1);
        buildingRect.$builtinTypeInfo = [null];
        t5 = position.x;
        if (typeof t5 !== "number")
          throw t5.$mul();
        t6 = position.y;
        if (typeof t6 !== "number")
          throw t6.$mul();
        if (typeof size !== "number")
          throw size.$mul();
        t7 = size * t2 - 1;
        currentRect = new P.Rectangle(t5 * t2, t6 * t2, t7, t7);
        currentRect.$builtinTypeInfo = [null];
        if (currentRect.intersects$1(currentRect, buildingRect)) {
          collision = true;
          break;
        }
      }
      if (!collision) {
        i = position.x;
        collision = false;
        while (true) {
          t1 = position.x;
          if (typeof t1 !== "number")
            throw t1.$add();
          if (typeof size !== "number")
            throw H.iae(size);
          if (typeof i !== "number")
            throw i.$lt();
          if (!(i < t1 + size))
            break;
          j = position.y;
          while (true) {
            t1 = position.y;
            if (typeof t1 !== "number")
              throw t1.$add();
            if (typeof j !== "number")
              throw j.$lt();
            if (!(j < t1 + size))
              break;
            if (this.withinWorld$2(i, j)) {
              t1 = $.game.world.tiles;
              if (i >>> 0 !== i || i >= t1.length)
                throw H.ioore(t1, i);
              tileHeight = J.get$height$x(J.$index$asx(t1[i], j));
              if (typeof tileHeight !== "number")
                throw tileHeight.$lt();
              if (tileHeight < 0) {
                collision = true;
                break;
              }
              if (tileHeight !== height) {
                collision = true;
                break;
              }
              t1 = this.world.tiles;
              if (i >= t1.length)
                throw H.ioore(t1, i);
              if (J.get$index$x(J.$index$asx(t1[i], j)) !== 7) {
                t1 = this.world.tiles;
                if (i >= t1.length)
                  throw H.ioore(t1, i);
                if (J.get$index$x(J.$index$asx(t1[i], j)) !== 11) {
                  t1 = this.world.tiles;
                  if (i >= t1.length)
                    throw H.ioore(t1, i);
                  if (J.get$index$x(J.$index$asx(t1[i], j)) !== 13) {
                    t1 = this.world.tiles;
                    if (i >= t1.length)
                      throw H.ioore(t1, i);
                    if (J.get$index$x(J.$index$asx(t1[i], j)) !== 14) {
                      t1 = this.world.tiles;
                      if (i >= t1.length)
                        throw H.ioore(t1, i);
                      t1 = J.get$index$x(J.$index$asx(t1[i], j)) === 15;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
              if (!t1) {
                collision = true;
                break;
              }
            }
            ++j;
          }
          ++i;
        }
      }
    } else
      collision = true;
    return !collision;
  },
  updateCreeper$0: function() {
    var t1, t2, i, i0, j, t3, t4, t5, j0;
    t1 = $.Emitter_counter;
    if (typeof t1 !== "number")
      throw t1.$add();
    $.Emitter_counter = t1 + 1;
    t1 = $.Emitter_counter;
    t2 = this.speed;
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (t1 >= 25 / t2) {
      for (t1 = this.emitters, i = 0; i < t1.length; ++i)
        t1[i].spawn$0();
      $.Emitter_counter = 0;
    }
    this.creeperCounter = this.creeperCounter + 1;
    t1 = this.creeperCounter;
    t2 = 25 / this.speed;
    if (t1 > t2) {
      this.creeperCounter = t1 - t2;
      i = 0;
      while (true) {
        t1 = this.world.size.x;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(i < t1))
          break;
        t1 = i - 1;
        t2 = t1 > -1;
        i0 = i + 1;
        j = 0;
        while (true) {
          t3 = this.world;
          t4 = t3.size;
          t5 = t4.y;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (!(j < t5))
            break;
          t4 = t4.x;
          if (typeof t4 !== "number")
            throw H.iae(t4);
          if (i0 < t4) {
            t3 = t3.tiles;
            if (i >= t3.length)
              throw H.ioore(t3, i);
            t3 = J.$index$asx(t3[i], j);
            t4 = this.world.tiles;
            if (i0 >= t4.length)
              throw H.ioore(t4, i0);
            this.transferCreeper$2(t3, J.$index$asx(t4[i0], j));
          }
          if (t2) {
            t3 = this.world.tiles;
            if (i >= t3.length)
              throw H.ioore(t3, i);
            t3 = J.$index$asx(t3[i], j);
            t4 = this.world.tiles;
            if (t1 >= t4.length)
              throw H.ioore(t4, t1);
            this.transferCreeper$2(t3, J.$index$asx(t4[t1], j));
          }
          j0 = j + 1;
          t3 = this.world;
          t4 = t3.size.y;
          if (typeof t4 !== "number")
            throw H.iae(t4);
          if (j0 < t4) {
            t3 = t3.tiles;
            if (i >= t3.length)
              throw H.ioore(t3, i);
            t3 = J.$index$asx(t3[i], j);
            t4 = this.world.tiles;
            if (i >= t4.length)
              throw H.ioore(t4, i);
            this.transferCreeper$2(t3, J.$index$asx(t4[i], j0));
          }
          t3 = j - 1;
          if (t3 > -1) {
            t4 = this.world.tiles;
            if (i >= t4.length)
              throw H.ioore(t4, i);
            t4 = J.$index$asx(t4[i], j);
            t5 = this.world.tiles;
            if (i >= t5.length)
              throw H.ioore(t5, i);
            this.transferCreeper$2(t4, J.$index$asx(t5[i], t3));
          }
          j = j0;
        }
        i = i0;
      }
      i = 0;
      while (true) {
        t1 = this.world.size.x;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(i < t1))
          break;
        j = 0;
        while (true) {
          t1 = this.world;
          t2 = t1.size.y;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(j < t2))
            break;
          t1 = t1.tiles;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          if (J.$index$asx(t1[i], j).get$newcreep() > 10) {
            t1 = this.world.tiles;
            if (i >= t1.length)
              throw H.ioore(t1, i);
            J.$index$asx(t1[i], j).set$newcreep(10);
          } else {
            t1 = this.world.tiles;
            if (i >= t1.length)
              throw H.ioore(t1, i);
            if (J.$index$asx(t1[i], j).get$newcreep() < 0.01) {
              t1 = this.world.tiles;
              if (i >= t1.length)
                throw H.ioore(t1, i);
              J.$index$asx(t1[i], j).set$newcreep(0);
            }
          }
          t1 = this.world.tiles;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          t1 = J.$index$asx(t1[i], j);
          t2 = this.world.tiles;
          if (i >= t2.length)
            throw H.ioore(t2, i);
          t1.set$creep(J.$index$asx(t2[i], j).get$newcreep());
          ++j;
        }
        ++i;
      }
    }
  },
  transferCreeper$2: function(source, target) {
    var t1, sourceCreeper, sourceTotal, targetTotal, delta, adjustedDelta;
    t1 = J.get$height$x(source);
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > -1) {
      t1 = J.get$height$x(target);
      if (typeof t1 !== "number")
        throw t1.$gt();
      t1 = t1 > -1;
    } else
      t1 = false;
    if (t1) {
      sourceCreeper = source.get$creep();
      if (sourceCreeper > 0) {
        sourceTotal = J.$add$ns(source.height, source.creep);
        targetTotal = J.$add$ns(J.get$height$x(target), target.get$creep());
        if (typeof sourceTotal !== "number")
          throw sourceTotal.$gt();
        if (typeof targetTotal !== "number")
          throw H.iae(targetTotal);
        if (sourceTotal > targetTotal) {
          delta = sourceTotal - targetTotal;
          adjustedDelta = (delta > sourceCreeper ? sourceCreeper : delta) * 0.2;
          source.newcreep = source.newcreep - adjustedDelta;
          target.newcreep = target.newcreep + adjustedDelta;
        }
      }
    }
  },
  updateEnergyElement$0: function() {
    J.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + C.JSInt_methods.toString$0(this.currentEnergy) + "/" + C.JSInt_methods.toString$0(this.maxEnergy));
  },
  updateSpeedElement$0: function() {
    J.set$innerHtml$x(document.querySelector("#speed"), "Speed: " + C.JSNumber_methods.toString$0(this.speed) + "x");
  },
  updateZoomElement$0: function() {
    J.set$innerHtml$x(document.querySelector("#speed"), "Zoom: " + H.S(J.toString$0(this.zoom)) + "x");
  },
  updateCollection$2: function(collector, action) {
    var t1, t2, t3, height, centerBuilding, t4, t5, t6, i, j, t7, t8, positionCurrent, positionCurrentCenter, t9, tileHeight, k, heightK, centerBuildingK, t10;
    t1 = $.game.world.tiles;
    t2 = collector.position;
    t3 = t2.x;
    if (t3 >>> 0 !== t3 || t3 >= t1.length)
      throw H.ioore(t1, t3);
    height = J.get$height$x(J.$index$asx(t1[t3], t2.y));
    centerBuilding = collector.getCenter$0();
    for (t1 = action === "remove", t2 = action === "add", t3 = this.tileSize, t4 = t3 / 2, t5 = this.buildings, t6 = t3 * 6, i = -5; i < 7; ++i)
      for (j = -5; j < 7; ++j) {
        t7 = collector.position;
        t8 = t7.x;
        if (typeof t8 !== "number")
          throw t8.$add();
        t7 = t7.y;
        if (typeof t7 !== "number")
          throw t7.$add();
        positionCurrent = new U.Vector(t8 + i, t7 + j);
        if (this.withinWorld$2(positionCurrent.x, positionCurrent.y)) {
          t7 = positionCurrent.x;
          if (typeof t7 !== "number")
            throw t7.$mul();
          t8 = positionCurrent.y;
          if (typeof t8 !== "number")
            throw t8.$mul();
          positionCurrentCenter = new U.Vector(t7 * t3 + t4, t8 * t3 + t4);
          t9 = $.game.world.tiles;
          if (t7 >>> 0 !== t7 || t7 >= t9.length)
            throw H.ioore(t9, t7);
          tileHeight = J.get$height$x(J.$index$asx(t9[t7], t8));
          if (t2) {
            t7 = positionCurrentCenter.x;
            t8 = centerBuilding.x;
            if (typeof t7 !== "number")
              throw t7.$sub();
            if (typeof t8 !== "number")
              throw H.iae(t8);
            t7 = Math.pow(t7 - t8, 2);
            t8 = positionCurrentCenter.y;
            t9 = centerBuilding.y;
            if (typeof t8 !== "number")
              throw t8.$sub();
            if (typeof t9 !== "number")
              throw H.iae(t9);
            t8 = Math.pow(t8 - t9, 2);
            if (t7 + t8 < Math.pow(t6, 2))
              if (J.$eq(tileHeight, height)) {
                t7 = this.world.tiles;
                t8 = positionCurrent.x;
                if (t8 >>> 0 !== t8 || t8 >= t7.length)
                  throw H.ioore(t7, t8);
                J.$index$asx(t7[t8], positionCurrent.y).set$collector(collector);
              }
          } else if (t1) {
            t7 = positionCurrentCenter.x;
            t8 = centerBuilding.x;
            if (typeof t7 !== "number")
              throw t7.$sub();
            if (typeof t8 !== "number")
              throw H.iae(t8);
            t7 = Math.pow(t7 - t8, 2);
            t8 = positionCurrentCenter.y;
            t9 = centerBuilding.y;
            if (typeof t8 !== "number")
              throw t8.$sub();
            if (typeof t9 !== "number")
              throw H.iae(t9);
            t8 = Math.pow(t8 - t9, 2);
            if (t7 + t8 < Math.pow(t6, 2))
              if (J.$eq(tileHeight, height)) {
                t7 = this.world.tiles;
                t8 = positionCurrent.x;
                if (t8 >>> 0 !== t8 || t8 >= t7.length)
                  throw H.ioore(t7, t8);
                J.$index$asx(t7[t8], positionCurrent.y).set$collector(null);
              }
            for (t7 = J.getInterceptor(tileHeight), k = 0; k < t5.length; ++k) {
              if (!J.$eq(t5[k], collector)) {
                if (k >= t5.length)
                  throw H.ioore(t5, k);
                t8 = t5[k].get$imageID() === "collector";
              } else
                t8 = false;
              if (t8) {
                t8 = $.game.world.tiles;
                if (k >= t5.length)
                  throw H.ioore(t5, k);
                t9 = J.get$x$x(J.get$position$x(t5[k]));
                if (t9 >>> 0 !== t9 || t9 >= t8.length)
                  throw H.ioore(t8, t9);
                t9 = t8[t9];
                if (k >= t5.length)
                  throw H.ioore(t5, k);
                heightK = J.get$height$x(J.$index$asx(t9, J.get$y$x(J.get$position$x(t5[k]))));
                if (k >= t5.length)
                  throw H.ioore(t5, k);
                centerBuildingK = t5[k].getCenter$0();
                t8 = positionCurrentCenter.x;
                t9 = centerBuildingK.x;
                if (typeof t8 !== "number")
                  throw t8.$sub();
                if (typeof t9 !== "number")
                  throw H.iae(t9);
                t8 = Math.pow(t8 - t9, 2);
                t9 = positionCurrentCenter.y;
                t10 = centerBuildingK.y;
                if (typeof t9 !== "number")
                  throw t9.$sub();
                if (typeof t10 !== "number")
                  throw H.iae(t10);
                t9 = Math.pow(t9 - t10, 2);
                if (t8 + t9 < Math.pow(t6, 2))
                  if (t7.$eq(tileHeight, heightK)) {
                    t8 = this.world.tiles;
                    t9 = positionCurrent.x;
                    if (t9 >>> 0 !== t9 || t9 >= t8.length)
                      throw H.ioore(t8, t9);
                    t9 = J.$index$asx(t8[t9], positionCurrent.y);
                    if (k >= t5.length)
                      throw H.ioore(t5, k);
                    t9.set$collector(t5[k]);
                  }
              }
            }
          }
        }
      }
    this.drawCollection$0();
  },
  updatePacketQueue$0: function() {
    var t1, i, t2, t3;
    for (t1 = this.packetQueue, i = t1.length - 1, t2 = this.packets; i >= 0; --i) {
      t3 = this.currentEnergy;
      if (t3 > 0) {
        this.currentEnergy = t3 - 1;
        J.set$innerHtml$x(document.querySelector("#energy"), "Energy: " + C.JSInt_methods.toString$0(this.currentEnergy) + "/" + C.JSInt_methods.toString$0(this.maxEnergy));
        t2.push(C.JSArray_methods.removeAt$1(t1, 0));
      }
    }
  },
  updateBuildings$0: function() {
    var t1, i, t2, t3;
    for (t1 = this.buildings, i = 0; i < t1.length; ++i) {
      t1[i].move$0();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].checkOperating$0();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].shield$0();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].requestPacket$0();
    }
    $.Building_damageCounter = $.Building_damageCounter + 1;
    if ($.Building_damageCounter > 10) {
      $.Building_damageCounter = 0;
      for (i = 0; i < t1.length; ++i)
        t1[i].takeDamage$0();
    }
    this.collectCounter = this.collectCounter + 1;
    t2 = this.collectCounter;
    t3 = 250 / this.speed;
    if (t2 > t3) {
      this.collectCounter = t2 - t3;
      for (i = 0; i < t1.length; ++i)
        t1[i].collectEnergy$0();
    }
  },
  updatePackets$0: function() {
    var t1, i, t2;
    for (t1 = this.packets, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      if (t2.remove)
        C.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateShells$0: function() {
    var t1, i, t2;
    for (t1 = this.shells, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      if (t2.remove)
        C.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateProjectiles$0: function() {
    var t1, i, t2;
    for (t1 = this.projectiles, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      if (t2.remove)
        C.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateSpores$0: function() {
    var t1, i, t2;
    for (t1 = this.spores, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      if (t2.remove)
        C.JSArray_methods.removeAt$1(t1, i);
      else
        t2.move$0();
    }
  },
  updateSmokes$0: function() {
    var t1, i, t2, t3;
    t1 = $.Smoke_counter;
    if (typeof t1 !== "number")
      throw t1.$add();
    $.Smoke_counter = t1 + 1;
    t1 = $.Smoke_counter;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 3) {
      $.Smoke_counter = 0;
      for (t1 = this.smokes, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2 = t1[i];
        t3 = t2.frame;
        if (t3 === 36)
          C.JSArray_methods.removeAt$1(t1, i);
        else
          t2.frame = t3 + 1;
      }
    }
  },
  updateExplosions$0: function() {
    var t1, i, t2, t3;
    t1 = $.Explosion_counter;
    if (typeof t1 !== "number")
      throw t1.$add();
    $.Explosion_counter = t1 + 1;
    if ($.Explosion_counter === 1) {
      $.Explosion_counter = 0;
      for (t1 = this.explosions, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t2 = t1[i];
        t3 = t2.frame;
        if (t3 === 44)
          C.JSArray_methods.removeAt$1(t1, i);
        else
          t2.frame = t3 + 1;
      }
    }
  },
  updateShips$0: function() {
    var t1, i;
    for (t1 = this.ships, i = 0; i < t1.length; ++i)
      t1[i].move$0();
  },
  update$0: function() {
    var t1, t2, emittersChecked, i, t3;
    for (t1 = this.emitters, t2 = t1.length, emittersChecked = 0, i = 0; i < t2; ++i)
      if (t1[i].building != null)
        ++emittersChecked;
    if (emittersChecked === t2) {
      J.set$display$x(document.querySelector("#win").style, "block");
      t1 = this.stopwatch;
      t1.stop$0(t1);
      this.running.cancel$0();
    }
    for (t1 = this.buildings, i = 0; i < t1.length; ++i)
      t1[i].updateHoverState$0();
    for (t1 = this.ships, i = 0; i < t1.length; ++i)
      t1[i].updateHoverState$0();
    for (t1 = this.sporetowers, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      t2.sporeCounter = t2.sporeCounter - 1;
      if (t2.sporeCounter <= 0) {
        $.engine.toString;
        t2.sporeCounter = (Math.random() * 5001 >>> 0) + 7500;
        t2.spawn$0();
      }
    }
    if (!this.paused) {
      this.updatePacketQueue$0();
      this.updateSpores$0();
      this.updateCreeper$0();
      this.updateShells$0();
      this.updateProjectiles$0();
      this.updateBuildings$0();
      this.updatePackets$0();
      this.updateSmokes$0();
      this.updateExplosions$0();
      this.updateShips$0();
    }
    if (this.scrollingLeft) {
      t1 = this.scroll;
      t2 = t1.x;
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > 0)
        t1.x = t2 - 1;
    } else if (this.scrollingRight) {
      t1 = this.scroll;
      t2 = t1.x;
      t3 = this.world.size.x;
      if (typeof t2 !== "number")
        throw t2.$lt();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t2 < t3)
        t1.x = t2 + 1;
    }
    if (this.scrollingUp) {
      t1 = this.scroll;
      t2 = t1.y;
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > 0)
        t1.y = t2 - 1;
    } else if (this.scrollingDown) {
      t1 = this.scroll;
      t2 = t1.y;
      t3 = this.world.size.y;
      if (typeof t2 !== "number")
        throw t2.$lt();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t2 < t3)
        t1.y = t2 + 1;
    }
    if (this.scrollingLeft || this.scrollingRight || this.scrollingUp || this.scrollingDown) {
      this.copyTerrain$0();
      this.drawCollection$0();
    }
  },
  drawRangeBoxes$4: function(position, type, rad, size) {
    var t1, context, t2, t3, t4, t5, positionCenter, positionHeight, radius, i, t6, t7, t8, i0, j, t9, t10, positionCurrent, positionCurrentCenter, drawPositionCurrent, positionCurrentHeight, t11;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    t1 = position.x;
    t2 = this.tileSize;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t3 = t2 / 2;
    t4 = t3 * size;
    t5 = position.y;
    if (typeof t5 !== "number")
      throw t5.$mul();
    positionCenter = new U.Vector(t1 * t2 + t4, t5 * t2 + t4);
    t4 = $.game.world.tiles;
    if (t1 >>> 0 !== t1 || t1 >= t4.length)
      throw H.ioore(t4, t1);
    positionHeight = J.get$height$x(J.$index$asx(t4[t1], t5));
    if (this.canBePlaced$3(position, size, null))
      t1 = type === "collector" || type === "cannon" || type === "mortar" || type === "shield" || type === "beam" || type === "terp";
    else
      t1 = false;
    if (t1) {
      J.save$0$x(context);
      context.globalAlpha = 0.25;
      radius = rad * t2;
      for (i = -radius, t1 = type !== "mortar", t4 = type === "cannon", t5 = type === "collector", t6 = type !== "shield", t7 = type !== "beam", t8 = type === "terp", i0 = i; i0 < radius; ++i0)
        for (j = i; j < radius; ++j) {
          t9 = position.x;
          if (typeof t9 !== "number")
            throw t9.$add();
          t10 = position.y;
          if (typeof t10 !== "number")
            throw t10.$add();
          positionCurrent = new U.Vector(t9 + i0, t10 + j);
          t10 = positionCurrent.x;
          if (typeof t10 !== "number")
            throw t10.$mul();
          t9 = positionCurrent.y;
          if (typeof t9 !== "number")
            throw t9.$mul();
          positionCurrentCenter = new U.Vector(t10 * t2 + t3, t9 * t2 + t3);
          drawPositionCurrent = positionCurrent.tiled2screen$0();
          if (this.withinWorld$2(positionCurrent.x, positionCurrent.y)) {
            t9 = $.game.world.tiles;
            t10 = positionCurrent.x;
            if (t10 >>> 0 !== t10 || t10 >= t9.length)
              throw H.ioore(t9, t10);
            positionCurrentHeight = J.get$height$x(J.$index$asx(t9[t10], positionCurrent.y));
            t9 = positionCurrentCenter.x;
            t10 = positionCenter.x;
            if (typeof t9 !== "number")
              throw t9.$sub();
            if (typeof t10 !== "number")
              throw H.iae(t10);
            t9 = Math.pow(t9 - t10, 2);
            t10 = positionCurrentCenter.y;
            t11 = positionCenter.y;
            if (typeof t10 !== "number")
              throw t10.$sub();
            if (typeof t11 !== "number")
              throw H.iae(t11);
            t10 = Math.pow(t10 - t11, 2);
            if (t9 + t10 < Math.pow(radius, 2)) {
              if (t5)
                if (J.$eq(positionCurrentHeight, positionHeight))
                  context.fillStyle = "#fff";
                else
                  context.fillStyle = "#f00";
              else if (t4) {
                if (typeof positionCurrentHeight !== "number")
                  throw positionCurrentHeight.$le();
                if (typeof positionHeight !== "number")
                  throw H.iae(positionHeight);
                if (positionCurrentHeight <= positionHeight)
                  context.fillStyle = "#fff";
                else
                  context.fillStyle = "#f00";
              } else if (type === "mortar" || type === "shield" || type === "beam" || t8)
                context.fillStyle = "#fff";
              t9 = drawPositionCurrent.x;
              t10 = drawPositionCurrent.y;
              t11 = this.zoom;
              if (typeof t11 !== "number")
                throw H.iae(t11);
              t11 = t2 * t11;
              context.fillRect(t9, t10, t11, t11);
            }
          }
        }
      context.restore();
    }
  },
  drawCollection$0: function() {
    var t1, t2, t3, timesX, timesY, i, j, t4, t5, j0, t6, iS, jS, up, t7, t8, down, left, right, t9, t10, t11;
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "collection"));
    t1 = $.engine.canvas;
    J.save$0$x(t1.$index(t1, "collection").get$context());
    t1 = $.engine.canvas;
    J.set$globalAlpha$x(t1.$index(t1, "collection").get$context(), 0.5);
    t1 = $.engine.halfWidth;
    t2 = this.tileSize;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    timesX = C.JSNumber_methods.toInt$0(Math.ceil(t1 / t2 / t3));
    t3 = $.engine.halfHeight;
    if (typeof t3 !== "number")
      throw t3.$div();
    t1 = this.zoom;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    timesY = C.JSNumber_methods.toInt$0(Math.ceil(t3 / t2 / t1));
    for (i = -timesX, j = -timesY, t1 = this.scroll, t3 = t2 + 6, t4 = t3 + 3; i <= timesX; ++i)
      for (t5 = i * t2, j0 = j; j0 <= timesY; ++j0) {
        t6 = t1.x;
        if (typeof t6 !== "number")
          throw H.iae(t6);
        iS = i + t6;
        t6 = t1.y;
        if (typeof t6 !== "number")
          throw H.iae(t6);
        jS = j0 + t6;
        if (this.withinWorld$2(iS, jS)) {
          t6 = this.world.tiles;
          if (iS >>> 0 !== iS || iS >= t6.length)
            throw H.ioore(t6, iS);
          if (J.$index$asx(t6[iS], jS).get$collector() != null) {
            t6 = jS - 1;
            if (t6 < 0)
              up = 0;
            else {
              t7 = this.world.tiles;
              if (iS >= t7.length)
                throw H.ioore(t7, iS);
              up = J.$index$asx(t7[iS], t6).get$collector() != null ? 1 : 0;
            }
            t6 = jS + 1;
            t7 = this.world;
            t8 = t7.size.y;
            if (typeof t8 !== "number")
              throw t8.$sub();
            if (t6 > t8 - 1)
              down = 0;
            else {
              t7 = t7.tiles;
              if (iS >= t7.length)
                throw H.ioore(t7, iS);
              down = J.$index$asx(t7[iS], t6).get$collector() != null ? 1 : 0;
            }
            t6 = iS - 1;
            if (t6 < 0)
              left = 0;
            else {
              t7 = this.world.tiles;
              if (t6 >= t7.length)
                throw H.ioore(t7, t6);
              left = J.$index$asx(t7[t6], jS).get$collector() != null ? 1 : 0;
            }
            t6 = iS + 1;
            t7 = this.world;
            t8 = t7.size.x;
            if (typeof t8 !== "number")
              throw t8.$sub();
            if (t6 > t8 - 1)
              right = 0;
            else {
              t7 = t7.tiles;
              if (t6 >= t7.length)
                throw H.ioore(t7, t6);
              right = J.$index$asx(t7[t6], jS).get$collector() != null ? 1 : 0;
            }
            t6 = $.engine.canvas;
            t6 = t6.$index(t6, "collection").get$context();
            t7 = $.engine.images;
            t7 = t7.$index(t7, "mask");
            t8 = $.engine;
            t9 = t8.halfWidth;
            t10 = this.zoom;
            if (typeof t10 !== "number")
              throw H.iae(t10);
            if (typeof t9 !== "number")
              throw t9.$add();
            t8 = t8.halfHeight;
            if (typeof t8 !== "number")
              throw t8.$add();
            t11 = t2 * t10;
            J.drawImageScaledFromSource$9$x(t6, t7, (8 * down + 4 * left + 2 * up + right) * t3 + 3, t4, t2, t2, t9 + t5 * t10, t8 + j0 * t2 * t10, t11, t11);
          }
        }
      }
    t1 = $.engine.canvas;
    J.restore$0$x(t1.$index(t1, "collection").get$context());
  },
  drawCreeper$0: function() {
    var t1, t2, t3, timesX, timesY, i, j, j0, t4, iS, jS, height, t5, t6, t7, t8, t9, t10, t, t11, up, t12, down, left, right, t13, t14, t15, t16, ind, indexOk, index;
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "creeperbuffer"));
    t1 = $.engine.halfWidth;
    t2 = this.tileSize;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    timesX = C.JSNumber_methods.toInt$0(Math.ceil(t1 / t2 / t3));
    t3 = $.engine.halfHeight;
    if (typeof t3 !== "number")
      throw t3.$div();
    t1 = this.zoom;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    timesY = C.JSNumber_methods.toInt$0(Math.ceil(t3 / t2 / t1));
    for (i = -timesX, j = -timesY, t1 = this.scroll; i <= timesX; ++i)
      for (t3 = i * t2, j0 = j; j0 <= timesY; ++j0) {
        t4 = t1.x;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        iS = i + t4;
        t4 = t1.y;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        jS = j0 + t4;
        if (this.withinWorld$2(iS, jS)) {
          t4 = this.world.tiles;
          if (iS >>> 0 !== iS || iS >= t4.length)
            throw H.ioore(t4, iS);
          height = J.get$height$x(J.$index$asx(t4[iS], jS));
          for (t4 = iS + 1, t5 = iS - 1, t6 = t5 < 0, t7 = jS + 1, t8 = jS - 1, t9 = t8 < 0, t10 = j0 * t2, t = 0; t <= 9; ++t) {
            t11 = this.world.tiles;
            if (iS >= t11.length)
              throw H.ioore(t11, iS);
            if (J.$index$asx(t11[iS], jS).get$creep() > t) {
              if (t9)
                up = 0;
              else {
                t11 = this.world.tiles;
                if (iS >= t11.length)
                  throw H.ioore(t11, iS);
                if (!(J.$index$asx(t11[iS], t8).get$creep() > t)) {
                  t11 = this.world.tiles;
                  if (iS >= t11.length)
                    throw H.ioore(t11, iS);
                  t11 = J.get$height$x(J.$index$asx(t11[iS], t8));
                  if (typeof t11 !== "number")
                    throw t11.$gt();
                  if (typeof height !== "number")
                    throw H.iae(height);
                  t11 = t11 > height;
                } else
                  t11 = true;
                up = t11 ? 1 : 0;
              }
              t11 = this.world;
              t12 = t11.size.y;
              if (typeof t12 !== "number")
                throw t12.$sub();
              if (t7 > t12 - 1)
                down = 0;
              else {
                t11 = t11.tiles;
                if (iS >= t11.length)
                  throw H.ioore(t11, iS);
                if (!(J.$index$asx(t11[iS], t7).get$creep() > t)) {
                  t11 = this.world.tiles;
                  if (iS >= t11.length)
                    throw H.ioore(t11, iS);
                  t11 = J.get$height$x(J.$index$asx(t11[iS], t7));
                  if (typeof t11 !== "number")
                    throw t11.$gt();
                  if (typeof height !== "number")
                    throw H.iae(height);
                  t11 = t11 > height;
                } else
                  t11 = true;
                down = t11 ? 1 : 0;
              }
              if (t6)
                left = 0;
              else {
                t11 = this.world.tiles;
                if (t5 >= t11.length)
                  throw H.ioore(t11, t5);
                if (!(J.$index$asx(t11[t5], jS).get$creep() > t)) {
                  t11 = this.world.tiles;
                  if (t5 >= t11.length)
                    throw H.ioore(t11, t5);
                  t11 = J.get$height$x(J.$index$asx(t11[t5], jS));
                  if (typeof t11 !== "number")
                    throw t11.$gt();
                  if (typeof height !== "number")
                    throw H.iae(height);
                  t11 = t11 > height;
                } else
                  t11 = true;
                left = t11 ? 1 : 0;
              }
              t11 = this.world;
              t12 = t11.size.x;
              if (typeof t12 !== "number")
                throw t12.$sub();
              if (t4 > t12 - 1)
                right = 0;
              else {
                t11 = t11.tiles;
                if (t4 >= t11.length)
                  throw H.ioore(t11, t4);
                if (!(J.$index$asx(t11[t4], jS).get$creep() > t)) {
                  t11 = this.world.tiles;
                  if (t4 >= t11.length)
                    throw H.ioore(t11, t4);
                  t11 = J.get$height$x(J.$index$asx(t11[t4], jS));
                  if (typeof t11 !== "number")
                    throw t11.$gt();
                  if (typeof height !== "number")
                    throw H.iae(height);
                  t11 = t11 > height;
                } else
                  t11 = true;
                right = t11 ? 1 : 0;
              }
              t11 = $.engine.canvas;
              t11 = t11.$index(t11, "creeperbuffer").get$context();
              t12 = $.engine.images;
              t12 = t12.$index(t12, "creeper");
              t13 = $.engine;
              t14 = t13.halfWidth;
              t15 = this.zoom;
              if (typeof t15 !== "number")
                throw H.iae(t15);
              if (typeof t14 !== "number")
                throw t14.$add();
              t13 = t13.halfHeight;
              if (typeof t13 !== "number")
                throw t13.$add();
              t16 = t2 * t15;
              J.drawImageScaledFromSource$9$x(t11, t12, (8 * down + 4 * left + 2 * up + right) * t2, 0, t2, t2, t14 + t3 * t15, t13 + t10 * t15, t16, t16);
              continue;
            }
            if (t < 9) {
              t11 = this.world.tiles;
              if (iS >= t11.length)
                throw H.ioore(t11, iS);
              ind = J.get$index$x(J.$index$asx(t11[iS], jS));
              if (ind !== 5)
                if (ind !== 7) {
                  if (ind !== 10)
                    if (ind !== 11)
                      if (ind !== 13) {
                        t11 = ind !== 14;
                        t11 = t11 && t11;
                      } else
                        t11 = false;
                    else
                      t11 = false;
                  else
                    t11 = false;
                  indexOk = t11;
                } else
                  indexOk = false;
              else
                indexOk = false;
              if (t9)
                up = 0;
              else {
                t11 = this.world.tiles;
                if (iS >= t11.length)
                  throw H.ioore(t11, iS);
                if (J.$index$asx(t11[iS], t8).get$creep() > t)
                  if (indexOk) {
                    t11 = this.world.tiles;
                    if (iS >= t11.length)
                      throw H.ioore(t11, iS);
                    t11 = J.get$height$x(J.$index$asx(t11[iS], t8));
                    if (typeof t11 !== "number")
                      throw t11.$lt();
                    if (typeof height !== "number")
                      throw H.iae(height);
                    t11 = t11 < height;
                  } else
                    t11 = false;
                else
                  t11 = false;
                up = t11 ? 1 : 0;
              }
              t11 = this.world;
              t12 = t11.size.y;
              if (typeof t12 !== "number")
                throw t12.$sub();
              if (t7 > t12 - 1)
                down = 0;
              else {
                t11 = t11.tiles;
                if (iS >= t11.length)
                  throw H.ioore(t11, iS);
                if (J.$index$asx(t11[iS], t7).get$creep() > t)
                  if (indexOk) {
                    t11 = this.world.tiles;
                    if (iS >= t11.length)
                      throw H.ioore(t11, iS);
                    t11 = J.get$height$x(J.$index$asx(t11[iS], t7));
                    if (typeof t11 !== "number")
                      throw t11.$lt();
                    if (typeof height !== "number")
                      throw H.iae(height);
                    t11 = t11 < height;
                  } else
                    t11 = false;
                else
                  t11 = false;
                down = t11 ? 1 : 0;
              }
              if (t6)
                left = 0;
              else {
                t11 = this.world.tiles;
                if (t5 >= t11.length)
                  throw H.ioore(t11, t5);
                if (J.$index$asx(t11[t5], jS).get$creep() > t)
                  if (indexOk) {
                    t11 = this.world.tiles;
                    if (t5 >= t11.length)
                      throw H.ioore(t11, t5);
                    t11 = J.get$height$x(J.$index$asx(t11[t5], jS));
                    if (typeof t11 !== "number")
                      throw t11.$lt();
                    if (typeof height !== "number")
                      throw H.iae(height);
                    t11 = t11 < height;
                  } else
                    t11 = false;
                else
                  t11 = false;
                left = t11 ? 1 : 0;
              }
              t11 = this.world;
              t12 = t11.size.x;
              if (typeof t12 !== "number")
                throw t12.$sub();
              if (t4 > t12 - 1)
                right = 0;
              else {
                t11 = t11.tiles;
                if (t4 >= t11.length)
                  throw H.ioore(t11, t4);
                if (J.$index$asx(t11[t4], jS).get$creep() > t)
                  if (indexOk) {
                    t11 = this.world.tiles;
                    if (t4 >= t11.length)
                      throw H.ioore(t11, t4);
                    t11 = J.get$height$x(J.$index$asx(t11[t4], jS));
                    if (typeof t11 !== "number")
                      throw t11.$lt();
                    if (typeof height !== "number")
                      throw H.iae(height);
                    t11 = t11 < height;
                  } else
                    t11 = false;
                else
                  t11 = false;
                right = t11 ? 1 : 0;
              }
              index = 8 * down + 4 * left + 2 * up + right;
              if (index !== 0) {
                t11 = $.engine.canvas;
                t11 = t11.$index(t11, "creeperbuffer").get$context();
                t12 = $.engine.images;
                t12 = t12.$index(t12, "creeper");
                t13 = $.engine;
                t14 = t13.halfWidth;
                t15 = this.zoom;
                if (typeof t15 !== "number")
                  throw H.iae(t15);
                if (typeof t14 !== "number")
                  throw t14.$add();
                t13 = t13.halfHeight;
                if (typeof t13 !== "number")
                  throw t13.$add();
                t16 = t2 * t15;
                J.drawImageScaledFromSource$9$x(t11, t12, index * t2, 0, t2, t2, t14 + t3 * t15, t13 + t10 * t15, t16, t16);
              }
            }
          }
        }
      }
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "creeper"));
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "creeper").get$context();
    t2 = $.engine.canvas;
    J.drawImage$3$x(t1, t2.$index(t2, "creeperbuffer").get$element(), 0, 0);
  },
  drawPositionInfo$0: function() {
    var t1, context, t2, end, t3, t4, t5, delta, distance, buildingDistance, times, i, newX, newY, position, allowedDistance, allowedDistance0, t6, j, t7, positionScrolled, drawPosition, t8, t9, t10, t11, positionScrolledCenter, center, drawCenter, allowedDistance1, lineToTarget, k;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    this.ghosts = P.List_List(null, null);
    t1 = $.engine.mouse;
    t2 = t1.dragStart;
    if (t2 != null) {
      end = t1.dragEnd;
      t1 = end.x;
      t3 = t2.x;
      if (typeof t1 !== "number")
        throw t1.$sub();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t4 = end.y;
      t5 = t2.y;
      if (typeof t4 !== "number")
        throw t4.$sub();
      if (typeof t5 !== "number")
        throw H.iae(t5);
      delta = new U.Vector(t1 - t3, t4 - t5);
      distance = t2.distanceTo$1(end);
      t1 = this.symbols;
      t3 = this.activeSymbol;
      if (t3 >>> 0 !== t3 || t3 >= t1.length)
        throw H.ioore(t1, t3);
      t3 = t1[t3].imageID;
      if (t3 === "collector")
        buildingDistance = 9;
      else
        buildingDistance = t3 === "relay" ? 18 : 3;
      times = C.JSNumber_methods.toInt$0(Math.floor(distance / buildingDistance)) + 1;
      this.ghosts.push(t2);
      for (i = 1; i < times; ++i) {
        t1 = t2.x;
        t3 = delta.x;
        if (typeof t3 !== "number")
          throw t3.$div();
        if (typeof t1 !== "number")
          throw t1.$add();
        newX = C.JSNumber_methods.toInt$0(Math.floor(t1 + t3 / distance * i * buildingDistance));
        t3 = t2.y;
        t1 = delta.y;
        if (typeof t1 !== "number")
          throw t1.$div();
        if (typeof t3 !== "number")
          throw t3.$add();
        newY = C.JSNumber_methods.toInt$0(Math.floor(t3 + t1 / distance * i * buildingDistance));
        if (this.withinWorld$2(newX, newY))
          this.ghosts.push(new U.Vector(newX, newY));
      }
      if (this.withinWorld$2(end.x, end.y))
        this.ghosts.push(end);
    } else if (t1.active) {
      position = this.getHoveredTilePosition$0();
      if (this.withinWorld$2(position.x, position.y))
        this.ghosts.push(position);
    }
    for (t1 = this.tileSize, t2 = t1 / 2, t3 = this.symbols, t4 = t2 * 3, allowedDistance = 10 * t1, allowedDistance0 = 20 * t1, t5 = this.buildings, t6 = J.getInterceptor$x(context), j = 0; t7 = this.ghosts, j < t7.length; ++j) {
      t7 = t7[j];
      positionScrolled = new U.Vector(t7.x, t7.y);
      drawPosition = positionScrolled.tiled2screen$0();
      t7 = positionScrolled.x;
      if (typeof t7 !== "number")
        throw t7.$mul();
      t8 = this.activeSymbol;
      if (t8 >>> 0 !== t8 || t8 >= t3.length)
        throw H.ioore(t3, t8);
      t8 = t3[t8];
      t9 = t8.size;
      t10 = t2 * t9;
      t11 = positionScrolled.y;
      if (typeof t11 !== "number")
        throw t11.$mul();
      positionScrolledCenter = new U.Vector(t7 * t1 + t10, t11 * t1 + t10);
      this.drawRangeBoxes$4(positionScrolled, t8.imageID, t8.radius, t9);
      if (this.withinWorld$2(positionScrolled.x, positionScrolled.y)) {
        t6.save$0(context);
        context.globalAlpha = 0.5;
        t7 = $.engine.images;
        t8 = this.activeSymbol;
        if (t8 >>> 0 !== t8 || t8 >= t3.length)
          throw H.ioore(t3, t8);
        t8 = t7.$index(t7, t3[t8].imageID);
        t7 = drawPosition.x;
        t9 = drawPosition.y;
        t10 = this.activeSymbol;
        if (t10 >>> 0 !== t10 || t10 >= t3.length)
          throw H.ioore(t3, t10);
        t10 = t3[t10].size;
        t11 = this.zoom;
        if (typeof t11 !== "number")
          throw H.iae(t11);
        t11 = t10 * t1 * t11;
        context.drawImage(t8, t7, t9, t11, t11);
        t7 = this.activeSymbol;
        if (t7 >>> 0 !== t7 || t7 >= t3.length)
          throw H.ioore(t3, t7);
        if (t3[t7].imageID === "cannon") {
          t7 = $.engine.images;
          t7 = t7.$index(t7, "cannongun");
          t8 = drawPosition.x;
          t9 = drawPosition.y;
          t10 = this.zoom;
          if (typeof t10 !== "number")
            throw H.iae(t10);
          t10 = 48 * t10;
          context.drawImage(t7, t8, t9, t10, t10);
        }
        t7 = this.activeSymbol;
        if (t7 >>> 0 !== t7 || t7 >= t3.length)
          throw H.ioore(t3, t7);
        if (this.canBePlaced$3(positionScrolled, t3[t7].size, null))
          context.strokeStyle = "#0f0";
        else
          context.strokeStyle = "#f00";
        t7 = this.zoom;
        if (typeof t7 !== "number")
          throw H.iae(t7);
        context.lineWidth = 4 * t7;
        t7 = drawPosition.x;
        t8 = drawPosition.y;
        t9 = this.activeSymbol;
        if (t9 >>> 0 !== t9 || t9 >= t3.length)
          throw H.ioore(t3, t9);
        t9 = t3[t9].size;
        t10 = this.zoom;
        if (typeof t10 !== "number")
          throw H.iae(t10);
        t10 = t1 * t9 * t10;
        context.strokeRect(t7, t8, t10, t10);
        context.restore();
        for (i = 0; i < t5.length; ++i) {
          center = t5[i].getCenter$0();
          drawCenter = center.real2screen$0();
          if (i >= t5.length)
            throw H.ioore(t5, i);
          if (t5[i].get$imageID() === "relay") {
            t7 = this.activeSymbol;
            if (t7 >>> 0 !== t7 || t7 >= t3.length)
              throw H.ioore(t3, t7);
            t7 = t3[t7].imageID === "relay";
          } else
            t7 = false;
          allowedDistance1 = t7 ? allowedDistance0 : allowedDistance;
          t7 = center.x;
          t8 = positionScrolledCenter.x;
          if (typeof t7 !== "number")
            throw t7.$sub();
          if (typeof t8 !== "number")
            throw H.iae(t8);
          t7 = Math.pow(t7 - t8, 2);
          t8 = center.y;
          t9 = positionScrolledCenter.y;
          if (typeof t8 !== "number")
            throw t8.$sub();
          if (typeof t9 !== "number")
            throw H.iae(t9);
          t8 = Math.pow(t8 - t9, 2);
          if (t7 + t8 <= Math.pow(allowedDistance1, 2)) {
            lineToTarget = positionScrolledCenter.real2screen$0();
            context.strokeStyle = "#000";
            context.lineWidth = 2;
            context.beginPath();
            context.moveTo(drawCenter.x, drawCenter.y);
            context.lineTo(lineToTarget.x, lineToTarget.y);
            context.stroke();
            context.strokeStyle = "#fff";
            context.lineWidth = 1;
            context.beginPath();
            context.moveTo(drawCenter.x, drawCenter.y);
            context.lineTo(lineToTarget.x, lineToTarget.y);
            context.stroke();
          }
        }
        for (k = 0; t7 = this.ghosts, k < t7.length; ++k)
          if (k !== j) {
            t7 = t7[k];
            t8 = t7.x;
            if (typeof t8 !== "number")
              throw t8.$mul();
            t7 = t7.y;
            if (typeof t7 !== "number")
              throw t7.$mul();
            center = new U.Vector(t8 * t1 + t4, t7 * t1 + t4);
            drawCenter = center.real2screen$0();
            t7 = this.activeSymbol;
            if (t7 >>> 0 !== t7 || t7 >= t3.length)
              throw H.ioore(t3, t7);
            allowedDistance1 = t3[t7].imageID === "relay" ? allowedDistance0 : allowedDistance;
            t7 = center.x;
            t8 = positionScrolledCenter.x;
            if (typeof t7 !== "number")
              throw t7.$sub();
            if (typeof t8 !== "number")
              throw H.iae(t8);
            t7 = Math.pow(t7 - t8, 2);
            t8 = center.y;
            t9 = positionScrolledCenter.y;
            if (typeof t8 !== "number")
              throw t8.$sub();
            if (typeof t9 !== "number")
              throw H.iae(t9);
            t8 = Math.pow(t8 - t9, 2);
            if (t7 + t8 <= Math.pow(allowedDistance1, 2)) {
              lineToTarget = positionScrolledCenter.real2screen$0();
              context.strokeStyle = "#000";
              context.lineWidth = 2;
              context.beginPath();
              context.moveTo(drawCenter.x, drawCenter.y);
              context.lineTo(lineToTarget.x, lineToTarget.y);
              context.stroke();
              context.strokeStyle = "#fff";
              context.lineWidth = 1;
              context.beginPath();
              context.moveTo(drawCenter.x, drawCenter.y);
              context.lineTo(lineToTarget.x, lineToTarget.y);
              context.stroke();
            }
          }
      }
    }
  },
  drawGUI$0: function() {
    var t1, context, position, i, t2, total;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "gui").get$context();
    position = this.getHoveredTilePosition$0();
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "gui"));
    for (t1 = this.symbols, i = 0; i < t1.length; ++i)
      t1[i].draw$0();
    if (this.withinWorld$2(position.x, position.y)) {
      t1 = this.world.tiles;
      t2 = position.x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      total = J.$index$asx(t1[t2], position.y).get$creep();
      J.getInterceptor$x(context).set$fillStyle(context, "#fff");
      context.font = "9px";
      context.textAlign = "right";
      context.strokeStyle = "#fff";
      context.lineWidth = 1;
      context.fillStyle = "rgba(205, 133, 63, 1)";
      t2 = $.game.world.tiles;
      t1 = this.getHoveredTilePosition$0().x;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      t1 = J.get$height$x(J.$index$asx(t2[t1], this.getHoveredTilePosition$0().y));
      if (typeof t1 !== "number")
        throw t1.$negate();
      context.fillRect(555, 110, 25, -t1 * 10 - 10);
      context.fillStyle = "rgba(100, 150, 255, 1)";
      t1 = $.game.world.tiles;
      t2 = this.getHoveredTilePosition$0().x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t2 = J.get$height$x(J.$index$asx(t1[t2], this.getHoveredTilePosition$0().y));
      if (typeof t2 !== "number")
        throw t2.$mul();
      context.fillRect(555, 110 - t2 * 10 - 10, 25, -total * 10);
      context.fillStyle = "rgba(255, 255, 255, 1)";
      for (i = 1; i < 11; ++i) {
        t1 = C.JSInt_methods.toString$0(i);
        t2 = 120 - i * 10;
        context.fillText(t1, 550, t2);
        context.beginPath();
        context.moveTo(555, t2);
        context.lineTo(580, t2);
        context.stroke();
      }
      context.textAlign = "left";
      C.CanvasRenderingContext2D_methods.fillText$3(context, C.JSNumber_methods.toStringAsFixed$1(total, 2), 605, 10);
    }
  },
  draw$1: function(_) {
    var t1, context, t2, t3, timesX, timesY, i, j, t4, j0, t5, iS, jS, t6, t7, t8, t9, t10, allowedDistance, allowedDistance0, centerI, drawCenterI, centerJ, drawCenterJ, allowedDistance1, position, drawPosition;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    this.drawGUI$0();
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "buffer"));
    t1 = $.engine.canvas;
    J.clear$0$ax(t1.$index(t1, "main"));
    t1 = $.engine.halfWidth;
    t2 = this.tileSize;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3 = this.zoom;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    timesX = C.JSNumber_methods.toInt$0(Math.floor(t1 / t2 / t3));
    t3 = $.engine.halfHeight;
    if (typeof t3 !== "number")
      throw t3.$div();
    t1 = this.zoom;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    timesY = C.JSNumber_methods.toInt$0(Math.floor(t3 / t2 / t1));
    for (i = -timesX, j = -timesY, t1 = this.scroll, t3 = J.getInterceptor$x(context); i <= timesX; ++i)
      for (t4 = i * t2, j0 = j; j0 <= timesY; ++j0) {
        t5 = t1.x;
        if (typeof t5 !== "number")
          throw H.iae(t5);
        iS = i + t5;
        t5 = t1.y;
        if (typeof t5 !== "number")
          throw H.iae(t5);
        jS = j0 + t5;
        if (this.withinWorld$2(iS, jS)) {
          t5 = this.world.tiles;
          if (iS >>> 0 !== iS || iS >= t5.length)
            throw H.ioore(t5, iS);
          if (J.$index$asx(t5[iS], jS).get$terraformTarget() > -1) {
            t5 = $.engine.images;
            t5 = t5.$index(t5, "numbers");
            t6 = this.world.tiles;
            if (iS >= t6.length)
              throw H.ioore(t6, iS);
            t6 = J.$index$asx(t6[iS], jS).get$terraformTarget();
            t7 = $.engine;
            t8 = t7.halfWidth;
            t9 = this.zoom;
            if (typeof t9 !== "number")
              throw H.iae(t9);
            if (typeof t8 !== "number")
              throw t8.$add();
            t7 = t7.halfHeight;
            if (typeof t7 !== "number")
              throw t7.$add();
            t10 = t2 * t9;
            t3.drawImageScaledFromSource$9(context, t5, t6 * 16, 0, t2, t2, t8 + t4 * t9, t7 + j0 * t2 * t9, t10, t10);
          }
        }
      }
    for (t1 = this.emitters, i = 0; i < t1.length; ++i)
      t1[i].draw$0();
    for (t1 = this.sporetowers, i = 0; i < t1.length; ++i)
      t1[i].draw$0();
    for (t1 = this.buildings, allowedDistance = 10 * t2, allowedDistance0 = 20 * t2, i = 0; i < t1.length; ++i) {
      centerI = t1[i].getCenter$0();
      drawCenterI = centerI.real2screen$0();
      for (j = 0; t4 = t1.length, j < t4; ++j)
        if (i !== j) {
          if (i >= t4)
            throw H.ioore(t1, i);
          if (J.get$status$x(t1[i]) === "IDLE" && J.get$status$x(t1[j]) === "IDLE") {
            centerJ = t1[j].getCenter$0();
            drawCenterJ = centerJ.real2screen$0();
            t4 = t1.length;
            if (i >= t4)
              throw H.ioore(t1, i);
            if (t1[i].get$imageID() === "relay") {
              if (j >= t4)
                throw H.ioore(t1, j);
              t4 = t1[j].get$imageID() === "relay";
            } else
              t4 = false;
            allowedDistance1 = t4 ? allowedDistance0 : allowedDistance;
            t4 = centerJ.x;
            t5 = centerI.x;
            if (typeof t4 !== "number")
              throw t4.$sub();
            if (typeof t5 !== "number")
              throw H.iae(t5);
            t4 = Math.pow(t4 - t5, 2);
            t5 = centerJ.y;
            t6 = centerI.y;
            if (typeof t5 !== "number")
              throw t5.$sub();
            if (typeof t6 !== "number")
              throw H.iae(t6);
            t5 = Math.pow(t5 - t6, 2);
            if (t4 + t5 <= Math.pow(allowedDistance1, 2)) {
              t3.set$strokeStyle(context, "#000");
              context.lineWidth = 3;
              context.beginPath();
              context.moveTo(drawCenterI.x, drawCenterI.y);
              context.lineTo(drawCenterJ.x, drawCenterJ.y);
              context.stroke();
              t4 = t1.length;
              if (i >= t4)
                throw H.ioore(t1, i);
              if (t1[i].get$built()) {
                if (j >= t4)
                  throw H.ioore(t1, j);
                t4 = !t1[j].get$built();
              } else
                t4 = true;
              if (t4)
                context.strokeStyle = "#777";
              else
                context.strokeStyle = "#fff";
              context.lineWidth = 2;
              context.beginPath();
              context.moveTo(drawCenterI.x, drawCenterI.y);
              context.lineTo(drawCenterJ.x, drawCenterJ.y);
              context.stroke();
            }
          }
        }
    }
    for (i = 0; i < t1.length; ++i)
      t1[i].drawMovementIndicators$0();
    for (t4 = this.shells, i = 0; i < t4.length; ++i)
      t4[i].draw$0();
    for (t4 = this.projectiles, i = 0; i < t4.length; ++i)
      t4[i].draw$0();
    for (i = 0; i < t1.length; ++i)
      t1[i].draw$0();
    for (t4 = this.smokes, i = 0; i < t4.length; ++i)
      t4[i].draw$0();
    for (t4 = this.explosions, i = 0; i < t4.length; ++i)
      t4[i].draw$0();
    for (t4 = this.spores, i = 0; i < t4.length; ++i)
      t4[i].draw$0();
    if ($.engine.mouse.active) {
      for (i = 0; i < t1.length; ++i)
        t1[i].drawRepositionInfo$0();
      if (this.mode === "SHIP_SELECTED") {
        position = this.getHoveredTilePosition$0().tiled2screen$0();
        t4 = $.engine.images;
        t4 = t4.$index(t4, "targetcursor");
        t5 = position.x;
        t6 = this.zoom;
        if (typeof t6 !== "number")
          throw H.iae(t6);
        t7 = t2 * t6;
        if (typeof t5 !== "number")
          throw t5.$sub();
        t8 = position.y;
        if (typeof t8 !== "number")
          throw t8.$sub();
        t6 = 48 * t6;
        t3.drawImageScaled$5(context, t4, t5 - t7, t8 - t7, t6, t6);
      }
      if (this.activeSymbol !== -1)
        this.drawPositionInfo$0();
      if (this.mode === "TERRAFORM") {
        drawPosition = this.getHoveredTilePosition$0().tiled2screen$0();
        t4 = $.engine.images;
        t4 = t4.$index(t4, "numbers");
        t5 = this.terraformingHeight;
        t6 = drawPosition.x;
        t7 = drawPosition.y;
        t8 = this.zoom;
        if (typeof t8 !== "number")
          throw H.iae(t8);
        t8 = t2 * t8;
        t3.drawImageScaledFromSource$9(context, t4, t5 * t2, 0, t2, t2, t6, t7, t8, t8);
        context.strokeStyle = "#fff";
        context.lineWidth = 1;
        context.beginPath();
        context.moveTo(0, drawPosition.y);
        context.lineTo($.engine.width, drawPosition.y);
        context.stroke();
        context.beginPath();
        t8 = drawPosition.y;
        t7 = this.zoom;
        if (typeof t7 !== "number")
          throw H.iae(t7);
        if (typeof t8 !== "number")
          throw t8.$add();
        context.moveTo(0, t8 + t2 * t7);
        t7 = $.engine.width;
        t8 = drawPosition.y;
        t6 = this.zoom;
        if (typeof t6 !== "number")
          throw H.iae(t6);
        if (typeof t8 !== "number")
          throw t8.$add();
        context.lineTo(t7, t8 + t2 * t6);
        context.stroke();
        context.beginPath();
        context.moveTo(drawPosition.x, 0);
        t6 = drawPosition.x;
        t8 = $.engine.halfHeight;
        if (typeof t8 !== "number")
          throw t8.$mul();
        context.lineTo(t6, t8 * 2);
        context.stroke();
        context.beginPath();
        t8 = drawPosition.x;
        t6 = this.zoom;
        if (typeof t6 !== "number")
          throw H.iae(t6);
        if (typeof t8 !== "number")
          throw t8.$add();
        context.moveTo(t8 + t2 * t6, 0);
        t6 = drawPosition.x;
        t8 = this.zoom;
        if (typeof t8 !== "number")
          throw H.iae(t8);
        if (typeof t6 !== "number")
          throw t6.$add();
        t7 = $.engine.halfHeight;
        if (typeof t7 !== "number")
          throw t7.$mul();
        context.lineTo(t6 + t2 * t8, t7 * 2);
        context.stroke();
      }
    }
    for (t2 = this.packets, i = 0; i < t2.length; ++i)
      t2[i].draw$0();
    for (t2 = this.ships, i = 0; i < t2.length; ++i)
      t2[i].draw$0();
    for (i = 0; i < t1.length; ++i)
      t1[i].drawBox$0();
    this.drawCreeper$0();
    t1 = $.engine.canvas;
    t1 = t1.$index(t1, "main").get$context();
    t2 = $.engine.canvas;
    J.drawImage$3$x(t1, t2.$index(t2, "buffer").get$element(), 0, 0);
    t2 = window;
    t1 = this.get$draw();
    C.Window_methods._ensureRequestAnimationFrame$0(t2);
    C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t1));
  },
  get$draw: function() {
    return new H.BoundClosure$1(this, U.Game.prototype.draw$1, null, "draw$1");
  },
  Game$0: function() {
    this.seed = $.engine.randomInt$2(0, 10000);
    this.world = U.World$(this.seed);
    this.init$0();
    this.drawTerrain$0();
    this.copyTerrain$0();
    $.engine.setupEventHandler$0();
    this.run$0();
  },
  static: {
Game$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
  t1 = P.List_List(null, U.Vector);
  H.setRuntimeTypeInfo(t1, [U.Vector]);
  t2 = P.List_List(null, U.Packet);
  H.setRuntimeTypeInfo(t2, [U.Packet]);
  t3 = P.List_List(null, U.Sporetower);
  H.setRuntimeTypeInfo(t3, [U.Sporetower]);
  t4 = P.List_List(null, U.Emitter);
  H.setRuntimeTypeInfo(t4, [U.Emitter]);
  t5 = P.List_List(null, U.UISymbol);
  H.setRuntimeTypeInfo(t5, [U.UISymbol]);
  t6 = P.List_List(null, U.Explosion);
  H.setRuntimeTypeInfo(t6, [U.Explosion]);
  t7 = P.List_List(null, U.Smoke);
  H.setRuntimeTypeInfo(t7, [U.Smoke]);
  t8 = P.List_List(null, U.Spore);
  H.setRuntimeTypeInfo(t8, [U.Spore]);
  t9 = P.List_List(null, U.Building);
  H.setRuntimeTypeInfo(t9, [U.Building]);
  t10 = P.List_List(null, U.Packet);
  H.setRuntimeTypeInfo(t10, [U.Packet]);
  t11 = P.List_List(null, U.Shell);
  H.setRuntimeTypeInfo(t11, [U.Shell]);
  t12 = P.List_List(null, U.Ship);
  H.setRuntimeTypeInfo(t12, [U.Ship]);
  t13 = P.List_List(null, U.Projectile);
  H.setRuntimeTypeInfo(t13, [U.Projectile]);
  t13 = new U.Game(16, null, 0, 0, -1, 0, 0, 0, 1, 1, null, null, false, false, false, false, false, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, null, new U.Vector(0, 0), null, new P.Stopwatch(null, null));
  t13.Game$0();
  return t13;
}}

},

Game_init_closure: {"": "Closure;music_0",
  call$1: function($event) {
    return this.music_0.play();
  },
  $is_args1: true
},

Game_run_closure: {"": "Closure;this_0",
  call$1: function(timer) {
    $.game.update$0();
    return;
  },
  $is_args1: true
},

Game_findRoute_closure: {"": "Closure;",
  call$2: function(a, b) {
    return a.get$distanceTravelled() + a.distanceRemaining - (b.get$distanceTravelled() + b.distanceRemaining);
  },
  $is_args2: true
},

HeightMap: {"": "Object;seed,size>,low_value,high_value,mid_value,centre_cell,queue,map",
  reset$0: function(_) {
    var t1, i, t2, t3, t4, t5;
    t1 = this.queue;
    C.JSArray_methods.set$length(t1, 0);
    this.map = P.List_List(this.size, null);
    for (i = 0; t2 = this.size, i < t2; ++i) {
      t3 = this.map;
      t2 = P.List_List(t2, null);
      if (i >= t3.length)
        throw H.ioore(t3, i);
      t3[i] = t2;
    }
    t2 = this.high_value;
    t3 = C.C__Random.nextInt$1(t2);
    t4 = this.map;
    if (0 >= t4.length)
      throw H.ioore(t4, 0);
    t4 = t4[0];
    if (0 >= t4.length)
      throw H.ioore(t4, 0);
    t4[0] = t3;
    t3 = C.C__Random.nextInt$1(t2);
    t4 = this.size - 1;
    t5 = this.map;
    if (t4 < 0 || t4 >= t5.length)
      throw H.ioore(t5, t4);
    t4 = t5[t4];
    if (0 >= t4.length)
      throw H.ioore(t4, 0);
    t4[0] = t3;
    t3 = C.C__Random.nextInt$1(t2);
    t4 = this.size - 1;
    t5 = this.map;
    if (0 >= t5.length)
      throw H.ioore(t5, 0);
    t5 = t5[0];
    if (t4 < 0 || t4 >= t5.length)
      throw H.ioore(t5, t4);
    t5[t4] = t3;
    t2 = C.C__Random.nextInt$1(t2);
    t3 = this.size - 1;
    t4 = this.map;
    if (t3 < 0 || t3 >= t4.length)
      throw H.ioore(t4, t3);
    t4 = t4[t3];
    if (t3 >= t4.length)
      throw H.ioore(t4, t3);
    t4[t3] = t2;
    t1.push(new U.HeightMap_reset_closure(this));
    return t1;
  },
  soft_set_cell$3: function(x, y, v) {
    var t1, t2;
    t1 = this.map;
    if (y >>> 0 !== y || y >= t1.length)
      throw H.ioore(t1, y);
    t2 = t1[y];
    if (x >>> 0 !== x || x >= t2.length)
      throw H.ioore(t2, x);
    if (t2[x] == null)
      t2[x] = v;
    t1 = t1[y];
    if (x >= t1.length)
      throw H.ioore(t1, x);
    return t1[x];
  },
  remaining$0: function() {
    if (this.queue.length > 0)
      return true;
    else
      return false;
  },
  run$0: function() {
    for (var t1 = this.queue; this.remaining$0();)
      C.JSArray_methods.removeAt$1(t1, 0).call$0();
    return;
  },
  diamond_square$6: function(left, $top, right, bottom, base_height, seed) {
    var t1, t2, t3, t4, centre_point_value, t5;
    t1 = {};
    t1.base_height_0 = base_height;
    t1.x_centre_1 = null;
    t1.y_centre_2 = null;
    if (typeof left !== "number")
      throw left.$add();
    if (typeof right !== "number")
      throw H.iae(right);
    t1.x_centre_1 = C.JSNumber_methods.toInt$0(Math.floor((left + right) / 2));
    if (typeof $top !== "number")
      throw $top.$add();
    if (typeof bottom !== "number")
      throw H.iae(bottom);
    t1.y_centre_2 = C.JSNumber_methods.toInt$0(Math.floor(($top + bottom) / 2));
    t2 = this.map;
    if ($top < 0 || $top >= t2.length)
      throw H.ioore(t2, $top);
    t2 = t2[$top];
    t3 = t2.length;
    if (left < 0 || left >= t3)
      throw H.ioore(t2, left);
    t4 = t2[left];
    if (right < 0 || right >= t3)
      throw H.ioore(t2, right);
    t2 = J.$add$ns(t4, t2[right]);
    t4 = this.map;
    if (bottom < 0 || bottom >= t4.length)
      throw H.ioore(t4, bottom);
    t4 = t4[bottom];
    if (left >= t4.length)
      throw H.ioore(t4, left);
    t4 = J.$add$ns(t2, t4[left]);
    t2 = this.map;
    if (bottom >= t2.length)
      throw H.ioore(t2, bottom);
    t2 = t2[bottom];
    if (right >= t2.length)
      throw H.ioore(t2, right);
    t2 = J.$add$ns(t4, t2[right]);
    if (typeof t2 !== "number")
      throw t2.$div();
    centre_point_value = C.JSNumber_methods.toInt$0(Math.floor(t2 / 4 - C.JSNumber_methods.toInt$0(Math.floor((Math.random() - 0.5) * t1.base_height_0 * 2))));
    this.soft_set_cell$3(t1.x_centre_1, t1.y_centre_2, centre_point_value);
    t2 = t1.x_centre_1;
    t4 = this.map;
    if ($top >= t4.length)
      throw H.ioore(t4, $top);
    t4 = t4[$top];
    t3 = t4.length;
    if (left >= t3)
      throw H.ioore(t4, left);
    t5 = t4[left];
    if (right >= t3)
      throw H.ioore(t4, right);
    t4 = J.$add$ns(t5, t4[right]);
    if (typeof t4 !== "number")
      throw t4.$div();
    this.soft_set_cell$3(t2, $top, C.JSNumber_methods.toInt$0(Math.floor(t4 / 2 + (Math.random() - 0.5) * t1.base_height_0)));
    t4 = t1.x_centre_1;
    t2 = this.map;
    if (bottom >= t2.length)
      throw H.ioore(t2, bottom);
    t2 = t2[bottom];
    t5 = t2.length;
    if (left >= t5)
      throw H.ioore(t2, left);
    t3 = t2[left];
    if (right >= t5)
      throw H.ioore(t2, right);
    t2 = J.$add$ns(t3, t2[right]);
    if (typeof t2 !== "number")
      throw t2.$div();
    this.soft_set_cell$3(t4, bottom, C.JSNumber_methods.toInt$0(Math.floor(t2 / 2 + (Math.random() - 0.5) * t1.base_height_0)));
    t2 = t1.y_centre_2;
    t4 = this.map;
    t3 = t4.length;
    if ($top >= t3)
      throw H.ioore(t4, $top);
    t5 = t4[$top];
    if (left >= t5.length)
      throw H.ioore(t5, left);
    t5 = t5[left];
    if (bottom >= t3)
      throw H.ioore(t4, bottom);
    t4 = t4[bottom];
    if (left >= t4.length)
      throw H.ioore(t4, left);
    t4 = J.$add$ns(t5, t4[left]);
    if (typeof t4 !== "number")
      throw t4.$div();
    this.soft_set_cell$3(left, t2, C.JSNumber_methods.toInt$0(Math.floor(t4 / 2 + (Math.random() - 0.5) * t1.base_height_0)));
    t4 = t1.y_centre_2;
    t2 = this.map;
    t5 = t2.length;
    if ($top >= t5)
      throw H.ioore(t2, $top);
    t3 = t2[$top];
    if (right >= t3.length)
      throw H.ioore(t3, right);
    t3 = t3[right];
    if (bottom >= t5)
      throw H.ioore(t2, bottom);
    t2 = t2[bottom];
    if (right >= t2.length)
      throw H.ioore(t2, right);
    t2 = J.$add$ns(t3, t2[right]);
    if (typeof t2 !== "number")
      throw t2.$div();
    this.soft_set_cell$3(right, t4, C.JSNumber_methods.toInt$0(Math.floor(t2 / 2 + (Math.random() - 0.5) * t1.base_height_0)));
    if (right - left > 2) {
      t2 = t1.base_height_0;
      t1.base_height_0 = C.JSNumber_methods.toInt$0(Math.floor(t2 * Math.pow(2, -0.75)));
      t2 = this.queue;
      t2.push(new U.HeightMap_diamond_square_closure(t1, this, left, $top, C.C__Random));
      t2.push(new U.HeightMap_diamond_square_closure0(t1, this, $top, right, C.C__Random));
      t2.push(new U.HeightMap_diamond_square_closure1(t1, this, left, bottom, C.C__Random));
      t2.push(new U.HeightMap_diamond_square_closure2(t1, this, right, bottom, C.C__Random));
      return t2;
    }
  },
  HeightMap$4: function(seed, size, low_value, high_value) {
    this.mid_value = C.JSNumber_methods.toInt$0(Math.floor((this.low_value + this.high_value) / 2));
    this.centre_cell = C.JSNumber_methods.toInt$0(Math.floor(this.size / 2));
    this.reset$0(this);
  },
  static: {
HeightMap$: function(seed, size, low_value, high_value) {
  var t1 = new U.HeightMap(seed, size, low_value, high_value, null, null, P.List_List(null, null), null);
  t1.HeightMap$4(seed, size, low_value, high_value);
  return t1;
}}

},

HeightMap_reset_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.size - 1;
    return t1.diamond_square$6(0, 0, t2, t2, t1.mid_value, t1.seed);
  }
},

HeightMap_diamond_square_closure: {"": "Closure;box_0,this_1,left_2,top_3,random_4",
  call$0: function() {
    var t1 = this.box_0;
    return this.this_1.diamond_square$6(this.left_2, this.top_3, t1.x_centre_1, t1.y_centre_2, t1.base_height_0, this.random_4.nextInt$1(10000));
  }
},

HeightMap_diamond_square_closure0: {"": "Closure;box_0,this_5,top_6,right_7,random_8",
  call$0: function() {
    var t1 = this.box_0;
    return this.this_5.diamond_square$6(t1.x_centre_1, this.top_6, this.right_7, t1.y_centre_2, t1.base_height_0, this.random_8.nextInt$1(10000));
  }
},

HeightMap_diamond_square_closure1: {"": "Closure;box_0,this_9,left_10,bottom_11,random_12",
  call$0: function() {
    var t1 = this.box_0;
    return this.this_9.diamond_square$6(this.left_10, t1.y_centre_2, t1.x_centre_1, this.bottom_11, t1.base_height_0, this.random_12.nextInt$1(10000));
  }
},

HeightMap_diamond_square_closure2: {"": "Closure;box_0,this_13,right_14,bottom_15,random_16",
  call$0: function() {
    var t1 = this.box_0;
    return this.this_13.diamond_square$6(t1.x_centre_1, t1.y_centre_2, this.right_14, this.bottom_15, t1.base_height_0, this.random_16.nextInt$1(10000));
  }
},

main_closure: {"": "Closure;",
  call$1: function(results) {
    var t1 = U.Game$();
    $.game = t1;
    return t1;
  },
  $is_args1: true
},

Packet: {"": "Object;position>,speed,imageID<,type,remove,speedMultiplier,target,currentTarget",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  move$0: function() {
    var t1, centerTarget, t2, t3, t4, t5, ship;
    this.calculateVector$0();
    t1 = this.position;
    this.position = t1.$add(t1, this.speed);
    centerTarget = this.currentTarget.getCenter$0();
    t1 = this.position;
    t2 = t1.x;
    t3 = centerTarget.x;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t3 - 1)
      if (t2 < t3 + 1) {
        t2 = t1.y;
        t4 = centerTarget.y;
        if (typeof t4 !== "number")
          throw t4.$sub();
        if (typeof t2 !== "number")
          throw t2.$gt();
        t2 = t2 > t4 - 1 && t2 < t4 + 1;
      } else
        t2 = false;
    else
      t2 = false;
    if (t2) {
      t1.x = t3;
      this.position.y = centerTarget.y;
      if (J.$eq(this.currentTarget, this.target)) {
        this.remove = true;
        t1 = this.type;
        if (t1 === "health") {
          t1 = this.target;
          t1.health = t1.health + 1;
          t1 = this.target;
          t1.healthRequests = t1.healthRequests - 1;
          t1 = this.target;
          t2 = t1.health;
          t3 = t1.maxHealth;
          if (t2 >= t3) {
            t1.health = t3;
            t1 = this.target;
            if (!t1.built) {
              t1.built = true;
              t1 = this.target;
              if (t1.imageID === "collector") {
                $.game.updateCollection$2(t1, "add");
                $.engine.playSound$2("energy", this.target.position);
              }
              if (this.target.imageID === "storage") {
                t1 = $.game;
                t1.maxEnergy = t1.maxEnergy + 20;
              }
              t1 = this.target;
              t2 = t1.imageID;
              if (t2 === "speed")
                $.Packet_baseSpeed = $.Packet_baseSpeed * 1.01;
              if (t2 === "bomber") {
                t2 = t1.position;
                t3 = t2.x;
                t4 = $.game;
                t5 = t4.tileSize;
                if (typeof t3 !== "number")
                  throw t3.$mul();
                t2 = t2.y;
                if (typeof t2 !== "number")
                  throw t2.$mul();
                ship = new U.Ship(new U.Vector(t3 * t5, t2 * t5), new U.Vector(0, 0), new U.Vector(0, 0), "bombership", "Bomber", "IDLE", false, false, false, 0, 1, 15, 0, 0, 0, 0, t1);
                t1.ship = ship;
                t4.ships.push(ship);
              }
            }
          }
        } else if (t1 === "energy") {
          t1 = this.target;
          t1.energy = t1.energy + 4;
          t1 = this.target;
          t1.energyRequests = t1.energyRequests - 4;
          t1 = this.target;
          t2 = t1.energy;
          t3 = t1.maxEnergy;
          if (t2 > t3)
            t1.energy = t3;
        } else if (t1 === "collection") {
          t1 = $.game;
          t1.currentEnergy = t1.currentEnergy + 1;
          t2 = t1.currentEnergy;
          t3 = t1.maxEnergy;
          if (t2 > t3)
            t1.currentEnergy = t3;
          t1.updateEnergyElement$0();
        }
      } else
        $.game.findRoute$1(this);
    }
  },
  calculateVector$0: function() {
    var targetPosition, t1, t2, t3, t4, t5, delta, distance;
    targetPosition = this.currentTarget.getCenter$0();
    t1 = targetPosition.x;
    t2 = this.position;
    t3 = t2.x;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = targetPosition.y;
    t5 = t2.y;
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    delta = new U.Vector(t1 - t3, t4 - t5);
    distance = t2.distanceTo$1(targetPosition);
    t2 = this.speed;
    t5 = delta.x;
    if (typeof t5 !== "number")
      throw t5.$div();
    t4 = $.Packet_baseSpeed;
    t3 = $.game;
    t2.x = t5 / distance * t4 * t3.speed * this.speedMultiplier;
    t5 = this.speed;
    t2 = delta.y;
    if (typeof t2 !== "number")
      throw t2.$div();
    t5.y = t2 / distance * t4 * t3.speed * this.speedMultiplier;
    if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
      this.speed.x = delta.x;
    if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
      this.speed.y = delta.y;
  },
  draw$0: function() {
    var t1, context, realPosition, t2, t3, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = realPosition.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t3 = realPosition.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t4 = $.game.zoom;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t4 = 16 * t4;
    if (t1.isVisible$2(new U.Vector(t2 - 8, t3 - 8), new U.Vector(t4, t4))) {
      t1 = $.engine.images;
      t1 = t1.$index(t1, this.imageID);
      t2 = realPosition.x;
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t4 = 8 * t3;
      if (typeof t2 !== "number")
        throw t2.$sub();
      t5 = realPosition.y;
      if (typeof t5 !== "number")
        throw t5.$sub();
      t3 = 16 * t3;
      J.drawImageScaled$5$x(context, t1, t2 - t4, t5 - t4, t3, t3);
    }
  },
  static: {
"": "Packet_baseSpeed",
}

},

Projectile: {"": "Object;position>,targetPosition,speed,imageID<,remove,rotation",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  calculateVector$0: function() {
    var t1, t2, t3, t4, t5, t6, delta, distance;
    t1 = this.targetPosition;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = t1.y;
    t6 = t3.y;
    if (typeof t5 !== "number")
      throw t5.$sub();
    if (typeof t6 !== "number")
      throw H.iae(t6);
    delta = new U.Vector(t2 - t4, t5 - t6);
    distance = t3.distanceTo$1(t1);
    t1 = this.speed;
    t3 = delta.x;
    if (typeof t3 !== "number")
      throw t3.$div();
    t6 = $.Projectile_baseSpeed;
    t5 = $.game;
    t1.x = t3 / distance * t6 * t5.speed;
    t3 = this.speed;
    t1 = delta.y;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3.y = t1 / distance * t6 * t5.speed;
    if (J.abs$0$n(this.speed.x) > J.abs$0$n(delta.x))
      this.speed.x = delta.x;
    if (J.abs$0$n(this.speed.y) > J.abs$0$n(delta.y))
      this.speed.y = delta.y;
  },
  getCenter$0: function() {
    var t1, t2;
    t1 = this.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$sub();
    return new U.Vector(t2 - 8, t1 - 8);
  },
  move$0: function() {
    var t1, t2, t3, t4, tiledPosition;
    this.calculateVector$0();
    t1 = this.position;
    this.position = t1.$add(t1, this.speed);
    t1 = this.position;
    t2 = t1.x;
    t3 = this.targetPosition;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t4 - 2)
      if (t2 < t4 + 2) {
        t1 = t1.y;
        t2 = t3.y;
        if (typeof t2 !== "number")
          throw t2.$sub();
        if (typeof t1 !== "number")
          throw t1.$gt();
        t1 = t1 > t2 - 2 && t1 < t2 + 2;
      } else
        t1 = false;
    else
      t1 = false;
    if (t1) {
      this.remove = true;
      $.game.smokes.push(U.Smoke$(t3));
      tiledPosition = t3.real2tiled$0();
      t1 = $.game.world.tiles;
      t2 = tiledPosition.x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t2 = J.$index$asx(t1[t2], tiledPosition.y);
      t2.creep = t2.get$creep() - 1;
      t1 = $.game.world.tiles;
      t2 = tiledPosition.x;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      if (J.$index$asx(t1[t2], tiledPosition.y).get$creep() < 0) {
        t1 = $.game.world.tiles;
        t2 = tiledPosition.x;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          throw H.ioore(t1, t2);
        J.$index$asx(t1[t2], tiledPosition.y).set$creep(0);
      }
    }
  },
  draw$0: function() {
    var t1, context, realPosition, t2, t3;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 16 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      J.save$0$x(context);
      t1 = realPosition.x;
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = 8 * t2;
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = realPosition.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      context.translate(t1 + t2, t3 + t2);
      t2 = $.engine;
      t3 = this.rotation;
      t2.toString;
      if (typeof t3 !== "number")
        throw t3.$mul();
      context.rotate(t3 * 0.017453292519943295);
      t3 = $.engine.images;
      t3 = t3.$index(t3, this.imageID);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1 = 8 - 8 * t2;
      t2 = 16 * t2;
      context.drawImage(t3, t1, t1, t2, t2);
      context.restore();
    }
  },
  static: {
"": "Projectile_baseSpeed",
}

},

Shell: {"": "Object;position>,targetPosition,speed,imageID<,remove,rotation,trailCounter",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  init$0: function() {
    var t1, t2, t3, t4, t5, t6, delta, distance;
    t1 = this.targetPosition;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = t1.y;
    t6 = t3.y;
    if (typeof t5 !== "number")
      throw t5.$sub();
    if (typeof t6 !== "number")
      throw H.iae(t6);
    delta = new U.Vector(t2 - t4, t5 - t6);
    distance = t3.distanceTo$1(t1);
    t1 = this.speed;
    t3 = delta.x;
    if (typeof t3 !== "number")
      throw t3.$div();
    t6 = $.game;
    t1.x = t3 / distance * 1 * t6.speed;
    t3 = this.speed;
    t1 = delta.y;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3.y = t1 / distance * 1 * t6.speed;
  },
  getCenter$0: function() {
    var t1, t2;
    t1 = this.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$sub();
    return new U.Vector(t2 - 8, t1 - 8);
  },
  move$0: function() {
    var t1, t2, t3, t4, i, j;
    this.trailCounter = this.trailCounter + 1;
    if (this.trailCounter === 10) {
      this.trailCounter = 0;
      $.game.smokes.push(U.Smoke$(this.getCenter$0()));
    }
    this.rotation = this.rotation + 20;
    t1 = this.rotation;
    if (t1 > 359)
      this.rotation = t1 - 359;
    t1 = this.position;
    this.position = t1.$add(t1, this.speed);
    t1 = this.position;
    t2 = t1.x;
    t3 = this.targetPosition;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t4 - 2)
      if (t2 < t4 + 2) {
        t1 = t1.y;
        t2 = t3.y;
        if (typeof t2 !== "number")
          throw t2.$sub();
        if (typeof t1 !== "number")
          throw t1.$gt();
        t1 = t1 > t2 - 2 && t1 < t2 + 2;
      } else
        t1 = false;
    else
      t1 = false;
    if (t1) {
      this.remove = true;
      $.game.explosions.push(U.Explosion$(t3));
      $.engine.playSound$2("explosion", t3.real2tiled$0());
      t1 = t3.x;
      t2 = $.game.tileSize;
      if (typeof t1 !== "number")
        throw t1.$div();
      i = C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) - 4;
      while (true) {
        t1 = t3.x;
        t2 = $.game.tileSize;
        if (typeof t1 !== "number")
          throw t1.$div();
        if (!(i < C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) + 5))
          break;
        t1 = t3.y;
        t2 = $.game.tileSize;
        if (typeof t1 !== "number")
          throw t1.$div();
        j = C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) - 4;
        while (true) {
          t1 = t3.y;
          t2 = $.game.tileSize;
          if (typeof t1 !== "number")
            throw t1.$div();
          if (!(j < C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) + 5))
            break;
          if ($.game.withinWorld$2(i, j)) {
            t1 = $.game.tileSize;
            t2 = t3.x;
            if (typeof t2 !== "number")
              throw H.iae(t2);
            t1 = Math.pow(i * t1 + t1 / 2 - t2, 2);
            t2 = $.game.tileSize;
            t4 = t3.y;
            if (typeof t4 !== "number")
              throw H.iae(t4);
            t2 = Math.pow(j * t2 + t2 / 2 - t4, 2);
            t4 = $.game.tileSize;
            if (t1 + t2 < Math.pow(t4 * 4, 2)) {
              t1 = $.game.world.tiles;
              if (i < 0 || i >= t1.length)
                throw H.ioore(t1, i);
              t1 = J.$index$asx(t1[i], j);
              t1.creep = t1.get$creep() - 10;
              t1 = $.game.world.tiles;
              if (i >= t1.length)
                throw H.ioore(t1, i);
              if (J.$index$asx(t1[i], j).get$creep() < 0) {
                t1 = $.game.world.tiles;
                if (i >= t1.length)
                  throw H.ioore(t1, i);
                J.$index$asx(t1[i], j).set$creep(0);
              }
            }
          }
          ++j;
        }
        ++i;
      }
    }
  },
  draw$0: function() {
    var t1, context, realPosition, t2, t3;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 16 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      J.save$0$x(context);
      t1 = realPosition.x;
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = 8 * t2;
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = realPosition.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      context.translate(t1 + t2, t3 + t2);
      t2 = $.engine;
      t3 = this.rotation;
      t2.toString;
      context.rotate(t3 * 0.017453292519943295);
      t3 = $.engine.images;
      t3 = t3.$index(t3, this.imageID);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1 = -8 * t2;
      t2 = 16 * t2;
      context.drawImage(t3, t1, t1, t2, t2);
      context.restore();
    }
  },
  static: {
"": "Shell_baseSpeed",
}

},

Ship: {"": "Object;position>,speed,targetPosition,imageID<,type,status*,remove,hovered<,selected*,angle,scale,maxEnergy,energy,trailCounter,weaponCounter,flightCounter,home",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  getCenter$0: function() {
    var t1, t2;
    t1 = this.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw t2.$add();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$add();
    return new U.Vector(t2 + 24, t1 + 24);
  },
  updateHoverState$0: function() {
    var realPosition, t1, t2, t3;
    realPosition = this.position.real2screen$0();
    t1 = $.engine.mouse;
    t2 = t1.x;
    t3 = realPosition.x;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t2 > t3)
      if (t2 < t3 + 47) {
        t1 = t1.y;
        t2 = realPosition.y;
        if (typeof t2 !== "number")
          throw H.iae(t2);
        t1 = t1 > t2 && t1 < t2 + 47;
      } else
        t1 = false;
    else
      t1 = false;
    this.hovered = t1;
    return this.hovered;
  },
  turnToTarget$0: function() {
    var t1, t2, t3, t4, delta, angleToTarget, absoluteDelta, turnRate;
    t1 = this.targetPosition;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t1 = t1.y;
    t3 = t3.y;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    delta = new U.Vector(t2 - t4, t1 - t3);
    t3 = $.engine;
    t1 = delta.y;
    t4 = delta.x;
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    if (typeof t4 !== "number")
      H.throwExpression(new P.ArgumentError(t4));
    t1 = Math.atan2(t1, t4);
    t3.toString;
    angleToTarget = t1 * 57.29577951308232;
    absoluteDelta = Math.abs(angleToTarget - this.angle);
    turnRate = absoluteDelta < 1.5 ? absoluteDelta : 1.5;
    if (absoluteDelta <= 180) {
      t1 = this.angle;
      if (angleToTarget < t1)
        this.angle = t1 - turnRate;
      else
        this.angle = t1 + turnRate;
    } else {
      t1 = this.angle;
      if (angleToTarget < t1)
        this.angle = t1 + turnRate;
      else
        this.angle = t1 - turnRate;
    }
    t1 = this.angle;
    if (t1 > 180)
      this.angle = t1 - 360;
    t1 = this.angle;
    if (t1 < -180)
      this.angle = t1 + 360;
  },
  calculateVector$0: function() {
    var t1, t2, x, y;
    t1 = $.engine;
    t2 = this.angle;
    t1.toString;
    x = Math.cos(t2 * 0.017453292519943295);
    t1 = $.engine;
    t2 = this.angle;
    t1.toString;
    y = Math.sin(t2 * 0.017453292519943295);
    t1 = this.speed;
    t2 = $.game;
    t1.x = x * 1 * t2.speed;
    this.speed.y = y * 1 * t2.speed;
  },
  control$1: function(_, position) {
    var t1, t2, t3, t4;
    if (this.hovered)
      this.selected = true;
    if (this.selected) {
      t1 = $.game;
      t1.mode = "SHIP_SELECTED";
      if (this.status === "IDLE") {
        t2 = position.x;
        if (typeof t2 !== "number")
          throw t2.$sub();
        t3 = this.home;
        t4 = t3.position;
        if (t2 - 1 !== t4.x) {
          t2 = position.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          t4 = t2 - 1 !== t4.y;
          t2 = t4;
        } else
          t2 = false;
        if (t2) {
          this.energy = t3.energy;
          t3.energy = 0;
          t2 = this.targetPosition;
          t3 = position.x;
          t4 = t1.tileSize;
          if (typeof t3 !== "number")
            throw t3.$mul();
          t2.x = t3 * t4;
          t3 = position.y;
          if (typeof t3 !== "number")
            throw t3.$mul();
          t2.y = t3 * t4;
          this.status = "RISING";
        }
      }
      t2 = this.status;
      if (t2 === "ATTACKING" || t2 === "RETURNING") {
        t2 = position.x;
        if (typeof t2 !== "number")
          throw t2.$sub();
        --t2;
        t3 = this.home.position;
        if (t2 === t3.x) {
          t4 = position.y;
          if (typeof t4 !== "number")
            throw t4.$sub();
          t3 = t4 - 1 === t3.y;
        } else
          t3 = false;
        t4 = this.targetPosition;
        t1 = t1.tileSize;
        if (t3) {
          t4.x = t2 * t1;
          t2 = position.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          t4.y = (t2 - 1) * t1;
          this.status = "RETURNING";
        } else {
          t4.x = t2 * t1;
          t2 = position.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          t4.y = (t2 - 1) * t1;
          this.status = "ATTACKING";
        }
      }
    }
  },
  move$0: function() {
    var t1, t2, t3, t4, i, j;
    t1 = this.status;
    if (t1 === "ATTACKING" || t1 === "RETURNING") {
      this.trailCounter = this.trailCounter + 1;
      if (this.trailCounter === 10) {
        this.trailCounter = 0;
        $.game.smokes.push(U.Smoke$(this.getCenter$0()));
      }
    }
    t1 = this.status;
    if (t1 === "RISING") {
      t1 = this.flightCounter;
      if (t1 < 25) {
        this.flightCounter = t1 + 1;
        this.scale = this.scale * 1.01;
      }
      if (this.flightCounter === 25)
        this.status = "ATTACKING";
    } else if (t1 === "FALLING") {
      t1 = this.flightCounter;
      if (t1 > 0) {
        this.flightCounter = t1 - 1;
        this.scale = this.scale / 1.01;
      }
      if (this.flightCounter === 0) {
        this.status = "IDLE";
        t1 = this.position;
        t2 = this.home;
        t3 = t2.position.x;
        t4 = $.game.tileSize;
        if (typeof t3 !== "number")
          throw t3.$mul();
        t1.x = t3 * t4;
        t3 = this.position;
        t2 = t2.position.y;
        if (typeof t2 !== "number")
          throw t2.$mul();
        t3.y = t2 * t4;
        t4 = this.targetPosition;
        t4.x = 0;
        t4.y = 0;
        this.energy = 5;
        this.scale = 1;
      }
    } else if (t1 === "ATTACKING") {
      this.weaponCounter = this.weaponCounter + 1;
      this.turnToTarget$0();
      this.calculateVector$0();
      t1 = this.position;
      this.position = t1.$add(t1, this.speed);
      t1 = this.position;
      t2 = t1.x;
      t3 = this.targetPosition;
      t4 = t3.x;
      if (typeof t4 !== "number")
        throw t4.$sub();
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > t4 - 2)
        if (t2 < t4 + 2) {
          t1 = t1.y;
          t2 = t3.y;
          if (typeof t2 !== "number")
            throw t2.$sub();
          if (typeof t1 !== "number")
            throw t1.$gt();
          t1 = t1 > t2 - 2 && t1 < t2 + 2;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        if (this.weaponCounter >= 10) {
          this.weaponCounter = 0;
          $.game.explosions.push(U.Explosion$(t3));
          this.energy = this.energy - 1;
          t1 = t3.x;
          t2 = $.game.tileSize;
          if (typeof t1 !== "number")
            throw t1.$div();
          i = C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) - 3;
          while (true) {
            t1 = t3.x;
            t2 = $.game.tileSize;
            if (typeof t1 !== "number")
              throw t1.$div();
            if (!(i < C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) + 5))
              break;
            t1 = t3.y;
            t2 = $.game.tileSize;
            if (typeof t1 !== "number")
              throw t1.$div();
            j = C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) - 3;
            while (true) {
              t1 = t3.y;
              t2 = $.game.tileSize;
              if (typeof t1 !== "number")
                throw t1.$div();
              if (!(j < C.JSNumber_methods.toInt$0(Math.floor(t1 / t2)) + 5))
                break;
              if ($.game.withinWorld$2(i, j)) {
                t1 = $.game.tileSize;
                t2 = t3.x;
                if (typeof t2 !== "number")
                  throw t2.$add();
                t1 = Math.pow(i * t1 + t1 / 2 - (t2 + t1), 2);
                t2 = $.game.tileSize;
                t4 = t3.y;
                if (typeof t4 !== "number")
                  throw t4.$add();
                t2 = Math.pow(j * t2 + t2 / 2 - (t4 + t2), 2);
                t4 = $.game.tileSize;
                if (t1 + t2 < Math.pow(t4 * 3, 2)) {
                  t1 = $.game.world.tiles;
                  if (i < 0 || i >= t1.length)
                    throw H.ioore(t1, i);
                  t1 = J.$index$asx(t1[i], j);
                  t1.creep = t1.get$creep() - 5;
                  t1 = $.game.world.tiles;
                  if (i >= t1.length)
                    throw H.ioore(t1, i);
                  if (J.$index$asx(t1[i], j).get$creep() < 0) {
                    t1 = $.game.world.tiles;
                    if (i >= t1.length)
                      throw H.ioore(t1, i);
                    J.$index$asx(t1[i], j).set$creep(0);
                  }
                }
              }
              ++j;
            }
            ++i;
          }
          if (this.energy === 0) {
            this.status = "RETURNING";
            t1 = this.home;
            t2 = t1.position.x;
            t4 = $.game.tileSize;
            if (typeof t2 !== "number")
              throw t2.$mul();
            t3.x = t2 * t4;
            t1 = t1.position.y;
            if (typeof t1 !== "number")
              throw t1.$mul();
            t3.y = t1 * t4;
          }
        }
    } else if (t1 === "RETURNING") {
      this.turnToTarget$0();
      this.calculateVector$0();
      t1 = this.position;
      this.position = t1.$add(t1, this.speed);
      t1 = this.position;
      t2 = t1.x;
      t3 = this.targetPosition;
      t4 = t3.x;
      if (typeof t4 !== "number")
        throw t4.$sub();
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (t2 > t4 - 2)
        if (t2 < t4 + 2) {
          t1 = t1.y;
          t3 = t3.y;
          if (typeof t3 !== "number")
            throw t3.$sub();
          if (typeof t1 !== "number")
            throw t1.$gt();
          t1 = t1 > t3 - 2 && t1 < t3 + 2;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        this.status = "FALLING";
    }
  },
  draw$0: function() {
    var t1, context, realPosition, t2, t3, cursorPosition, t4, t5;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.real2screen$0();
    if (this.hovered) {
      J.getInterceptor$x(context).set$strokeStyle(context, "#f00");
      context.beginPath();
      t1 = realPosition.x;
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = 24 * t2;
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = realPosition.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      C.CanvasRenderingContext2D_methods.arc$6(context, t1 + t2, t3 + t2, t2 * this.scale, 0, 6.283185307179586, true);
      context.closePath();
      context.stroke();
    }
    if (this.selected) {
      J.getInterceptor$x(context).set$strokeStyle(context, "#fff");
      context.beginPath();
      t1 = realPosition.x;
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = 24 * t2;
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = realPosition.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      C.CanvasRenderingContext2D_methods.arc$6(context, t1 + t2, t3 + t2, t2 * this.scale, 0, 6.283185307179586, true);
      context.closePath();
      context.stroke();
      t1 = this.status;
      if (t1 === "ATTACKING" || t1 === "IDLE") {
        cursorPosition = this.targetPosition.real2screen$0();
        context.save();
        context.globalAlpha = 0.5;
        t1 = $.engine.images;
        t1 = t1.$index(t1, "targetcursor");
        t2 = cursorPosition.x;
        t3 = $.game;
        t4 = t3.tileSize;
        t3 = t3.zoom;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 *= t3;
        if (typeof t2 !== "number")
          throw t2.$sub();
        t5 = cursorPosition.y;
        if (typeof t5 !== "number")
          throw t5.$sub();
        t3 = 48 * t3;
        context.drawImage(t1, t2 - t4, t5 - t4, t3, t3);
        context.restore();
      }
    }
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 48 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      J.save$0$x(context);
      t1 = realPosition.x;
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = 24 * t2;
      if (typeof t1 !== "number")
        throw t1.$add();
      t3 = realPosition.y;
      if (typeof t3 !== "number")
        throw t3.$add();
      context.translate(t1 + t2, t3 + t2);
      t2 = $.engine;
      t3 = this.angle;
      t2.toString;
      context.rotate(t3 * 0.017453292519943295);
      t3 = $.engine.images;
      t3 = t3.$index(t3, this.imageID);
      t2 = $.game.zoom;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1 = this.scale;
      t4 = -24 * t2 * t1;
      t1 = 48 * t2 * t1;
      context.drawImage(t3, t4, t4, t1, t1);
      context.restore();
      context.fillStyle = "#f00";
      t1 = realPosition.x;
      if (typeof t1 !== "number")
        throw t1.$add();
      t4 = realPosition.y;
      if (typeof t4 !== "number")
        throw t4.$add();
      t3 = $.game.zoom;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      context.fillRect(t1 + 2, t4 + 1, 44 * t3 / this.maxEnergy * this.energy, 3);
    }
  },
  static: {
"": "Ship_baseSpeed",
}

},

Spore: {"": "Object;position>,targetPosition,speed,imageID<,remove,health,rotation,trailCounter",
  remove$0: function($receiver) {
    return this.remove.call$0();
  },
  init$0: function() {
    var t1, t2, t3, t4, t5, t6, delta, distance;
    t1 = this.targetPosition;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = t1.y;
    t6 = t3.y;
    if (typeof t5 !== "number")
      throw t5.$sub();
    if (typeof t6 !== "number")
      throw H.iae(t6);
    delta = new U.Vector(t2 - t4, t5 - t6);
    distance = t3.distanceTo$1(t1);
    t1 = this.speed;
    t3 = delta.x;
    if (typeof t3 !== "number")
      throw t3.$div();
    t6 = $.game;
    t1.x = t3 / distance * 1 * t6.speed;
    t3 = this.speed;
    t1 = delta.y;
    if (typeof t1 !== "number")
      throw t1.$div();
    t3.y = t1 / distance * 1 * t6.speed;
  },
  getCenter$0: function() {
    var t1, t2;
    t1 = this.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$sub();
    return new U.Vector(t2 - 16, t1 - 16);
  },
  move$0: function() {
    var t1, t2, t3, t4, i, j;
    this.trailCounter = this.trailCounter + 1;
    if (this.trailCounter === 10) {
      this.trailCounter = 0;
      $.game.smokes.push(U.Smoke$(this.getCenter$0()));
    }
    this.rotation = this.rotation + 10;
    t1 = this.rotation;
    if (t1 > 359)
      this.rotation = t1 - 359;
    t1 = this.position;
    this.position = t1.$add(t1, this.speed);
    t1 = this.position;
    t2 = t1.x;
    t3 = this.targetPosition;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t4 - 2)
      if (t2 < t4 + 2) {
        t1 = t1.y;
        t2 = t3.y;
        if (typeof t2 !== "number")
          throw t2.$sub();
        if (typeof t1 !== "number")
          throw t1.$gt();
        t1 = t1 > t2 - 2 && t1 < t2 + 2;
      } else
        t1 = false;
    else
      t1 = false;
    if (t1) {
      this.remove = true;
      $.engine.playSound$2("explosion", t3.real2tiled$0());
      t1 = t3.x;
      t2 = $.game.tileSize;
      if (typeof t1 !== "number")
        throw t1.$tdiv();
      i = C.JSNumber_methods.$tdiv(t1, t2) - 2;
      while (true) {
        t1 = t3.x;
        t2 = $.game.tileSize;
        if (typeof t1 !== "number")
          throw t1.$tdiv();
        if (!(i < C.JSNumber_methods.$tdiv(t1, t2) + 2))
          break;
        t1 = t3.y;
        if (typeof t1 !== "number")
          throw t1.$tdiv();
        j = C.JSNumber_methods.$tdiv(t1, t2) - 2;
        while (true) {
          t1 = t3.y;
          t2 = $.game;
          t4 = t2.tileSize;
          if (typeof t1 !== "number")
            throw t1.$tdiv();
          if (!(j < C.JSNumber_methods.$tdiv(t1, t4) + 2))
            break;
          if (t2.withinWorld$2(i, j)) {
            t1 = $.game.tileSize;
            t2 = t3.x;
            if (typeof t2 !== "number")
              throw t2.$add();
            t1 = Math.pow(i * t1 + t1 / 2 - (t2 + t1), 2);
            t2 = $.game.tileSize;
            t4 = t3.y;
            if (typeof t4 !== "number")
              throw t4.$add();
            t2 = Math.pow(j * t2 + t2 / 2 - (t4 + t2), 2);
            t4 = $.game.tileSize;
            if (t1 + t2 < Math.pow(t4, 2)) {
              t1 = $.game.world.tiles;
              if (i >>> 0 !== i || i >= t1.length)
                throw H.ioore(t1, i);
              t1 = J.$index$asx(t1[i], j);
              t1.creep = t1.get$creep() + 0.05;
            }
          }
          ++j;
        }
        ++i;
      }
    }
  },
  draw$0: function() {
    var t1, context, realPosition, t2, t3;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "buffer").get$context();
    realPosition = this.position.real2screen$0();
    t1 = $.engine;
    t2 = $.game.zoom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = 32 * t2;
    if (t1.isVisible$2(realPosition, new U.Vector(t2, t2))) {
      J.save$0$x(context);
      context.translate(realPosition.x, realPosition.y);
      t1 = $.engine;
      t2 = this.rotation;
      t1.toString;
      context.rotate(t2 * 0.017453292519943295);
      t2 = $.engine.images;
      t2 = t2.$index(t2, this.imageID);
      t1 = $.game.zoom;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t3 = -16 * t1;
      t1 = 32 * t1;
      context.drawImage(t2, t3, t3, t1, t1);
      context.restore();
    }
  },
  static: {
"": "Spore_baseSpeed",
}

},

UISymbol: {"": "Object;position>,imageID<,width>,height*,size>,packets,radius,keyCode>,active,hovered<",
  checkHovered$0: function() {
    var t1, t2, t3, t4;
    t1 = $.engine.mouseGUI;
    t2 = t1.x;
    t3 = this.position;
    t4 = t3.x;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (t2 > t4)
      if (t2 < t4 + this.width) {
        t1 = t1.y;
        t3 = t3.y;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (t1 > t3) {
          t2 = this.height;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          t2 = t1 < t3 + t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    else
      t1 = false;
    this.hovered = t1;
  },
  setActive$0: function() {
    var t1, t2, t3;
    if (this.hovered) {
      t1 = $.game;
      t2 = this.position.x;
      if (typeof t2 !== "number")
        throw t2.$div();
      t2 = C.JSNumber_methods.toInt$0(Math.floor(t2 / 81));
      t3 = this.position.y;
      if (typeof t3 !== "number")
        throw t3.$div();
      t1.activeSymbol = t2 + C.JSNumber_methods.toInt$0(Math.floor(t3 / 56)) * 6;
      this.active = true;
    } else
      this.active = false;
  },
  draw$0: function() {
    var t1, context, t2, t3, t4;
    t1 = $.engine.canvas;
    context = t1.$index(t1, "gui").get$context();
    if (this.active)
      J.set$fillStyle$x(context, "#696");
    else {
      t1 = J.getInterceptor$x(context);
      if (this.hovered)
        t1.set$fillStyle(context, "#232");
      else
        t1.set$fillStyle(context, "#454");
    }
    t1 = this.position;
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw t2.$add();
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw t1.$add();
    J.getInterceptor$x(context).fillRect$4(context, t2 + 1, t1 + 1, this.width, this.height);
    t1 = $.engine.images;
    t1 = t1.$index(t1, this.imageID);
    t2 = this.position;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw t3.$add();
    t2 = t2.y;
    if (typeof t2 !== "number")
      throw t2.$add();
    context.drawImage(t1, t3 + 24, t2 + 20, 32, 32);
    if (this.imageID === "cannon") {
      t1 = $.engine.images;
      t1 = t1.$index(t1, "cannongun");
      t2 = this.position;
      t3 = t2.x;
      if (typeof t3 !== "number")
        throw t3.$add();
      t2 = t2.y;
      if (typeof t2 !== "number")
        throw t2.$add();
      context.drawImage(t1, t3 + 24, t2 + 20, 32, 32);
    }
    if (this.imageID === "bomber") {
      t1 = $.engine.images;
      t1 = t1.$index(t1, "bombership");
      t2 = this.position;
      t3 = t2.x;
      if (typeof t3 !== "number")
        throw t3.$add();
      t2 = t2.y;
      if (typeof t2 !== "number")
        throw t2.$add();
      context.drawImage(t1, t3 + 24, t2 + 20, 32, 32);
    }
    context.fillStyle = "#fff";
    context.font = "10px";
    context.textAlign = "center";
    t1 = C.JSString_methods.substring$2(this.imageID, 0, 1).toUpperCase() + C.JSString_methods.substring$1(this.imageID, 1);
    t2 = this.position;
    t3 = t2.x;
    t4 = this.width;
    if (typeof t3 !== "number")
      throw t3.$add();
    t2 = t2.y;
    if (typeof t2 !== "number")
      throw t2.$add();
    C.CanvasRenderingContext2D_methods.fillText$3(context, t1, t3 + t4 / 2, t2 + 15);
    context.textAlign = "left";
    t2 = "(" + P.String_String$fromCharCode(this.keyCode) + ")";
    t4 = this.position;
    t3 = t4.x;
    if (typeof t3 !== "number")
      throw t3.$add();
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw t4.$add();
    C.CanvasRenderingContext2D_methods.fillText$3(context, t2, t3 + 5, t4 + 50);
    context.textAlign = "right";
    t4 = C.JSInt_methods.toString$0(this.packets);
    t3 = this.position;
    t2 = t3.x;
    t1 = this.width;
    if (typeof t2 !== "number")
      throw t2.$add();
    t3 = t3.y;
    if (typeof t3 !== "number")
      throw t3.$add();
    C.CanvasRenderingContext2D_methods.fillText$3(context, t4, t2 + t1 - 5, t3 + 50);
  }
}},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._dev$_current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._dev$_current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_shuffleList: function(list, random) {
  var $length, max, pos, t1, tmp;
  $length = list.length;
  for (; $length > 1;) {
    max = $length > 4294967295 ? 4294967295 : $length;
    pos = Math.random() * max >>> 0;
    --$length;
    t1 = list.length;
    if ($length >= t1)
      throw H.ioore(list, $length);
    tmp = list[$length];
    if (pos < 0 || pos >= t1)
      throw H.ioore(list, pos);
    C.JSArray_methods.$indexSet(list, $length, list[pos]);
    C.JSArray_methods.$indexSet(list, pos, tmp);
  }
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

ListIterator: {"": "Object;_iterable,_dev$_length,_index,_dev$_current",
  get$current: function() {
    return this._dev$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._dev$_length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._dev$_current = null;
      return false;
    }
    this._dev$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_dev$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._dev$_current = this._f$1(t1.get$current());
      return true;
    }
    this._dev$_current = null;
    return false;
  },
  get$current: function() {
    return this._dev$_current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
  }
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._dev$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

Timer_Timer$periodic: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createPeriodicTimer(duration, callback);
  }
  return P._createPeriodicTimer(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_createPeriodicTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_async$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_async$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(P.StateError$("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this._async$_controller._recordCancel$1(this);
  },
  _onPause$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(t1.get$_onPause());
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._async$_controller;
    if ((t1._state & 8) !== 0)
      t1._varData.resume$0();
    P._runGuarded(t1.get$_onResume());
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(P.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this._state === 1)
      this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

Timer: {"": "Object;"},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var nums, rest;
    if ((key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell._value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var rest, table, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      this._rest = table;
      rest = table;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._elements = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1._dev$_current);
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(P.StateError$("More than one element"));
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

String_String$fromCharCode: function(charCode) {
  var charCodes = P.List_List$filled(1, charCode, J.JSInt);
  H.setRuntimeTypeInfo(charCodes, [J.JSInt]);
  return P.String_String$fromCharCodes(charCodes);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, C.JSNumber_methods.$sub(this._duration, other.get$_duration()), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterable: {"": "Object;"},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

Stopwatch: {"": "Object;_start,_stop",
  start$0: function(_) {
    var t1, t2, t3;
    t1 = this._start == null;
    if (!t1 && this._stop == null)
      return;
    if (t1)
      this._start = H.Primitives_numMicroseconds();
    else {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._stop;
      t3 = this._start;
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      this._start = t1 - (t2 - t3);
      this._stop = null;
    }
  },
  stop$0: function(_) {
    if (!(this._start != null && this._stop == null))
      return;
    this._stop = H.Primitives_numMicroseconds();
  },
  reset$0: function(_) {
    if (this._start == null)
      return;
    this._start = H.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null) {
      t1 = H.Primitives_numMicroseconds();
      t2 = this._start;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t2 = t1 - t2;
      t1 = t2;
    } else {
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = t2 - t1;
    }
    return t1;
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

AudioElement_AudioElement: function(src) {
  return new Audio(src);
},

CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

Element__determineMouseWheelEventType: function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  J.set$src$x(e, src);
  return e;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;hostname=,href},port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hostname=,href},port=,protocol=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href}", "%": "HTMLBaseElement"},

BodyElement: {"": "HtmlElement;",
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forElement$1(receiver);
  },
  $isBodyElement: true,
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name=,value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": "WebGLRenderingContext;CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;fillStyle},globalAlpha},globalCompositeOperation},lineWidth},strokeStyle}",
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  createPatternFromImage$2: function(receiver, image, repetitionType) {
    return receiver.createPattern(image, repetitionType);
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  strokeRect$4: function(receiver, x, y, width, height) {
    return receiver.strokeRect(x, y, width, height);
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  drawImage$3: function(receiver, source, destX, destY) {
    return receiver.drawImage(source, destX, destY);
  },
  drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, destX, destY, destWidth, destHeight);
  },
  drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    receiver.fillText(text, x, y);
  },
  fillText$3: function($receiver, text, x, y) {
    return this.fillText$4($receiver, text, x, y, null);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

Document: {"": "Node;",
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forTarget$1(receiver);
  },
  "%": "Document|HTMLDocument|SVGDocument"
},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  get$client: function(receiver) {
    var t1 = new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
        t1 = new W.NodeValidatorBuilder(t1);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forElement$1(receiver);
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height%,name=,src},width%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "%": ";EventTarget"
},

FieldSetElement: {"": "HtmlElement;name=", "%": "HTMLFieldSetElement"},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;height%,name=,src},width%", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height%,src},width%", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height%,name=,size=,src},value=,width%", $isElement: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;name=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;href}", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hostname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;currentTime=,ended=,error=,src},volume}",
  play$0: function(receiver) {
    return receiver.play();
  },
  "%": "HTMLAudioElement;HTMLMediaElement"
},

MediaStream: {"": "EventTarget;ended=", "%": "MediaStream"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;", "%": "MIDIInput;MIDIPort"},

MouseEvent: {"": "UIEvent;",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
},

Node: {"": "EventTarget;lastChild=,nodeType=",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  "%": "DocumentFragment|DocumentType|Entity|Notation|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

ObjectElement: {"": "HtmlElement;height%,name=,width%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;index=,selected%,value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value=", "%": "HTMLParamElement"},

ProgressElement: {"": "HtmlElement;position=,value=", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

ScriptElement0: {"": "HtmlElement;src}", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name=,size=,value=", "%": "HTMLSelectElement"},

SourceElement: {"": "HtmlElement;src}", "%": "HTMLSourceElement"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

TextAreaElement: {"": "HtmlElement;name=,value=", "%": "HTMLTextAreaElement"},

TrackElement: {"": "HtmlElement;src}", "%": "HTMLTrackElement"},

UIEvent: {"": "Event;which=", "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"},

VideoElement: {"": "MediaElement;height%,width%", "%": "HTMLVideoElement"},

WheelEvent: {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
  },
  "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
},

Window: {"": "EventTarget;status%",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forTarget$1(receiver);
  },
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new W.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  set$bottom: function(receiver, value) {
    this.setProperty$3(receiver, "bottom", value, "");
  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  set$cursor: function(receiver, value) {
    this.setProperty$3(receiver, "cursor", value, "");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  get$position: function(receiver) {
    return this.getPropertyValue$1(receiver, "position");
  },
  set$position: function(receiver, value) {
    this.setProperty$3(receiver, "position", value, "");
  },
  set$right: function(receiver, value) {
    this.setProperty$3(receiver, "right", value, "");
  },
  get$size: function(receiver) {
    return this.getPropertyValue$1(receiver, "size");
  },
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$zIndex: function(receiver, value) {
    this.setProperty$3(receiver, "z-index", value, "");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  $asList: function() {
    return [W.Element];
  }
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(P.StateError$("No elements"));
    if (l > 1)
      throw H.wrapException(P.StateError$("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (!!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  clear$0: function(_) {
    var t1;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
      this.remove$1(this, t1._dev$_current);
  },
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._dev$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

_EventStream: {"": "Stream;_html$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_html$_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._html$_target == null)
      return;
    this._unlisten$0();
    this._html$_target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = element.tagName;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null); t1.moveNext$0();) {
        attr = t1._dev$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null); t1.moveNext$0();) {
        attr = t1._dev$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

NodeValidatorBuilder: {"": "Object;_validators",
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  }
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = element.tagName;
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  }
},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (new W._ElementAttributeMap(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isScriptElement)
      return false;
    if (!!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  }
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_LocationWrapper: {"": "Object;_ptr",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

NodeValidator: {"": "Object;"},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + node.tagName + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

ScriptElement: {"": "SvgElement;", $isScriptElement: true, "%": "SVGScriptElement"},

SvgElement: {"": "Element;",
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
    validator = new W.NodeValidatorBuilder(t1);
    t1 = validator._validators;
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    t1.push(new W._SvgNodeValidator());
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + svg + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_Random: {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw H.wrapException(new P.ArgumentError("negative max: " + H.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return Math.random() * max >>> 0;
  }
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.get$x$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = this.y;
    t4 = other.y;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t4 = new P.Point(t1 - t2, t3 - t4);
    H.setRuntimeTypeInfo(t4, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t4;
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        t1 = (t2 == null ? t3 == null : t2 === t3) && J.$eq(this.height, t1.get$height(other));
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  },
  intersects$1: function(_, other) {
    var t1, t2, t3;
    t1 = this.get$left(this);
    t2 = other.left;
    t3 = other.width;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (typeof t1 !== "number")
      throw t1.$le();
    if (t1 <= t2 + t3) {
      t1 = this.left;
      t3 = this.width;
      if (typeof t1 !== "number")
        throw t1.$add();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t2 <= t1 + t3) {
        t1 = this.top;
        t2 = other.top;
        t3 = other.height;
        if (typeof t2 !== "number")
          throw t2.$add();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (typeof t1 !== "number")
          throw t1.$le();
        if (t1 <= t2 + t3) {
          t3 = this.height;
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t3 = t2 <= t1 + t3;
          t1 = t3;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": ";ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null}}],
["html_common", "dart:html_common", , P, {
FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  $asListBase: null,
  $asList: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  $is_args1: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.doneResizing$closure = U.doneResizing$closure = new H.Closure$0(U.doneResizing, "doneResizing$closure");
init.globalFunctions.main$closure = U.main$closure = new H.Closure$0(U.main, "main$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.Element__determineMouseWheelEventType$closure = W.Element__determineMouseWheelEventType$closure = new H.Closure$1(W.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
// Runtime type support
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
U.Vector.$isObject = true;
U.Packet.$isObject = true;
U.Sporetower.$isObject = true;
U.Emitter.$isObject = true;
U.UISymbol.$isObject = true;
U.Explosion.$isObject = true;
U.Smoke.$isObject = true;
U.Spore.$isObject = true;
U.Building.$isObject = true;
U.Shell.$isObject = true;
U.Ship.$isObject = true;
U.Projectile.$isObject = true;
W.NodeValidator.$isObject = true;
W.MouseEvent.$isObject = true;
W.Event.$isObject = true;
W.WheelEvent.$isObject = true;
W.KeyboardEvent.$isObject = true;
U.Route.$isRoute = true;
U.Route.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Object.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_canplay = new W.EventStreamProvider("canplay");
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_contextmenu = new W.EventStreamProvider("contextmenu");
C.EventStreamProvider_dblclick = new W.EventStreamProvider("dblclick");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.Building_damageCounter = 0;
$.Emitter_counter = null;
$.Smoke_counter = null;
$.Explosion_counter = null;
$.engine = null;
$.game = null;
$.Packet_baseSpeed = 3;
$.Projectile_baseSpeed = 5;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createPatternFromImage$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createPatternFromImage$2(receiver, a0, a1);
};
J.drawImage$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawImage$3(receiver, a0, a1, a2);
};
J.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
J.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$currentTime$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$currentTime(receiver);
};
J.get$deltaY$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$deltaY(receiver);
};
J.get$ended$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ended(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$selected$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selected(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$status$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$status(receiver);
};
J.get$top$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$top(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$which$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$which(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.play$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).play$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.restore$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).restore$0(receiver);
};
J.save$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).save$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$bottom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bottom(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$globalAlpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
J.set$globalCompositeOperation$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$index$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$index(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$lineWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$right$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$right(receiver, value);
};
J.set$selected$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selected(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$status$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$status(receiver, value);
};
J.set$strokeStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$volume$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$volume(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.set$zIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$zIndex(receiver, value);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.strokeRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).strokeRect$4(receiver, a0, a1, a2, a3);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsFixed$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
J.translate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(U.main$closure); });
  } else {
    H.startRootIsolate(U.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=main.dart.js.map
//@ sourceMappingURL=main.dart.js.map
